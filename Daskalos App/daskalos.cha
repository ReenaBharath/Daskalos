<?xml version="1.0"?><st-source><time-stamp>From VisualWorksÂ® NonCommercial, 7.4.1 of May 30, 2006 on May 6, 2007 at 9:19:27 pm</time-stamp><methods><class-id>UI.Dialog class</class-id> <category>private</category><body package="Interface-Dialogs" selector="usesNativeDialogs">usesNativeDialogs	"Answer whether the system should attempt to use native OS dialogs whenever it is possible. Currently this only affects the file dialogs."	^UseNativeDialogs ~~ false "don't break on uninitialized variable"</body></methods><methods><class-id>UI.Dialog class</class-id> <category>enhanced - Win32</category><body package="Aragon.Win32" selector="useWin32">useWin32	^(Aragon includesKey: #Win32)		and: [OSHandle currentOS == #win32 		and: [InputState default shiftDown not]]</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>settings-browser</category><body package="Tools-Settings-VW" selector="browser10DefaultBrowserType">browser10DefaultBrowserType	&lt;setting: #(tools browser defaultBrowserType)&gt;	| typeDescription |	typeDescription := EnumerationSetting		keys: #(Parcel Package Category)		choices: #(Parcel Package Category)		labels: (Array			with: #Parcel &lt;&lt; #labels &gt;&gt; 'Parcel'			with: #Package &lt;&lt; #labels &gt;&gt; 'Package'   with: #Category &lt;&lt; #labels &gt;&gt; 'Category'  ).	^(typeDescription on: Refactory.Browser.BrowserNavigator aspect: #navigatorType)		label: #DefaultBrowserType &lt;&lt; #labels &gt;&gt; 'Default browser type';		helpText: #DefaultBrowserTypeHelpText &lt;&lt; #dialogs &gt;&gt; 'This setting determines what type of browser is opened when spawning a new browser. After the browser is opened, you can change its type at any time using the Browser menu.'</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\vw7.4.1nc\image\undo.im' 'May 6, 2007' '9:19:44 pm')""An image file c:\vw7.4.1nc\image\undo.im was created at 9:19:44 pm on May 6, 2007."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\vw7.4.1nc\image\new741.im' 'May 6, 2007' '9:20:20 pm')""An image file c:\vw7.4.1nc\image\new741.im was created at 9:20:20 pm on May 6, 2007."</do-it><methods><class-id>Core.Collection</class-id> <category>Daskalos support</category><body package="Daskalos" selector="//">// anObject(anObject isKindOf: Array) ifTrue: []</body></methods><do-it>[3] isKindOf: BlockClosure</do-it><methods><class-id>Core.Collection</class-id> <category>Daskalos support</category><body package="Daskalos" selector="&gt;&gt;">&gt;&gt; anObject 	(anObject isKindOf: Array) ifTrue: [^self projectAll: anObject].	(anObject isKindOf: BlockClosure) ifTrue: [^self select: anObject].	^self error: 'Wrong syntax in "&gt;&gt;" parameter.'</body></methods><methods><class-id>Core.Collection</class-id> <category>Daskalos support</category><body package="Daskalos" selector="//">// anObject 	(anObject isKindOf: BlockClosure) ifTrue: [^self select: anObject].	^self error: 'Wrong syntax in "//" parameter.'</body></methods><methods><class-id>Core.Collection</class-id> <category>Daskalos support</category><body package="Daskalos" selector="&gt;&gt;">&gt;&gt; anObject 	(anObject isKindOf: Array) ifTrue: [^self projectAll: anObject].	(anObject isKindOf: BlockClosure) ifTrue: [^self collect: anObject].	^self error: 'Wrong syntax in "&gt;&gt;" parameter.'</body></methods><do-it>#(3 4 5) &gt;&gt; #(sin cos)</do-it><methods><class-id>Core.Collection</class-id> <category>Daskalos support</category><body package="Daskalos" selector="&gt;&gt;">&gt;&gt; anObject 	(anObject isKindOf: Array) ifTrue: [^self projectAll: anObject].	(anObject isKindOf: BlockClosure) ifTrue: [^self collect: anObject].	^self error: anObject printString , 'must be either a block or an array.'</body></methods><methods><class-id>Core.Collection</class-id> <category>Daskalos support</category><body package="Daskalos" selector="&gt;&gt;">&gt;&gt; anObject 	(anObject isKindOf: Array) ifTrue: [^self projectAll: anObject].	(anObject isKindOf: BlockClosure) ifTrue: [^self collect: anObject].	^self error: 'The parameter ' , anObject printString 				, ' must be either a block or an array.'</body></methods><do-it>#(3 4 5) &gt;&gt; [:x | x * x]</do-it><methods><class-id>Core.Collection</class-id> <category>Daskalos support</category><body package="Daskalos" selector="//">// anObject 	(anObject isKindOf: BlockClosure) ifTrue: [^self select: anObject].	^self error: 'The parameter ' , anObject printString , ' must be a block.'</body></methods><do-it>#(3 4 5) // [:x | x&gt; 1] </do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\vw7.4.1nc\image\new741.im' 'March 9, 2009' '12:29:15 pm')""An image file c:\vw7.4.1nc\image\new741.im was created at 12:29:15 pm on March 9, 2009."</do-it><methods><class-id>DaskalosApp</class-id> <category>initialize-release</category><body package="Daskalos" selector="initializeAbout">initializeAbout	self aboutField 		value: 'DASKALOS 1.03b - OBJECT MODELING TUTOR(C) 2006 .. 2009 Vojtech MerunkaEach saved project consists of four files:filename.xml	main file having project data - this is to be saved and loaded,filename.st   	source code of classes in the project,filename.html	paper documentation of the project andfilename.gif   	diagram of classes and collections.All user classes are stored in "Daskalos User Classes" category and may be included into any standard smalltalk program.Version 1.03b# Collection operators // and &gt;&gt; has been added.Version 1.02b# Composition links to classes and collections improved.Version 1.01b# File save dialog fixed.# In HTML documentation displayed by the MS Internet Explorer, apostrophe character fixed.# Diagram stability improved, no crashes after class or collection rename and remove.'</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\vw7.4.1nc\image\new741.im' 'March 9, 2009' '12:32:37 pm')""An image file c:\vw7.4.1nc\image\new741.im was created at 12:32:37 pm on March 9, 2009."</do-it><methods><class-id>DaskalosApp</class-id> <category>runtime</category><body package="Daskalos" selector="noticeOfWindowClose:">noticeOfWindowClose: aWindow 	ObjectMemory quit</body></methods><methods><class-id>DaskalosApp</class-id> <category>runtime</category><body package="Daskalos" selector="projectSave">projectSave	projectName value asString = 'save image' ifFalse: [^self projectSaveOld].	projectName value: ''.	ObjectMemory saveAs: 'daskalos' thenQuit: true</body></methods><methods><class-id>DaskalosApp</class-id> <category>runtime</category><body package="Daskalos" selector="projectSaveOld">projectSaveOld	| project fileName stream sourceFileName htmlFileName gifFileName |	Object errorSignal handle: [:ex | project := nil]		do: [project := self projectData].	project isNil ifTrue: [^Dialog warn: 'Incomplete data.'].	(fileName := Dialog requestNewFileName: 'Name a file' default: 'aDaskalosProject.xml') 		isEmpty ifTrue: [^nil].	(fileName isLike: '*.xml') ifFalse: [fileName := fileName , '.xml'].	sourceFileName := (fileName copyFrom: 1 to: fileName size - 4) , '.st'.	gifFileName := (fileName copyFrom: 1 to: fileName size - 4) , '.gif'.	htmlFileName := (fileName copyFrom: 1 to: fileName size - 4) , '.html'.	Cursor write showWhile: 			[			[stream := SixxWriteStream newFileNamed: fileName.			stream nextPut: project] 					ensure: [stream close].			self saveClassesToFile: sourceFileName.			self saveGIFToFile: gifFileName.			self saveHTMLToFile: htmlFileName]</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('daskalos.im' 'March 9, 2009' '12:34:03 pm')""An image file daskalos.im was created at 12:34:03 pm on March 9, 2009."</do-it><class><name>Auto</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Auto</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>type </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Auto class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Auto</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     type := nil.</body></methods><do-it>Auto removeFromSystem</do-it><class><name>Airline</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name contact headquarters </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Airline class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#contact -&gt; Core.Number); add: (#headquarters -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><comment><class-id>Airline</class-id><body>This Airline Class has instances such as name,address and headquarters</body></comment><methods><class-id>Airline</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Airline</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Airline</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="headquarters">headquarters"generated by Daskalos"     ^headquarters</body></methods><methods><class-id>Airline</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="headquarters:">headquarters: anObject"generated by Daskalos"     headquarters := (self checkValue: anObject forVariable: #headquarters)</body></methods><methods><class-id>Airline</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Airline</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Airline</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     contact := nil.     headquarters := nil.</body></methods><class><name>Ticket</name><environment>Smalltalk</environment><super>Airline</super><private>false</private><indexed-type>none</indexed-type><inst-vars>arrival dateOfTravel departure ticketId </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Ticket class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#dateOfTravel -&gt; Core.Date); add: (#departure -&gt; Core.String); add: (#headquarters -&gt; Core.String); add: (#contact -&gt; Core.Number); add: (#arrival -&gt; Core.String); add: (#ticketId -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><comment><class-id>Ticket</class-id><body>This Ticket class has instances such as arrival, depature, date of travel and the ticket id.</body></comment><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="arrival">arrival"generated by Daskalos"     ^arrival</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="arrival:">arrival: anObject"generated by Daskalos"     arrival := (self checkValue: anObject forVariable: #arrival)</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dateOfTravel">dateOfTravel"generated by Daskalos"     ^dateOfTravel</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dateOfTravel:">dateOfTravel: anObject"generated by Daskalos"     dateOfTravel := (self checkValue: anObject forVariable: #dateOfTravel)</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="departure">departure"generated by Daskalos"     ^departure</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="departure:">departure: anObject"generated by Daskalos"     departure := (self checkValue: anObject forVariable: #departure)</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="ticketId">ticketId"generated by Daskalos"     ^ticketId</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="ticketId:">ticketId: anObject"generated by Daskalos"     ticketId := (self checkValue: anObject forVariable: #ticketId)</body></methods><methods><class-id>Ticket</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     arrival := nil.     dateOfTravel := nil.     departure := nil.     ticketId := nil.</body></methods><class><name>Passenger</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName idType purposeOfTravel buy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Passenger class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#purposeOfTravel -&gt; Core.String); add: (#buy -&gt; Core.Object); add: (#idType -&gt; Core.String); add: (#firstName -&gt; Core.String); add: (#lastName -&gt; Core.String); yourself)</body></methods><comment><class-id>Passenger</class-id><body>This Passenger Class has instances such first name,last name, id type and purpose of travel</body></comment><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="buy">buy"generated by Daskalos"     ^buy</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="buy:">buy: anObject"generated by Daskalos"     buy := (self checkValue: anObject forVariable: #buy)</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="idType">idType"generated by Daskalos"     ^idType</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="idType:">idType: anObject"generated by Daskalos"     idType := (self checkValue: anObject forVariable: #idType)</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purposeOfTravel">purposeOfTravel"generated by Daskalos"     ^purposeOfTravel</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purposeOfTravel:">purposeOfTravel: anObject"generated by Daskalos"     purposeOfTravel := (self checkValue: anObject forVariable: #purposeOfTravel)</body></methods><methods><class-id>Passenger</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     idType := nil.     purposeOfTravel := nil.     buy := nil.</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName id jobPosition salary workIn worksFor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#lastName -&gt; Core.String); add: (#worksFor -&gt; Core.Object); add: (#id -&gt; Core.Number); add: (#workIn -&gt; Core.Object); add: (#firstName -&gt; Core.String); add: (#salary -&gt; Core.Number); add: (#jobPosition -&gt; Core.String); yourself)</body></methods><comment><class-id>Employee</class-id><body>This Employee Class has instances such as first name,last name, id, job position  and salary</body></comment><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jobPosition">jobPosition"generated by Daskalos"     ^jobPosition</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jobPosition:">jobPosition: anObject"generated by Daskalos"     jobPosition := (self checkValue: anObject forVariable: #jobPosition)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary">salary"generated by Daskalos"     ^salary</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary:">salary: anObject"generated by Daskalos"     salary := (self checkValue: anObject forVariable: #salary)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="workIn">workIn"generated by Daskalos"     ^workIn</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="workIn:">workIn: anObject"generated by Daskalos"     workIn := (self checkValue: anObject forVariable: #workIn)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="worksFor">worksFor"generated by Daskalos"     ^worksFor</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="worksFor:">worksFor: anObject"generated by Daskalos"     worksFor := (self checkValue: anObject forVariable: #worksFor)</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     id := nil.     jobPosition := nil.     salary := nil.     workIn := nil.     worksFor := nil.</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="salaryRange">salaryRange	| sm1 sm2 |	sm1 := 'Good'.	sm2 := 'Average'.	salary &gt; 50000 ifTrue: [^sm1] ifFalse: [^sm2]</body></methods><do-it>Employees := Set new.Passengers := Set new.Tickets := Set new.Airlines := Set new."________Airliness___________"a1 := Airline new.a1 name: 'ABCD Airlines'.a1 contact: 79878188. a1 headquarters: 'San Fransisco'."________Employees___________"e1 := Employee new.e1 firstName: 'Micheal'.e1 lastName: 'Jason'. e1 id: 001.e1 salary: 120000.e1 jobPosition: 'Air Hosters'.e2 := Employee new.e2 firstName: 'Tom'.e2 lastName: 'Athreya'. e2 id: 002.e2 salary: 50000.e2 jobPosition: 'Manager'.e3 := Employee new.e3 firstName: 'Jerry'.e3 lastName: 'Mad'. e3 id: 003.e3 salary: 150000.e3 jobPosition: 'Pilot'.e4 := Employee new.e4 firstName: 'Jonathon'.e4 lastName: 'Maggi'. e4 id: 004.e4 salary: 60000.e4 jobPosition: 'Manager'.e5 := Employee new.e5 firstName: 'Hannah'.e5 lastName: 'Perousia'. e5 id: 005.e5 salary: 150000.e5 jobPosition: 'Air Hosters'."________Passengers___________"p1 := Passenger new.p1 firstName: 'Micheal'.p1 lastName: 'Jason'. p1 idType: 'Passport'.p1 purposeOfTravel: 'Vacation'.p2 := Passenger new.p2 firstName: 'Muthasir'.p2 lastName: 'Sam'. p2 idType: 'Permenant Residence Card'.p2 purposeOfTravel: 'Business'.p3 := Passenger new.p3 firstName: 'Badri'.p3 lastName: 'Janathan'. p3 idType: 'Passport'.p3 purposeOfTravel: 'Study'.p4 := Passenger new.p4 firstName: 'Josua'.p4 lastName: 'Samuel'. p4 idType: 'Driving License'.p4 purposeOfTravel: 'Vacation'."________Tickets___________"t1 := Ticket new.t1 name: 'ABCD Airlines'.t1 contact: 79878188. t1 headquarters: 'San Fransisco'.t1 departure: 'New York'.t1 arrival: 'Praha'.t1 dateOfTravel: '15-AUG-2021' asDate.t1 ticketId: 112233.t2 := Ticket new.t2 name: 'ABCD Airlines'.t2 contact: 79878188. t2 headquarters: 'San Fransisco'.t2 departure: 'Greenland'.t2 arrival: 'Dubai'.t2 dateOfTravel: '21-SEP-2021' asDate.t2 ticketId: 223344.t3 := Ticket new.t3 name: 'ABCD Airlines'.t3 contact: 79878188. t3 headquarters: 'San Fransisco'.t3 departure: 'UK'.t3 arrival: 'Iceland'.t3 dateOfTravel: '21-FEB-2021' asDate.t3 ticketId: 14566.t4 := Ticket new.t4 name: 'ABCD Airlines'.t4 contact: 79878188. t4 headquarters: 'San Fransisco'.t4 departure: 'India'.t4 arrival: 'Germany'.t4 dateOfTravel: '20-DEC-2021' asDate.t4 ticketId: 893672.Airlines add: a1.Employees add: e1; add: e2; add: e3; add: e4; add: e5. Passengers add: p1; add: p2; add: p3; add: p4.Tickets add:t1; add: t2; add: t3; add: t4.e1 workIn: a1.e2 workIn: a1.e3 workIn: a1.e4 workIn: a1.e5 workIn: a1.e1 worksFor: p1.e2 worksFor: p2.e3 worksFor: p3.e4 worksFor: p4.e5 worksFor: p1.p1 buy: t1.p2 buy: t2.p3 buy: t3.p4 buy: t4.</do-it><class><name>Airline</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name contact headquarters </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Airline class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#contact -&gt; Core.Number); add: (#headquarters -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><comment><class-id>Airline</class-id><body>This Airline Class has instances such as name,address and headquarters</body></comment><methods><class-id>Airline</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Airline</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Airline</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="headquarters">headquarters"generated by Daskalos"     ^headquarters</body></methods><methods><class-id>Airline</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="headquarters:">headquarters: anObject"generated by Daskalos"     headquarters := (self checkValue: anObject forVariable: #headquarters)</body></methods><methods><class-id>Airline</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Airline</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Airline</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     contact := nil.     headquarters := nil.</body></methods><class><name>Ticket</name><environment>Smalltalk</environment><super>Airline</super><private>false</private><indexed-type>none</indexed-type><inst-vars>arrival dateOfTravel departure ticketId </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Ticket class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#dateOfTravel -&gt; Core.Date); add: (#departure -&gt; Core.String); add: (#headquarters -&gt; Core.String); add: (#contact -&gt; Core.Number); add: (#arrival -&gt; Core.String); add: (#ticketId -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><comment><class-id>Ticket</class-id><body>This Ticket class has instances such as arrival, depature, date of travel and the ticket id.</body></comment><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="arrival">arrival"generated by Daskalos"     ^arrival</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="arrival:">arrival: anObject"generated by Daskalos"     arrival := (self checkValue: anObject forVariable: #arrival)</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dateOfTravel">dateOfTravel"generated by Daskalos"     ^dateOfTravel</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dateOfTravel:">dateOfTravel: anObject"generated by Daskalos"     dateOfTravel := (self checkValue: anObject forVariable: #dateOfTravel)</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="departure">departure"generated by Daskalos"     ^departure</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="departure:">departure: anObject"generated by Daskalos"     departure := (self checkValue: anObject forVariable: #departure)</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="ticketId">ticketId"generated by Daskalos"     ^ticketId</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="ticketId:">ticketId: anObject"generated by Daskalos"     ticketId := (self checkValue: anObject forVariable: #ticketId)</body></methods><methods><class-id>Ticket</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     arrival := nil.     dateOfTravel := nil.     departure := nil.     ticketId := nil.</body></methods><class><name>Passenger</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName idType purposeOfTravel buy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Passenger class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#purposeOfTravel -&gt; Core.String); add: (#buy -&gt; Core.Object); add: (#idType -&gt; Core.String); add: (#firstName -&gt; Core.String); add: (#lastName -&gt; Core.String); yourself)</body></methods><comment><class-id>Passenger</class-id><body>This Passenger Class has instances such first name,last name, id type and purpose of travel</body></comment><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="buy">buy"generated by Daskalos"     ^buy</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="buy:">buy: anObject"generated by Daskalos"     buy := (self checkValue: anObject forVariable: #buy)</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="idType">idType"generated by Daskalos"     ^idType</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="idType:">idType: anObject"generated by Daskalos"     idType := (self checkValue: anObject forVariable: #idType)</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purposeOfTravel">purposeOfTravel"generated by Daskalos"     ^purposeOfTravel</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purposeOfTravel:">purposeOfTravel: anObject"generated by Daskalos"     purposeOfTravel := (self checkValue: anObject forVariable: #purposeOfTravel)</body></methods><methods><class-id>Passenger</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     idType := nil.     purposeOfTravel := nil.     buy := nil.</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName id jobPosition salary workIn worksFor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#lastName -&gt; Core.String); add: (#worksFor -&gt; Core.Object); add: (#id -&gt; Core.Number); add: (#workIn -&gt; Core.Object); add: (#firstName -&gt; Core.String); add: (#salary -&gt; Core.Number); add: (#jobPosition -&gt; Core.String); yourself)</body></methods><comment><class-id>Employee</class-id><body>This Employee Class has instances such as first name,last name, id, job position  and salary</body></comment><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jobPosition">jobPosition"generated by Daskalos"     ^jobPosition</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jobPosition:">jobPosition: anObject"generated by Daskalos"     jobPosition := (self checkValue: anObject forVariable: #jobPosition)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary">salary"generated by Daskalos"     ^salary</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary:">salary: anObject"generated by Daskalos"     salary := (self checkValue: anObject forVariable: #salary)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="workIn">workIn"generated by Daskalos"     ^workIn</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="workIn:">workIn: anObject"generated by Daskalos"     workIn := (self checkValue: anObject forVariable: #workIn)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="worksFor">worksFor"generated by Daskalos"     ^worksFor</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="worksFor:">worksFor: anObject"generated by Daskalos"     worksFor := (self checkValue: anObject forVariable: #worksFor)</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     id := nil.     jobPosition := nil.     salary := nil.     workIn := nil.     worksFor := nil.</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="salaryRange">salaryRange	| sm1 sm2 |	sm1 := 'Good'.	sm2 := 'Average'.	salary &gt; 50000 ifTrue: [^sm1] ifFalse: [^sm2]</body></methods><do-it>Employees select: [: z | z salaryRange = 'Average'].</do-it><class><name>Visitor</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName modeOfPayment visits </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Visitor class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstName -&gt; Core.String); add: (#visits -&gt; Core.Object); add: (#lastName -&gt; Core.String); add: (#modeOfPayment -&gt; Core.String); yourself)</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="modeOfPayment">modeOfPayment"generated by Daskalos"     ^modeOfPayment</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="modeOfPayment:">modeOfPayment: anObject"generated by Daskalos"     modeOfPayment := (self checkValue: anObject forVariable: #modeOfPayment)</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="visits">visits"generated by Daskalos"     ^visits</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="visits:">visits: anObject"generated by Daskalos"     visits := (self checkValue: anObject forVariable: #visits)</body></methods><methods><class-id>Visitor</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     modeOfPayment := nil.     visits := nil.</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName id salary workIn showsAround </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#lastName -&gt; Core.String); add: (#showsAround -&gt; Core.Object); add: (#workIn -&gt; Core.Object); add: (#id -&gt; Core.Number); add: (#salary -&gt; Core.Number); add: (#firstName -&gt; Core.String); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary">salary"generated by Daskalos"     ^salary</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary:">salary: anObject"generated by Daskalos"     salary := (self checkValue: anObject forVariable: #salary)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="showsAround">showsAround"generated by Daskalos"     ^showsAround</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="showsAround:">showsAround: anObject"generated by Daskalos"     showsAround := (self checkValue: anObject forVariable: #showsAround)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="workIn">workIn"generated by Daskalos"     ^workIn</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="workIn:">workIn: anObject"generated by Daskalos"     workIn := (self checkValue: anObject forVariable: #workIn)</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     id := nil.     salary := nil.     workIn := nil.     showsAround := nil.</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="salaryRange">salaryRange	| sm1 sm2 |	sm1 := 'Good'.	sm2 := 'Average'.	salary &gt; 20000 ifTrue: [^sm1] ifFalse: [^sm2]</body></methods><class><name>Zoo</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>contact entranceFee address zooName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zoo class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#contact -&gt; Core.Number); add: (#zooName -&gt; Core.String); add: (#address -&gt; Core.String); add: (#entranceFee -&gt; Core.Number); yourself)</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="entranceFee">entranceFee"generated by Daskalos"     ^entranceFee</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="entranceFee:">entranceFee: anObject"generated by Daskalos"     entranceFee := (self checkValue: anObject forVariable: #entranceFee)</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zooName">zooName"generated by Daskalos"     ^zooName</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zooName:">zooName: anObject"generated by Daskalos"     zooName := (self checkValue: anObject forVariable: #zooName)</body></methods><methods><class-id>Zoo</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     contact := nil.     entranceFee := nil.     address := nil.     zooName := nil.</body></methods><class><name>Animal</name><environment>Smalltalk</environment><super>Zoo</super><private>false</private><indexed-type>none</indexed-type><inst-vars>age name animalType </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Animal class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); add: (#age -&gt; Core.Number); add: (#contact -&gt; Core.Number); add: (#animalType -&gt; Core.String); add: (#entranceFee -&gt; Core.Number); add: (#zooName -&gt; Core.String); yourself)</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age">age"generated by Daskalos"     ^age</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age:">age: anObject"generated by Daskalos"     age := (self checkValue: anObject forVariable: #age)</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="animalType">animalType"generated by Daskalos"     ^animalType</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="animalType:">animalType: anObject"generated by Daskalos"     animalType := (self checkValue: anObject forVariable: #animalType)</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Animal</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     age := nil.     name := nil.     animalType := nil.</body></methods><methods><class-id>Animal</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="ageRange">ageRange	| pm1 pm2 |	pm1 := 'Old'.	pm2 := 'Young'.	age &gt; 30 ifTrue: [^pm1] ifFalse: [^pm2]</body></methods><do-it>Visitor removeFromSystem</do-it><do-it>Employee removeFromSystem</do-it><do-it>Animal removeFromSystem</do-it><do-it>Zoo removeFromSystem</do-it><class><name>Airline</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name contact headquarters </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Airline class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#contact -&gt; Core.Number); add: (#headquarters -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><comment><class-id>Airline</class-id><body>This Airline Class has instances such as name,address and headquarters</body></comment><methods><class-id>Airline</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Airline</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Airline</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="headquarters">headquarters"generated by Daskalos"     ^headquarters</body></methods><methods><class-id>Airline</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="headquarters:">headquarters: anObject"generated by Daskalos"     headquarters := (self checkValue: anObject forVariable: #headquarters)</body></methods><methods><class-id>Airline</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Airline</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Airline</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     contact := nil.     headquarters := nil.</body></methods><class><name>Ticket</name><environment>Smalltalk</environment><super>Airline</super><private>false</private><indexed-type>none</indexed-type><inst-vars>arrival dateOfTravel departure ticketId </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Ticket class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#dateOfTravel -&gt; Core.Date); add: (#departure -&gt; Core.String); add: (#headquarters -&gt; Core.String); add: (#contact -&gt; Core.Number); add: (#arrival -&gt; Core.String); add: (#ticketId -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><comment><class-id>Ticket</class-id><body>This Ticket class has instances such as arrival, depature, date of travel and the ticket id.</body></comment><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="arrival">arrival"generated by Daskalos"     ^arrival</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="arrival:">arrival: anObject"generated by Daskalos"     arrival := (self checkValue: anObject forVariable: #arrival)</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dateOfTravel">dateOfTravel"generated by Daskalos"     ^dateOfTravel</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dateOfTravel:">dateOfTravel: anObject"generated by Daskalos"     dateOfTravel := (self checkValue: anObject forVariable: #dateOfTravel)</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="departure">departure"generated by Daskalos"     ^departure</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="departure:">departure: anObject"generated by Daskalos"     departure := (self checkValue: anObject forVariable: #departure)</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="ticketId">ticketId"generated by Daskalos"     ^ticketId</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="ticketId:">ticketId: anObject"generated by Daskalos"     ticketId := (self checkValue: anObject forVariable: #ticketId)</body></methods><methods><class-id>Ticket</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     arrival := nil.     dateOfTravel := nil.     departure := nil.     ticketId := nil.</body></methods><class><name>Passenger</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName idType purposeOfTravel buy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Passenger class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#purposeOfTravel -&gt; Core.String); add: (#buy -&gt; Core.Object); add: (#idType -&gt; Core.String); add: (#firstName -&gt; Core.String); add: (#lastName -&gt; Core.String); yourself)</body></methods><comment><class-id>Passenger</class-id><body>This Passenger Class has instances such first name,last name, id type and purpose of travel</body></comment><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="buy">buy"generated by Daskalos"     ^buy</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="buy:">buy: anObject"generated by Daskalos"     buy := (self checkValue: anObject forVariable: #buy)</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="idType">idType"generated by Daskalos"     ^idType</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="idType:">idType: anObject"generated by Daskalos"     idType := (self checkValue: anObject forVariable: #idType)</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purposeOfTravel">purposeOfTravel"generated by Daskalos"     ^purposeOfTravel</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purposeOfTravel:">purposeOfTravel: anObject"generated by Daskalos"     purposeOfTravel := (self checkValue: anObject forVariable: #purposeOfTravel)</body></methods><methods><class-id>Passenger</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     idType := nil.     purposeOfTravel := nil.     buy := nil.</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName id jobPosition salary workIn worksFor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#lastName -&gt; Core.String); add: (#worksFor -&gt; Core.Object); add: (#id -&gt; Core.Number); add: (#workIn -&gt; Core.Object); add: (#firstName -&gt; Core.String); add: (#salary -&gt; Core.Number); add: (#jobPosition -&gt; Core.String); yourself)</body></methods><comment><class-id>Employee</class-id><body>This Employee Class has instances such as first name,last name, id, job position  and salary</body></comment><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jobPosition">jobPosition"generated by Daskalos"     ^jobPosition</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jobPosition:">jobPosition: anObject"generated by Daskalos"     jobPosition := (self checkValue: anObject forVariable: #jobPosition)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary">salary"generated by Daskalos"     ^salary</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary:">salary: anObject"generated by Daskalos"     salary := (self checkValue: anObject forVariable: #salary)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="workIn">workIn"generated by Daskalos"     ^workIn</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="workIn:">workIn: anObject"generated by Daskalos"     workIn := (self checkValue: anObject forVariable: #workIn)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="worksFor">worksFor"generated by Daskalos"     ^worksFor</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="worksFor:">worksFor: anObject"generated by Daskalos"     worksFor := (self checkValue: anObject forVariable: #worksFor)</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     id := nil.     jobPosition := nil.     salary := nil.     workIn := nil.     worksFor := nil.</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="salaryRange">salaryRange	| sm1 sm2 |	sm1 := 'Good'.	sm2 := 'Average'.	salary &gt; 50000 ifTrue: [^sm1] ifFalse: [^sm2]</body></methods><do-it>Employees select: [: z | z jobPosition = 'Air Hosters'].</do-it><do-it>Employees := Set new.Passengers := Set new.Tickets := Set new.Airlines := Set new."________Airliness___________"a1 := Airline new.a1 name: 'ABCD Airlines'.a1 contact: 79878188. a1 headquarters: 'San Fransisco'."________Employees___________"e1 := Employee new.e1 firstName: 'Micheal'.e1 lastName: 'Jason'. e1 id: 001.e1 salary: 120000.e1 jobPosition: 'Air Hosters'.e2 := Employee new.e2 firstName: 'Tom'.e2 lastName: 'Athreya'. e2 id: 002.e2 salary: 50000.e2 jobPosition: 'Manager'.e3 := Employee new.e3 firstName: 'Jerry'.e3 lastName: 'Mad'. e3 id: 003.e3 salary: 150000.e3 jobPosition: 'Pilot'.e4 := Employee new.e4 firstName: 'Jonathon'.e4 lastName: 'Maggi'. e4 id: 004.e4 salary: 60000.e4 jobPosition: 'Manager'.e5 := Employee new.e5 firstName: 'Hannah'.e5 lastName: 'Perousia'. e5 id: 005.e5 salary: 150000.e5 jobPosition: 'Air Hosters'."________Passengers___________"p1 := Passenger new.p1 firstName: 'Micheal'.p1 lastName: 'Jason'. p1 idType: 'Passport'.p1 purposeOfTravel: 'Vacation'.p2 := Passenger new.p2 firstName: 'Muthasir'.p2 lastName: 'Sam'. p2 idType: 'Permenant Residence Card'.p2 purposeOfTravel: 'Business'.p3 := Passenger new.p3 firstName: 'Badri'.p3 lastName: 'Janathan'. p3 idType: 'Passport'.p3 purposeOfTravel: 'Study'.p4 := Passenger new.p4 firstName: 'Josua'.p4 lastName: 'Samuel'. p4 idType: 'Driving License'.p4 purposeOfTravel: 'Vacation'."________Tickets___________"t1 := Ticket new.t1 name: 'ABCD Airlines'.t1 contact: 79878188. t1 headquarters: 'San Fransisco'.t1 departure: 'New York'.t1 arrival: 'Praha'.t1 dateOfTravel: '15-AUG-2022' asDate.t1 ticketId: 112233.t2 := Ticket new.t2 name: 'ABCD Airlines'.t2 contact: 79878188. t2 headquarters: 'San Fransisco'.t2 departure: 'Greenland'.t2 arrival: 'Dubai'.t2 dateOfTravel: '21-SEP-2022' asDate.t2 ticketId: 223344.t3 := Ticket new.t3 name: 'ABCD Airlines'.t3 contact: 79878188. t3 headquarters: 'San Fransisco'.t3 departure: 'UK'.t3 arrival: 'Iceland'.t3 dateOfTravel: '21-FEB-2022' asDate.t3 ticketId: 14566.t4 := Ticket new.t4 name: 'ABCD Airlines'.t4 contact: 79878188. t4 headquarters: 'San Fransisco'.t4 departure: 'India'.t4 arrival: 'Germany'.t4 dateOfTravel: '20-DEC-2022' asDate.t4 ticketId: 893672.Airlines add: a1.Employees add: e1; add: e2; add: e3; add: e4; add: e5. Passengers add: p1; add: p2; add: p3; add: p4.Tickets add:t1; add: t2; add: t3; add: t4.e1 workIn: a1.e2 workIn: a1.e3 workIn: a1.e4 workIn: a1.e5 workIn: a1.e1 worksFor: p1.e2 worksFor: p2.e3 worksFor: p3.e4 worksFor: p4.e5 worksFor: p1.p1 buy: t1.p2 buy: t2.p3 buy: t3.p4 buy: t4.</do-it><do-it>Tickets select: [: z | z dateOfTravel &gt; '30-APR-2022' asDate].</do-it><class><name>Doctors</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name specialization department doctors </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Doctors class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#department -&gt; Core.String); add: (#doctors -&gt; Core.Object); add: (#specialization -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><comment><class-id>Doctors</class-id><body>Doctors have name and Specialization and Department .</body></comment><methods><class-id>Doctors</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="department">department"generated by Daskalos"     ^department</body></methods><methods><class-id>Doctors</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="department:">department: anObject"generated by Daskalos"     department := (self checkValue: anObject forVariable: #department)</body></methods><methods><class-id>Doctors</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="doctors">doctors"generated by Daskalos"     ^doctors</body></methods><methods><class-id>Doctors</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="doctors:">doctors: anObject"generated by Daskalos"     doctors := (self checkValue: anObject forVariable: #doctors)</body></methods><methods><class-id>Doctors</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Doctors</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Doctors</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="specialization">specialization"generated by Daskalos"     ^specialization</body></methods><methods><class-id>Doctors</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="specialization:">specialization: anObject"generated by Daskalos"     specialization := (self checkValue: anObject forVariable: #specialization)</body></methods><methods><class-id>Doctors</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     specialization := nil.     department := nil.     doctors := nil.</body></methods><class><name>Cases</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>disease drugs symptoms cases </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Cases class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#disease -&gt; Core.String); add: (#cases -&gt; Core.Object); add: (#symptoms -&gt; Core.String); add: (#drugs -&gt; Core.String); yourself)</body></methods><comment><class-id>Cases</class-id><body> what the disease the patients have drugs , Symptoms .</body></comment><methods><class-id>Cases</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cases">cases"generated by Daskalos"     ^cases</body></methods><methods><class-id>Cases</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cases:">cases: anObject"generated by Daskalos"     cases := (self checkValue: anObject forVariable: #cases)</body></methods><methods><class-id>Cases</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="disease">disease"generated by Daskalos"     ^disease</body></methods><methods><class-id>Cases</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="disease:">disease: anObject"generated by Daskalos"     disease := (self checkValue: anObject forVariable: #disease)</body></methods><methods><class-id>Cases</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="drugs">drugs"generated by Daskalos"     ^drugs</body></methods><methods><class-id>Cases</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="drugs:">drugs: anObject"generated by Daskalos"     drugs := (self checkValue: anObject forVariable: #drugs)</body></methods><methods><class-id>Cases</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="symptoms">symptoms"generated by Daskalos"     ^symptoms</body></methods><methods><class-id>Cases</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="symptoms:">symptoms: anObject"generated by Daskalos"     symptoms := (self checkValue: anObject forVariable: #symptoms)</body></methods><methods><class-id>Cases</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     disease := nil.     drugs := nil.     symptoms := nil.     cases := nil.</body></methods><class><name>Patients</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name disease age patients sex </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Patients class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#disease -&gt; Core.String); add: (#patients -&gt; Core.Object); add: (#age -&gt; Core.Number); add: (#sex -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><comment><class-id>Patients</class-id><body>patients have name and Disease and age</body></comment><methods><class-id>Patients</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age">age"generated by Daskalos"     ^age</body></methods><methods><class-id>Patients</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age:">age: anObject"generated by Daskalos"     age := (self checkValue: anObject forVariable: #age)</body></methods><methods><class-id>Patients</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="disease">disease"generated by Daskalos"     ^disease</body></methods><methods><class-id>Patients</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="disease:">disease: anObject"generated by Daskalos"     disease := (self checkValue: anObject forVariable: #disease)</body></methods><methods><class-id>Patients</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Patients</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Patients</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="patients">patients"generated by Daskalos"     ^patients</body></methods><methods><class-id>Patients</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="patients:">patients: anObject"generated by Daskalos"     patients := (self checkValue: anObject forVariable: #patients)</body></methods><methods><class-id>Patients</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sex">sex"generated by Daskalos"     ^sex</body></methods><methods><class-id>Patients</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sex:">sex: anObject"generated by Daskalos"     sex := (self checkValue: anObject forVariable: #sex)</body></methods><methods><class-id>Patients</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     disease := nil.     age := nil.     patients := nil.     sex := nil.</body></methods><methods><class-id>Patients</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="getAge">getAge	| am1 am2 |	am1 := 'adult'.	am2 := 'kid'.	age &gt; 18 ifTrue: [^am1] ifFalse: [^am2]</body></methods><methods><class-id>Patients</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="getsex">getsex	| am1 am2 |	am1 := 'Dosage of tablets is a bit high'.	am2 := 'Dosage of tablets is less'.	sex = 'male' ifTrue: [^am1] ifFalse: [^am2]</body></methods><class><name>Medicine</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Hospital</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><do-it>Medicine removeFromSystem</do-it><class><name>Hospital</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Hospital class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Hospital</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Hospital</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Hospital</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Hospital</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name address </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Hospital class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#address -&gt; Core.String); yourself)</body></methods><methods><class-id>Hospital</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Hospital</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Hospital</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     address := nil.</body></methods><class><name>Hospital</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name address contact </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Hospital class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#contact -&gt; Core.Number); add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Hospital</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Hospital</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Hospital</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     address := nil.     contact := nil.</body></methods><class><name>Hospital</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name address contact email </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Hospital class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#contact -&gt; Core.Number); add: (#email -&gt; Core.String); add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Hospital</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="email:">email: anObject"generated by Daskalos"     email := (self checkValue: anObject forVariable: #email)</body></methods><methods><class-id>Hospital</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="email">email"generated by Daskalos"     ^email</body></methods><methods><class-id>Hospital</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     address := nil.     contact := nil.     email := nil.</body></methods><do-it>"OBJECT: 1; CLASS: User"h1 := Hospital new.h1 name: 'Motol Hospital'.h1 address: 'Na DlouhÃ©m lÃ¡nu Praha'.h1 contact: 087625772.h1 email: 'motol@czu.cz'."OBJECT: 2; CLASS: User"p1 := Patients new.p1 name: 'Rami'.p1 disease: 'COVID 19'.p1 age: 63.p1 sex: 'male'.p2 := Patients new.p2 name: 'Nancy'.p2 disease: 'Diabetes'.p2 age: 13.p2 sex: 'female'.p3 := Patients new.p3 name: 'Maik'.p3 disease: 'Hypertension'.p3 age: 45.p3 sex: 'male'."OBJECT: 3; CLASS: User"d1 := Doctors new.d1 name: 'lufy'.d1 specialization: 'pulmonologist'.d1 department: 'pulmonology-025'.d2 := Doctors new.d2 name: 'Aneta'.d2 specialization: 'Internal Medicine'.d2 department: 'ICU-303'.d3 := Doctors new.d3 name: 'Ali'.d3 specialization: 'Cardiology'.d3 department: 'cardio-303'."OBJECT: 4; CLASS: User"c1 := Cases new.c1 disease: 'COVID 19'.c1 symptoms: 'breathing difficulty'.c1 drugs: 'pfizer'.c2 := Cases new.c2 disease: 'Diabetes'.c2 symptoms: 'dizziness'.c2 drugs: 'Insulin'.c3 := Cases new.c3 disease: 'Hypertension'.c3 symptoms: 'bradycardia'.c3 drugs: 'Dopamine'.PatientsSet:= Set new.PatientsSet add: p1; add:p2 ; add: p3.DoctorsSet:= Set new.DoctorsSet add: d1; add: d2; add: d3.CasesSet:= Set new.CasesSet add: c1; add:c2; add: c3.p1 patients: d1.d1 doctors: c1.p2 patients: d2.d2 doctors: c2.p3 patients: d3.d3 doctors: c3.</do-it><class><name>Patients</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name disease age sex </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Patients class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#sex -&gt; Core.String); add: (#age -&gt; Core.Number); add: (#disease -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><remove-selector><class-id>Patients</class-id> <selector>patients</selector></remove-selector><remove-selector><class-id>Patients</class-id> <selector>patients:</selector></remove-selector><methods><class-id>Patients</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     disease := nil.     age := nil.     sex := nil.</body></methods><class><name>Patients</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name disease age sex goto </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Patients class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#sex -&gt; Core.String); add: (#age -&gt; Core.Number); add: (#disease -&gt; Core.String); add: (#goto -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Patients</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="goto:">goto: anObject"generated by Daskalos"     goto := (self checkValue: anObject forVariable: #goto)</body></methods><methods><class-id>Patients</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="goto">goto"generated by Daskalos"     ^goto</body></methods><methods><class-id>Patients</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     disease := nil.     age := nil.     sex := nil.     goto := nil.</body></methods><class><name>Doctors</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name specialization department </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Doctors class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#department -&gt; Core.String); add: (#specialization -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><remove-selector><class-id>Doctors</class-id> <selector>doctors</selector></remove-selector><remove-selector><class-id>Doctors</class-id> <selector>doctors:</selector></remove-selector><methods><class-id>Doctors</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     specialization := nil.     department := nil.</body></methods><class><name>Doctors</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name specialization department workin </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Doctors class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#workin -&gt; Core.Object); add: (#department -&gt; Core.String); add: (#specialization -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Doctors</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="workin:">workin: anObject"generated by Daskalos"     workin := (self checkValue: anObject forVariable: #workin)</body></methods><methods><class-id>Doctors</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="workin">workin"generated by Daskalos"     ^workin</body></methods><methods><class-id>Doctors</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     specialization := nil.     department := nil.     workin := nil.</body></methods><class><name>Doctors</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name specialization department workin sudy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Doctors class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#department -&gt; Core.String); add: (#specialization -&gt; Core.String); add: (#sudy -&gt; Core.Object); add: (#workin -&gt; Core.Object); yourself)</body></methods><methods><class-id>Doctors</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sudy:">sudy: anObject"generated by Daskalos"     sudy := (self checkValue: anObject forVariable: #sudy)</body></methods><methods><class-id>Doctors</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sudy">sudy"generated by Daskalos"     ^sudy</body></methods><methods><class-id>Doctors</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     specialization := nil.     department := nil.     workin := nil.     sudy := nil.</body></methods><class><name>Doctors</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name specialization department workin </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Doctors class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#workin -&gt; Core.Object); add: (#department -&gt; Core.String); add: (#specialization -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><remove-selector><class-id>Doctors</class-id> <selector>sudy</selector></remove-selector><remove-selector><class-id>Doctors</class-id> <selector>sudy:</selector></remove-selector><methods><class-id>Doctors</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     specialization := nil.     department := nil.     workin := nil.</body></methods><class><name>Doctors</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name specialization department workin study </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Doctors class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#study -&gt; Core.Object); add: (#department -&gt; Core.String); add: (#specialization -&gt; Core.String); add: (#workin -&gt; Core.Object); yourself)</body></methods><methods><class-id>Doctors</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="study:">study: anObject"generated by Daskalos"     study := (self checkValue: anObject forVariable: #study)</body></methods><methods><class-id>Doctors</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="study">study"generated by Daskalos"     ^study</body></methods><methods><class-id>Doctors</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     specialization := nil.     department := nil.     workin := nil.     study := nil.</body></methods><do-it>"OBJECT: 1; CLASS: User"h1 := Hospital new.h1 name: 'Motol Hospital'.h1 address: 'Na DlouhÃ©m lÃ¡nu Praha'.h1 contact: 087625772.h1 email: 'motol@czu.cz'."OBJECT: 2; CLASS: User"p1 := Patients new.p1 name: 'Rami'.p1 disease: 'COVID 19'.p1 age: 63.p1 sex: 'male'.p2 := Patients new.p2 name: 'Nancy'.p2 disease: 'Diabetes'.p2 age: 13.p2 sex: 'female'.p3 := Patients new.p3 name: 'Maik'.p3 disease: 'Hypertension'.p3 age: 45.p3 sex: 'male'."OBJECT: 3; CLASS: User"d1 := Doctors new.d1 name: 'lufy'.d1 specialization: 'pulmonologist'.d1 department: 'pulmonology-025'.d2 := Doctors new.d2 name: 'Aneta'.d2 specialization: 'Internal Medicine'.d2 department: 'ICU-303'.d3 := Doctors new.d3 name: 'Ali'.d3 specialization: 'Cardiology'.d3 department: 'cardio-303'."OBJECT: 4; CLASS: User"c1 := Cases new.c1 disease: 'COVID 19'.c1 symptoms: 'breathing difficulty'.c1 drugs: 'pfizer'.c2 := Cases new.c2 disease: 'Diabetes'.c2 symptoms: 'dizziness'.c2 drugs: 'Insulin'.c3 := Cases new.c3 disease: 'Hypertension'.c3 symptoms: 'bradycardia'.c3 drugs: 'Dopamine'.PatientsSet:= Set new.PatientsSet add: p1; add:p2 ; add: p3.DoctorsSet:= Set new.DoctorsSet add: d1; add: d2; add: d3.CasesSet:= Set new.CasesSet add: c1; add:c2; add: c3.p1 goto: d1.d1 study: c1.d1 workin: h1.p2 goto: d2.d2 study: c2.d2 workin: h1.p3 goto: d3.d3 study: c3.d3 workin: h1.</do-it><do-it>"OBJECT: 1; CLASS: User"h1 := Hospital new.h1 name: 'Motol Hospital'.h1 address: 'Na DlouhÃ©m lÃ¡nu Praha'.h1 contact: 087625772.h1 email: 'motol@czu.cz'."OBJECT: 2; CLASS: User"p1 := Patients new.p1 name: 'Rami'.p1 disease: 'COVID 19'.p1 age: 63.p1 sex: 'male'.p2 := Patients new.p2 name: 'Nancy'.p2 disease: 'Diabetes'.p2 age: 13.p2 sex: 'female'.p3 := Patients new.p3 name: 'Maik'.p3 disease: 'Hypertension'.p3 age: 45.p3 sex: 'male'."OBJECT: 3; CLASS: User"d1 := Doctors new.d1 name: 'lufy'.d1 specialization: 'pulmonologist'.d1 department: 'pulmonology-025'.d2 := Doctors new.d2 name: 'Aneta'.d2 specialization: 'Internal Medicine'.d2 department: 'ICU-303'.d3 := Doctors new.d3 name: 'Ali'.d3 specialization: 'Cardiology'.d3 department: 'cardio-303'."OBJECT: 4; CLASS: User"c1 := Cases new.c1 disease: 'COVID 19'.c1 symptoms: 'breathing difficulty'.c1 drugs: 'pfizer'.c2 := Cases new.c2 disease: 'Diabetes'.c2 symptoms: 'dizziness'.c2 drugs: 'Insulin'.c3 := Cases new.c3 disease: 'Hypertension'.c3 symptoms: 'bradycardia'.c3 drugs: 'Dopamine'.PatientsSet:= Set new.PatientsSet add: p1; add:p2 ; add: p3.DoctorsSet:= Set new.DoctorsSet add: d1; add: d2; add: d3.CasesSet:= Set new.CasesSet add: c1; add:c2; add: c3.p1 goto: d1.d1 study: c1.d1 workin: h1.p2 goto: d2.d2 study: c2.d2 workin: h1.p3 goto: d3.d3 study: c3.d3 workin: h1.</do-it><class><name>Cases</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>disease drugs symptoms cases treatmentFor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Cases class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#drugs -&gt; Core.String); add: (#treatmentFor -&gt; Core.Object); add: (#disease -&gt; Core.String); add: (#cases -&gt; Core.Object); add: (#symptoms -&gt; Core.String); yourself)</body></methods><methods><class-id>Cases</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="treatmentFor:">treatmentFor: anObject"generated by Daskalos"     treatmentFor := (self checkValue: anObject forVariable: #treatmentFor)</body></methods><methods><class-id>Cases</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="treatmentFor">treatmentFor"generated by Daskalos"     ^treatmentFor</body></methods><methods><class-id>Cases</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     disease := nil.     drugs := nil.     symptoms := nil.     cases := nil.     treatmentFor := nil.</body></methods><do-it>"OBJECT: 1; CLASS: User"h1 := Hospital new.h1 name: 'Motol Hospital'.h1 address: 'Na DlouhÃ©m lÃ¡nu Praha'.h1 contact: 087625772.h1 email: 'motol@czu.cz'."OBJECT: 2; CLASS: User"p1 := Patients new.p1 name: 'Rami'.p1 disease: 'COVID 19'.p1 age: 63.p1 sex: 'male'.p2 := Patients new.p2 name: 'Nancy'.p2 disease: 'Diabetes'.p2 age: 13.p2 sex: 'female'.p3 := Patients new.p3 name: 'Maik'.p3 disease: 'Hypertension'.p3 age: 45.p3 sex: 'male'."OBJECT: 3; CLASS: User"d1 := Doctors new.d1 name: 'lufy'.d1 specialization: 'pulmonologist'.d1 department: 'pulmonology-025'.d2 := Doctors new.d2 name: 'Aneta'.d2 specialization: 'Internal Medicine'.d2 department: 'ICU-303'.d3 := Doctors new.d3 name: 'Ali'.d3 specialization: 'Cardiology'.d3 department: 'cardio-303'."OBJECT: 4; CLASS: User"c1 := Cases new.c1 disease: 'COVID 19'.c1 symptoms: 'breathing difficulty'.c1 drugs: 'pfizer'.c2 := Cases new.c2 disease: 'Diabetes'.c2 symptoms: 'dizziness'.c2 drugs: 'Insulin'.c3 := Cases new.c3 disease: 'Hypertension'.c3 symptoms: 'bradycardia'.c3 drugs: 'Dopamine'.PatientsSet:= Set new.PatientsSet add: p1; add:p2 ; add: p3.DoctorsSet:= Set new.DoctorsSet add: d1; add: d2; add: d3.CasesSet:= Set new.CasesSet add: c1; add:c2; add: c3.p1 goto: d1.d1 study: c1.d1 workin: h1.c1 treatmentFor: p1.p2 goto: d2.d2 study: c2.d2 workin: h1.c2 treatmentFor: p2.p3 goto: d3.d3 study: c3.d3 workin: h1.c3 treatmentFor: p3.</do-it><comment><class-id>Cases</class-id><body>It defines what disease the patients might have </body></comment><comment><class-id>Hospital</class-id><body>Every Hospital has Name and Address, Contact and Email. </body></comment><comment><class-id>Patients</class-id><body>Patients have Name and Disease and age</body></comment><class><name>Hospital</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name address contact email </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Hospital class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#contact -&gt; Core.Number); add: (#email -&gt; Core.String); add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><comment><class-id>Hospital</class-id><body>Every Hospital has Name and Address, Contact and Email. </body></comment><methods><class-id>Hospital</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Hospital</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Hospital</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Hospital</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Hospital</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="email">email"generated by Daskalos"     ^email</body></methods><methods><class-id>Hospital</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="email:">email: anObject"generated by Daskalos"     email := (self checkValue: anObject forVariable: #email)</body></methods><methods><class-id>Hospital</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Hospital</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Hospital</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     address := nil.     contact := nil.     email := nil.</body></methods><class><name>Patients</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name disease age sex goto </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Patients class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#sex -&gt; Core.String); add: (#age -&gt; Core.Number); add: (#disease -&gt; Core.String); add: (#goto -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><comment><class-id>Patients</class-id><body>Patients have Name and Disease and age</body></comment><methods><class-id>Patients</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age">age"generated by Daskalos"     ^age</body></methods><methods><class-id>Patients</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age:">age: anObject"generated by Daskalos"     age := (self checkValue: anObject forVariable: #age)</body></methods><methods><class-id>Patients</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="disease">disease"generated by Daskalos"     ^disease</body></methods><methods><class-id>Patients</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="disease:">disease: anObject"generated by Daskalos"     disease := (self checkValue: anObject forVariable: #disease)</body></methods><methods><class-id>Patients</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="goto">goto"generated by Daskalos"     ^goto</body></methods><methods><class-id>Patients</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="goto:">goto: anObject"generated by Daskalos"     goto := (self checkValue: anObject forVariable: #goto)</body></methods><methods><class-id>Patients</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Patients</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Patients</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sex">sex"generated by Daskalos"     ^sex</body></methods><methods><class-id>Patients</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sex:">sex: anObject"generated by Daskalos"     sex := (self checkValue: anObject forVariable: #sex)</body></methods><methods><class-id>Patients</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     disease := nil.     age := nil.     sex := nil.     goto := nil.</body></methods><methods><class-id>Patients</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="getAge">getAge	| am1 am2 |	am1 := 'adult'.	am2 := 'kid'.	age &gt; 18 ifTrue: [^am1] ifFalse: [^am2]</body></methods><methods><class-id>Patients</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="getsex">getsex	| am1 am2 |	am1 := 'Dosage of tablets is a bit high'.	am2 := 'Dosage of tablets is less'.	sex = 'male' ifTrue: [^am1] ifFalse: [^am2]</body></methods><class><name>Doctors</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name specialization department workin study </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Doctors class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#study -&gt; Core.Object); add: (#department -&gt; Core.String); add: (#specialization -&gt; Core.String); add: (#workin -&gt; Core.Object); yourself)</body></methods><comment><class-id>Doctors</class-id><body>Doctors have name and Specialization and Department .</body></comment><methods><class-id>Doctors</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="department">department"generated by Daskalos"     ^department</body></methods><methods><class-id>Doctors</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="department:">department: anObject"generated by Daskalos"     department := (self checkValue: anObject forVariable: #department)</body></methods><methods><class-id>Doctors</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Doctors</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Doctors</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="specialization">specialization"generated by Daskalos"     ^specialization</body></methods><methods><class-id>Doctors</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="specialization:">specialization: anObject"generated by Daskalos"     specialization := (self checkValue: anObject forVariable: #specialization)</body></methods><methods><class-id>Doctors</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="study">study"generated by Daskalos"     ^study</body></methods><methods><class-id>Doctors</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="study:">study: anObject"generated by Daskalos"     study := (self checkValue: anObject forVariable: #study)</body></methods><methods><class-id>Doctors</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="workin">workin"generated by Daskalos"     ^workin</body></methods><methods><class-id>Doctors</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="workin:">workin: anObject"generated by Daskalos"     workin := (self checkValue: anObject forVariable: #workin)</body></methods><methods><class-id>Doctors</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     specialization := nil.     department := nil.     workin := nil.     study := nil.</body></methods><class><name>Cases</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>disease drugs symptoms cases treatmentFor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Cases class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#drugs -&gt; Core.String); add: (#treatmentFor -&gt; Core.Object); add: (#disease -&gt; Core.String); add: (#cases -&gt; Core.Object); add: (#symptoms -&gt; Core.String); yourself)</body></methods><comment><class-id>Cases</class-id><body>It defines what disease the patients might have </body></comment><methods><class-id>Cases</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cases">cases"generated by Daskalos"     ^cases</body></methods><methods><class-id>Cases</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cases:">cases: anObject"generated by Daskalos"     cases := (self checkValue: anObject forVariable: #cases)</body></methods><methods><class-id>Cases</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="disease">disease"generated by Daskalos"     ^disease</body></methods><methods><class-id>Cases</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="disease:">disease: anObject"generated by Daskalos"     disease := (self checkValue: anObject forVariable: #disease)</body></methods><methods><class-id>Cases</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="drugs">drugs"generated by Daskalos"     ^drugs</body></methods><methods><class-id>Cases</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="drugs:">drugs: anObject"generated by Daskalos"     drugs := (self checkValue: anObject forVariable: #drugs)</body></methods><methods><class-id>Cases</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="symptoms">symptoms"generated by Daskalos"     ^symptoms</body></methods><methods><class-id>Cases</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="symptoms:">symptoms: anObject"generated by Daskalos"     symptoms := (self checkValue: anObject forVariable: #symptoms)</body></methods><methods><class-id>Cases</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="treatmentFor">treatmentFor"generated by Daskalos"     ^treatmentFor</body></methods><methods><class-id>Cases</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="treatmentFor:">treatmentFor: anObject"generated by Daskalos"     treatmentFor := (self checkValue: anObject forVariable: #treatmentFor)</body></methods><methods><class-id>Cases</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     disease := nil.     drugs := nil.     symptoms := nil.     cases := nil.     treatmentFor := nil.</body></methods><class><name>SportAcademy</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>academyName contact address </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>SportAcademy class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#contact -&gt; Core.Number); add: (#academyName -&gt; Core.String); add: (#address -&gt; Core.String); yourself)</body></methods><methods><class-id>SportAcademy</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="academyName">academyName"generated by Daskalos"     ^academyName</body></methods><methods><class-id>SportAcademy</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="academyName:">academyName: anObject"generated by Daskalos"     academyName := (self checkValue: anObject forVariable: #academyName)</body></methods><methods><class-id>SportAcademy</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>SportAcademy</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>SportAcademy</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>SportAcademy</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>SportAcademy</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     academyName := nil.     contact := nil.     address := nil.</body></methods><class><name>Sport</name><environment>Smalltalk</environment><super>SportAcademy</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name numOfClass fees </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Sport class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#contact -&gt; Core.Number); add: (#numOfClass -&gt; Core.Number); add: (#academyName -&gt; Core.String); add: (#fees -&gt; Core.Number); add: (#address -&gt; Core.String); yourself)</body></methods><methods><class-id>Sport</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="fees">fees"generated by Daskalos"     ^fees</body></methods><methods><class-id>Sport</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="fees:">fees: anObject"generated by Daskalos"     fees := (self checkValue: anObject forVariable: #fees)</body></methods><methods><class-id>Sport</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Sport</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Sport</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="numOfClass">numOfClass"generated by Daskalos"     ^numOfClass</body></methods><methods><class-id>Sport</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="numOfClass:">numOfClass: anObject"generated by Daskalos"     numOfClass := (self checkValue: anObject forVariable: #numOfClass)</body></methods><methods><class-id>Sport</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     numOfClass := nil.     fees := nil.</body></methods><methods><class-id>Sport</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="getfees">getfees	| pm1 pm2 |	pm1 := 'Expensive'.	pm2 := 'Cheap'.	fees &gt; 1300 ifTrue: [^pm1] ifFalse: [^pm2]</body></methods><class><name>Trainee</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName bankAccount contact takeClass </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Trainee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#contact -&gt; Core.Number); add: (#lastName -&gt; Core.String); add: (#bankAccount -&gt; Core.String); add: (#takeClass -&gt; Core.Object); add: (#firstName -&gt; Core.String); yourself)</body></methods><methods><class-id>Trainee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="bankAccount">bankAccount"generated by Daskalos"     ^bankAccount</body></methods><methods><class-id>Trainee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="bankAccount:">bankAccount: anObject"generated by Daskalos"     bankAccount := (self checkValue: anObject forVariable: #bankAccount)</body></methods><methods><class-id>Trainee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Trainee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Trainee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Trainee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Trainee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Trainee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Trainee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="takeClass">takeClass"generated by Daskalos"     ^takeClass</body></methods><methods><class-id>Trainee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="takeClass:">takeClass: anObject"generated by Daskalos"     takeClass := (self checkValue: anObject forVariable: #takeClass)</body></methods><methods><class-id>Trainee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     bankAccount := nil.     contact := nil.     takeClass := nil.</body></methods><class><name>Trainer</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName id salary workIn coach </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Trainer class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#id -&gt; Core.Number); add: (#salary -&gt; Core.Number); add: (#lastName -&gt; Core.String); add: (#workIn -&gt; Core.Object); add: (#firstName -&gt; Core.String); add: (#coach -&gt; Core.Object); yourself)</body></methods><methods><class-id>Trainer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="coach">coach"generated by Daskalos"     ^coach</body></methods><methods><class-id>Trainer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="coach:">coach: anObject"generated by Daskalos"     coach := (self checkValue: anObject forVariable: #coach)</body></methods><methods><class-id>Trainer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Trainer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Trainer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Trainer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Trainer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Trainer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Trainer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary">salary"generated by Daskalos"     ^salary</body></methods><methods><class-id>Trainer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary:">salary: anObject"generated by Daskalos"     salary := (self checkValue: anObject forVariable: #salary)</body></methods><methods><class-id>Trainer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="workIn">workIn"generated by Daskalos"     ^workIn</body></methods><methods><class-id>Trainer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="workIn:">workIn: anObject"generated by Daskalos"     workIn := (self checkValue: anObject forVariable: #workIn)</body></methods><methods><class-id>Trainer</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     id := nil.     salary := nil.     workIn := nil.     coach := nil.</body></methods><methods><class-id>Trainer</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="salaryRange">salaryRange	| sm1 sm2 |	sm1 := 'Good'.	sm2 := 'Average'.	salary &gt; 20000 ifTrue: [^sm1] ifFalse: [^sm2]</body></methods><do-it>Sport removeFromSystem</do-it><do-it>SportAcademy removeFromSystem</do-it><do-it>Trainee removeFromSystem</do-it><do-it>Trainer removeFromSystem</do-it><class><name>PhoneStore</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name contact address </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>PhoneStore class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#contact -&gt; Core.Number); add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>PhoneStore</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>PhoneStore</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>PhoneStore</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>PhoneStore</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>PhoneStore</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>PhoneStore</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>PhoneStore</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     contact := nil.     address := nil.</body></methods><class><name>ModelPhone</name><environment>Smalltalk</environment><super>PhoneStore</super><private>false</private><indexed-type>none</indexed-type><inst-vars>brandName brandCamera brandBattery soledBy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>ModelPhone class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#address -&gt; Core.String); add: (#contact -&gt; Core.Number); add: (#brandBattery -&gt; Core.String); add: (#brandCamera -&gt; Core.String); add: (#soledBy -&gt; Core.Object); add: (#brandName -&gt; Core.String); yourself)</body></methods><methods><class-id>ModelPhone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="brandBattery">brandBattery"generated by Daskalos"     ^brandBattery</body></methods><methods><class-id>ModelPhone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="brandBattery:">brandBattery: anObject"generated by Daskalos"     brandBattery := (self checkValue: anObject forVariable: #brandBattery)</body></methods><methods><class-id>ModelPhone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="brandCamera">brandCamera"generated by Daskalos"     ^brandCamera</body></methods><methods><class-id>ModelPhone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="brandCamera:">brandCamera: anObject"generated by Daskalos"     brandCamera := (self checkValue: anObject forVariable: #brandCamera)</body></methods><methods><class-id>ModelPhone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="brandName">brandName"generated by Daskalos"     ^brandName</body></methods><methods><class-id>ModelPhone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="brandName:">brandName: anObject"generated by Daskalos"     brandName := (self checkValue: anObject forVariable: #brandName)</body></methods><methods><class-id>ModelPhone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="soledBy">soledBy"generated by Daskalos"     ^soledBy</body></methods><methods><class-id>ModelPhone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="soledBy:">soledBy: anObject"generated by Daskalos"     soledBy := (self checkValue: anObject forVariable: #soledBy)</body></methods><methods><class-id>ModelPhone</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     brandName := nil.     brandCamera := nil.     brandBattery := nil.     soledBy := nil.</body></methods><class><name>Customer</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName surName age bought </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Customer class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstName -&gt; Core.String); add: (#age -&gt; Core.Number); add: (#surName -&gt; Core.String); add: (#bought -&gt; Core.Object); yourself)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age">age"generated by Daskalos"     ^age</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age:">age: anObject"generated by Daskalos"     age := (self checkValue: anObject forVariable: #age)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="bought">bought"generated by Daskalos"     ^bought</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="bought:">bought: anObject"generated by Daskalos"     bought := (self checkValue: anObject forVariable: #bought)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surName">surName"generated by Daskalos"     ^surName</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surName:">surName: anObject"generated by Daskalos"     surName := (self checkValue: anObject forVariable: #surName)</body></methods><methods><class-id>Customer</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     surName := nil.     age := nil.     bought := nil.</body></methods><methods><class-id>Customer</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="getage">getage	| am1 am2 |	am1 := 'Old'.	am2 := 'Young'.	age &gt; 40 ifTrue: [^am1] ifFalse: [^am2]</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName surName id salary soledTo </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstName -&gt; Core.String); add: (#id -&gt; Core.Number); add: (#surName -&gt; Core.String); add: (#salary -&gt; Core.Number); add: (#soledTo -&gt; Core.Object); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary">salary"generated by Daskalos"     ^salary</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary:">salary: anObject"generated by Daskalos"     salary := (self checkValue: anObject forVariable: #salary)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="soledTo">soledTo"generated by Daskalos"     ^soledTo</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="soledTo:">soledTo: anObject"generated by Daskalos"     soledTo := (self checkValue: anObject forVariable: #soledTo)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surName">surName"generated by Daskalos"     ^surName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surName:">surName: anObject"generated by Daskalos"     surName := (self checkValue: anObject forVariable: #surName)</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     surName := nil.     id := nil.     salary := nil.     soledTo := nil.</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="salaryRange">salaryRange	| sm1 sm2 |	sm1 := 'Good'.	sm2 := 'Average'.	salary &gt; 20000 ifTrue: [^sm1] ifFalse: [^sm2]</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="soledProducts">soledProducts	^ModelPhone allInstances select: [:x | x soledBy = self]</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName surName id salary soledTo soldTi </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstName -&gt; Core.String); add: (#soledTo -&gt; Core.Object); add: (#id -&gt; Core.Number); add: (#surName -&gt; Core.String); add: (#salary -&gt; Core.Number); add: (#soldTi -&gt; Core.Object); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="soldTi:">soldTi: anObject"generated by Daskalos"     soldTi := (self checkValue: anObject forVariable: #soldTi)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="soldTi">soldTi"generated by Daskalos"     ^soldTi</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     surName := nil.     id := nil.     salary := nil.     soledTo := nil.     soldTi := nil.</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName surName id salary soledTo </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#soledTo -&gt; Core.Object); add: (#firstName -&gt; Core.String); add: (#id -&gt; Core.Number); add: (#surName -&gt; Core.String); add: (#salary -&gt; Core.Number); yourself)</body></methods><remove-selector><class-id>Employee</class-id> <selector>soldTi</selector></remove-selector><remove-selector><class-id>Employee</class-id> <selector>soldTi:</selector></remove-selector><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     surName := nil.     id := nil.     salary := nil.     soledTo := nil.</body></methods><class><name>Airline</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name contact headquarters </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Airline class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#contact -&gt; Core.Number); add: (#headquarters -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><comment><class-id>Airline</class-id><body>This Airline Class has instances such as name,address and headquarters</body></comment><methods><class-id>Airline</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Airline</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Airline</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="headquarters">headquarters"generated by Daskalos"     ^headquarters</body></methods><methods><class-id>Airline</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="headquarters:">headquarters: anObject"generated by Daskalos"     headquarters := (self checkValue: anObject forVariable: #headquarters)</body></methods><methods><class-id>Airline</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Airline</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Airline</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     contact := nil.     headquarters := nil.</body></methods><class><name>Ticket</name><environment>Smalltalk</environment><super>Airline</super><private>false</private><indexed-type>none</indexed-type><inst-vars>arrival dateOfTravel departure ticketId </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Ticket class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#dateOfTravel -&gt; Core.Date); add: (#departure -&gt; Core.String); add: (#headquarters -&gt; Core.String); add: (#contact -&gt; Core.Number); add: (#arrival -&gt; Core.String); add: (#ticketId -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><comment><class-id>Ticket</class-id><body>This Ticket class has instances such as arrival, depature, date of travel and the ticket id.</body></comment><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="arrival">arrival"generated by Daskalos"     ^arrival</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="arrival:">arrival: anObject"generated by Daskalos"     arrival := (self checkValue: anObject forVariable: #arrival)</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dateOfTravel">dateOfTravel"generated by Daskalos"     ^dateOfTravel</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dateOfTravel:">dateOfTravel: anObject"generated by Daskalos"     dateOfTravel := (self checkValue: anObject forVariable: #dateOfTravel)</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="departure">departure"generated by Daskalos"     ^departure</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="departure:">departure: anObject"generated by Daskalos"     departure := (self checkValue: anObject forVariable: #departure)</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="ticketId">ticketId"generated by Daskalos"     ^ticketId</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="ticketId:">ticketId: anObject"generated by Daskalos"     ticketId := (self checkValue: anObject forVariable: #ticketId)</body></methods><methods><class-id>Ticket</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     arrival := nil.     dateOfTravel := nil.     departure := nil.     ticketId := nil.</body></methods><class><name>Passenger</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName idType purposeOfTravel buy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Passenger class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#purposeOfTravel -&gt; Core.String); add: (#buy -&gt; Core.Object); add: (#idType -&gt; Core.String); add: (#firstName -&gt; Core.String); add: (#lastName -&gt; Core.String); yourself)</body></methods><comment><class-id>Passenger</class-id><body>This Passenger Class has instances such first name,last name, id type and purpose of travel</body></comment><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="buy">buy"generated by Daskalos"     ^buy</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="buy:">buy: anObject"generated by Daskalos"     buy := (self checkValue: anObject forVariable: #buy)</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="idType">idType"generated by Daskalos"     ^idType</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="idType:">idType: anObject"generated by Daskalos"     idType := (self checkValue: anObject forVariable: #idType)</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purposeOfTravel">purposeOfTravel"generated by Daskalos"     ^purposeOfTravel</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purposeOfTravel:">purposeOfTravel: anObject"generated by Daskalos"     purposeOfTravel := (self checkValue: anObject forVariable: #purposeOfTravel)</body></methods><methods><class-id>Passenger</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     idType := nil.     purposeOfTravel := nil.     buy := nil.</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName id jobPosition salary workIn worksFor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#lastName -&gt; Core.String); add: (#worksFor -&gt; Core.Object); add: (#id -&gt; Core.Number); add: (#workIn -&gt; Core.Object); add: (#firstName -&gt; Core.String); add: (#salary -&gt; Core.Number); add: (#jobPosition -&gt; Core.String); yourself)</body></methods><comment><class-id>Employee</class-id><body>This Employee Class has instances such as first name,last name, id, job position  and salary</body></comment><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jobPosition">jobPosition"generated by Daskalos"     ^jobPosition</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jobPosition:">jobPosition: anObject"generated by Daskalos"     jobPosition := (self checkValue: anObject forVariable: #jobPosition)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary">salary"generated by Daskalos"     ^salary</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary:">salary: anObject"generated by Daskalos"     salary := (self checkValue: anObject forVariable: #salary)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="workIn">workIn"generated by Daskalos"     ^workIn</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="workIn:">workIn: anObject"generated by Daskalos"     workIn := (self checkValue: anObject forVariable: #workIn)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="worksFor">worksFor"generated by Daskalos"     ^worksFor</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="worksFor:">worksFor: anObject"generated by Daskalos"     worksFor := (self checkValue: anObject forVariable: #worksFor)</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     id := nil.     jobPosition := nil.     salary := nil.     workIn := nil.     worksFor := nil.</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="salaryRange">salaryRange	| sm1 sm2 |	sm1 := 'Good'.	sm2 := 'Average'.	salary &gt; 50000 ifTrue: [^sm1] ifFalse: [^sm2]</body></methods><class><name>Visitor</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName modeOfPayment visits </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Visitor class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstName -&gt; Core.String); add: (#visits -&gt; Core.Object); add: (#lastName -&gt; Core.String); add: (#modeOfPayment -&gt; Core.String); yourself)</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="modeOfPayment">modeOfPayment"generated by Daskalos"     ^modeOfPayment</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="modeOfPayment:">modeOfPayment: anObject"generated by Daskalos"     modeOfPayment := (self checkValue: anObject forVariable: #modeOfPayment)</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="visits">visits"generated by Daskalos"     ^visits</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="visits:">visits: anObject"generated by Daskalos"     visits := (self checkValue: anObject forVariable: #visits)</body></methods><methods><class-id>Visitor</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     modeOfPayment := nil.     visits := nil.</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName id salary workIn showsAround </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#lastName -&gt; Core.String); add: (#showsAround -&gt; Core.Object); add: (#workIn -&gt; Core.Object); add: (#id -&gt; Core.Number); add: (#salary -&gt; Core.Number); add: (#firstName -&gt; Core.String); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary">salary"generated by Daskalos"     ^salary</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary:">salary: anObject"generated by Daskalos"     salary := (self checkValue: anObject forVariable: #salary)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="showsAround">showsAround"generated by Daskalos"     ^showsAround</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="showsAround:">showsAround: anObject"generated by Daskalos"     showsAround := (self checkValue: anObject forVariable: #showsAround)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="workIn">workIn"generated by Daskalos"     ^workIn</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="workIn:">workIn: anObject"generated by Daskalos"     workIn := (self checkValue: anObject forVariable: #workIn)</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     id := nil.     salary := nil.     workIn := nil.     showsAround := nil.</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="salaryRange">salaryRange	| sm1 sm2 |	sm1 := 'Good'.	sm2 := 'Average'.	salary &gt; 20000 ifTrue: [^sm1] ifFalse: [^sm2]</body></methods><class><name>Zoo</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>contact entranceFee address zooName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zoo class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#contact -&gt; Core.Number); add: (#zooName -&gt; Core.String); add: (#address -&gt; Core.String); add: (#entranceFee -&gt; Core.Number); yourself)</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="entranceFee">entranceFee"generated by Daskalos"     ^entranceFee</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="entranceFee:">entranceFee: anObject"generated by Daskalos"     entranceFee := (self checkValue: anObject forVariable: #entranceFee)</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zooName">zooName"generated by Daskalos"     ^zooName</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zooName:">zooName: anObject"generated by Daskalos"     zooName := (self checkValue: anObject forVariable: #zooName)</body></methods><methods><class-id>Zoo</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     contact := nil.     entranceFee := nil.     address := nil.     zooName := nil.</body></methods><class><name>Animal</name><environment>Smalltalk</environment><super>Zoo</super><private>false</private><indexed-type>none</indexed-type><inst-vars>age name animalType </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Animal class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); add: (#age -&gt; Core.Number); add: (#contact -&gt; Core.Number); add: (#animalType -&gt; Core.String); add: (#entranceFee -&gt; Core.Number); add: (#zooName -&gt; Core.String); yourself)</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age">age"generated by Daskalos"     ^age</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age:">age: anObject"generated by Daskalos"     age := (self checkValue: anObject forVariable: #age)</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="animalType">animalType"generated by Daskalos"     ^animalType</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="animalType:">animalType: anObject"generated by Daskalos"     animalType := (self checkValue: anObject forVariable: #animalType)</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Animal</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     age := nil.     name := nil.     animalType := nil.</body></methods><methods><class-id>Animal</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="ageRange">ageRange	| pm1 pm2 |	pm1 := 'Old'.	pm2 := 'Young'.	age &gt; 30 ifTrue: [^pm1] ifFalse: [^pm2]</body></methods><class><name>Application</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type price dateOfCreation </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Application class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#dateOfCreation -&gt; Core.Date); add: (#price -&gt; Core.Number); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Application</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dateOfCreation">dateOfCreation"generated by Daskalos"     ^dateOfCreation</body></methods><methods><class-id>Application</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dateOfCreation:">dateOfCreation: anObject"generated by Daskalos"     dateOfCreation := (self checkValue: anObject forVariable: #dateOfCreation)</body></methods><methods><class-id>Application</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Application</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Application</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price">price"generated by Daskalos"     ^price</body></methods><methods><class-id>Application</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price:">price: anObject"generated by Daskalos"     price := (self checkValue: anObject forVariable: #price)</body></methods><methods><class-id>Application</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Application</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Application</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     price := nil.     dateOfCreation := nil.</body></methods><methods><class-id>Application</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isExpensive">isExpensive	price &gt;= 2 ifTrue: [^'Expensive'] ifFalse: [^'Not expensive']</body></methods><methods><class-id>Application</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isFree">isFree	price = 0 ifTrue: [^'Free'] ifFalse: [^'Not free']</body></methods><methods><class-id>Application</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isInstalled">isInstalled	"on any device"	^Smartphone allInstances contains: [:s | s applications includes: self]</body></methods><methods><class-id>Application</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="timeAvailable">timeAvailable	"how long it was available to buy this app"	dateOfCreation isNil 		ifTrue: [^nil]		ifFalse: [^(Date today subtractDate: dateOfCreation) truncated]</body></methods><class><name>OperatingSystem</name><environment>Smalltalk</environment><super>Application</super><private>false</private><indexed-type>none</indexed-type><inst-vars>version title </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>OperatingSystem class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#version -&gt; Core.Number); add: (#title -&gt; Core.String); add: (#type -&gt; Core.String); add: (#dateOfCreation -&gt; Core.Date); add: (#price -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>OperatingSystem</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="title">title"generated by Daskalos"     ^title</body></methods><methods><class-id>OperatingSystem</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="title:">title: anObject"generated by Daskalos"     title := (self checkValue: anObject forVariable: #title)</body></methods><methods><class-id>OperatingSystem</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="version">version"generated by Daskalos"     ^version</body></methods><methods><class-id>OperatingSystem</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="version:">version: anObject"generated by Daskalos"     version := (self checkValue: anObject forVariable: #version)</body></methods><methods><class-id>OperatingSystem</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     version := nil.     title := nil.</body></methods><methods><class-id>OperatingSystem</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="IsInstalled">IsInstalled	^Smartphone allInstances contains: [:s | s applications includes: self]</body></methods><class><name>Company</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name country </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Company class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#country -&gt; Core.String); yourself)</body></methods><methods><class-id>Company</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="country">country"generated by Daskalos"     ^country</body></methods><methods><class-id>Company</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="country:">country: anObject"generated by Daskalos"     country := (self checkValue: anObject forVariable: #country)</body></methods><methods><class-id>Company</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Company</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Company</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     country := nil.</body></methods><class><name>Smartphone</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name price dateOfManufacture producer oS applications </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Smartphone class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#dateOfManufacture -&gt; Core.Date); add: (#oS -&gt; Core.Object); add: (#producer -&gt; Core.Object); add: (#applications -&gt; Core.Set); add: (#price -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Smartphone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="applications">applications"generated by Daskalos"     ^applications</body></methods><methods><class-id>Smartphone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dateOfManufacture">dateOfManufacture"generated by Daskalos"     ^dateOfManufacture</body></methods><methods><class-id>Smartphone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dateOfManufacture:">dateOfManufacture: anObject"generated by Daskalos"     dateOfManufacture := (self checkValue: anObject forVariable: #dateOfManufacture)</body></methods><methods><class-id>Smartphone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Smartphone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Smartphone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="oS">oS"generated by Daskalos"     ^oS</body></methods><methods><class-id>Smartphone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="oS:">oS: anObject"generated by Daskalos"     oS := (self checkValue: anObject forVariable: #oS)</body></methods><methods><class-id>Smartphone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price">price"generated by Daskalos"     ^price</body></methods><methods><class-id>Smartphone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price:">price: anObject"generated by Daskalos"     price := (self checkValue: anObject forVariable: #price)</body></methods><methods><class-id>Smartphone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="producer">producer"generated by Daskalos"     ^producer</body></methods><methods><class-id>Smartphone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="producer:">producer: anObject"generated by Daskalos"     producer := (self checkValue: anObject forVariable: #producer)</body></methods><methods><class-id>Smartphone</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     price := nil.     dateOfManufacture := nil.     producer := nil.     oS := nil.     applications := Set new.</body></methods><methods><class-id>Smartphone</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isExpensive">isExpensive	price &gt;= 800 ifTrue: [^'Expensive'] ifFalse: [^'Not expensive']</body></methods><methods><class-id>Smartphone</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isNewModel">isNewModel	(Date today subtractDate: dateOfManufacture) / 365.2422 &lt; 1 		ifTrue: [^'New model']		ifFalse: [^'Old model']</body></methods><class><name>Passenger</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name dateofbirth passportnumber flight </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Passenger class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#passportnumber -&gt; Core.Number); add: (#dateofbirth -&gt; Core.Date); add: (#flight -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dateofbirth">dateofbirth"generated by Daskalos"     ^dateofbirth</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dateofbirth:">dateofbirth: anObject"generated by Daskalos"     dateofbirth := (self checkValue: anObject forVariable: #dateofbirth)</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="flight">flight"generated by Daskalos"     ^flight</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="flight:">flight: anObject"generated by Daskalos"     flight := (self checkValue: anObject forVariable: #flight)</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="passportnumber">passportnumber"generated by Daskalos"     ^passportnumber</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="passportnumber:">passportnumber: anObject"generated by Daskalos"     passportnumber := (self checkValue: anObject forVariable: #passportnumber)</body></methods><methods><class-id>Passenger</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     dateofbirth := nil.     passportnumber := nil.     flight := nil.</body></methods><methods><class-id>Passenger</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="age">age	^(Date today subtractDate: dateofbirth) / 365.2422 asFixedPoint: 0</body></methods><methods><class-id>Passenger</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="category">category	self age &lt; 18 		ifTrue: [^'child']		ifFalse: [self age &lt; 65 ifTrue: [^'adult'] ifFalse: [^'elderly']]</body></methods><class><name>Reservation</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>tickets reservationstatus formofpayment passenger </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Reservation class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#formofpayment -&gt; Core.String); add: (#tickets -&gt; Core.String); add: (#reservationstatus -&gt; Core.String); add: (#passenger -&gt; Core.Object); yourself)</body></methods><methods><class-id>Reservation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="formofpayment">formofpayment"generated by Daskalos"     ^formofpayment</body></methods><methods><class-id>Reservation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="formofpayment:">formofpayment: anObject"generated by Daskalos"     formofpayment := (self checkValue: anObject forVariable: #formofpayment)</body></methods><methods><class-id>Reservation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="passenger">passenger"generated by Daskalos"     ^passenger</body></methods><methods><class-id>Reservation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="passenger:">passenger: anObject"generated by Daskalos"     passenger := (self checkValue: anObject forVariable: #passenger)</body></methods><methods><class-id>Reservation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reservationstatus">reservationstatus"generated by Daskalos"     ^reservationstatus</body></methods><methods><class-id>Reservation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reservationstatus:">reservationstatus: anObject"generated by Daskalos"     reservationstatus := (self checkValue: anObject forVariable: #reservationstatus)</body></methods><methods><class-id>Reservation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="tickets">tickets"generated by Daskalos"     ^tickets</body></methods><methods><class-id>Reservation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="tickets:">tickets: anObject"generated by Daskalos"     tickets := (self checkValue: anObject forVariable: #tickets)</body></methods><methods><class-id>Reservation</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     tickets := nil.     reservationstatus := nil.     formofpayment := nil.     passenger := nil.</body></methods><methods><class-id>Reservation</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="canClaimDiscount">canClaimDiscount	^(passenger category = 'adult') not</body></methods><class><name>Flight</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>departuretime arrivaltime departureairport </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Flight class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#departureairport -&gt; Core.String); add: (#departuretime -&gt; Core.String); add: (#arrivaltime -&gt; Core.String); yourself)</body></methods><methods><class-id>Flight</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="arrivaltime">arrivaltime"generated by Daskalos"     ^arrivaltime</body></methods><methods><class-id>Flight</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="arrivaltime:">arrivaltime: anObject"generated by Daskalos"     arrivaltime := (self checkValue: anObject forVariable: #arrivaltime)</body></methods><methods><class-id>Flight</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="departureairport">departureairport"generated by Daskalos"     ^departureairport</body></methods><methods><class-id>Flight</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="departureairport:">departureairport: anObject"generated by Daskalos"     departureairport := (self checkValue: anObject forVariable: #departureairport)</body></methods><methods><class-id>Flight</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="departuretime">departuretime"generated by Daskalos"     ^departuretime</body></methods><methods><class-id>Flight</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="departuretime:">departuretime: anObject"generated by Daskalos"     departuretime := (self checkValue: anObject forVariable: #departuretime)</body></methods><methods><class-id>Flight</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     departuretime := nil.     arrivaltime := nil.     departureairport := nil.</body></methods><do-it>(Reservation_vw select: [:v | v formofpayment = 'cash'])</do-it><do-it>(Reservation_vw select: [:v | v formofpayment = 'cash']).</do-it><do-it>(Reservation_vw select: [:v | v canClaimDiscount = 'true']).</do-it><do-it>(Reservation_vw select: [:v | v canClaimDiscount = 'true']).</do-it><do-it>(Reservation_vw select: [:v | v canClaimDiscount = 'false']).</do-it><do-it>(Reservation_vw select: [:v | v canClaimDiscount = 'false']).</do-it><do-it>Passenger removeFromSystem</do-it><do-it>Reservation removeFromSystem</do-it><do-it>Flight removeFromSystem</do-it><class><name>Application</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type price dateOfCreation </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Application class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#dateOfCreation -&gt; Core.Date); add: (#price -&gt; Core.Number); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Application</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dateOfCreation">dateOfCreation"generated by Daskalos"     ^dateOfCreation</body></methods><methods><class-id>Application</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dateOfCreation:">dateOfCreation: anObject"generated by Daskalos"     dateOfCreation := (self checkValue: anObject forVariable: #dateOfCreation)</body></methods><methods><class-id>Application</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Application</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Application</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price">price"generated by Daskalos"     ^price</body></methods><methods><class-id>Application</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price:">price: anObject"generated by Daskalos"     price := (self checkValue: anObject forVariable: #price)</body></methods><methods><class-id>Application</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Application</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Application</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     price := nil.     dateOfCreation := nil.</body></methods><methods><class-id>Application</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isExpensive">isExpensive	price &gt;= 2 ifTrue: [^'Expensive'] ifFalse: [^'Not expensive']</body></methods><methods><class-id>Application</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isFree">isFree	price = 0 ifTrue: [^'Free'] ifFalse: [^'Not free']</body></methods><methods><class-id>Application</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isInstalled">isInstalled	"on any device"	^Smartphone allInstances contains: [:s | s applications includes: self]</body></methods><methods><class-id>Application</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="timeAvailable">timeAvailable	"how long it was available to buy this app"	dateOfCreation isNil 		ifTrue: [^nil]		ifFalse: [^(Date today subtractDate: dateOfCreation) truncated]</body></methods><class><name>OperatingSystem</name><environment>Smalltalk</environment><super>Application</super><private>false</private><indexed-type>none</indexed-type><inst-vars>version title </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>OperatingSystem class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#version -&gt; Core.Number); add: (#title -&gt; Core.String); add: (#type -&gt; Core.String); add: (#dateOfCreation -&gt; Core.Date); add: (#price -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>OperatingSystem</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="title">title"generated by Daskalos"     ^title</body></methods><methods><class-id>OperatingSystem</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="title:">title: anObject"generated by Daskalos"     title := (self checkValue: anObject forVariable: #title)</body></methods><methods><class-id>OperatingSystem</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="version">version"generated by Daskalos"     ^version</body></methods><methods><class-id>OperatingSystem</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="version:">version: anObject"generated by Daskalos"     version := (self checkValue: anObject forVariable: #version)</body></methods><methods><class-id>OperatingSystem</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     version := nil.     title := nil.</body></methods><methods><class-id>OperatingSystem</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="IsInstalled">IsInstalled	^Smartphone allInstances contains: [:s | s applications includes: self]</body></methods><class><name>Company</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name country </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Company class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#country -&gt; Core.String); yourself)</body></methods><methods><class-id>Company</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="country">country"generated by Daskalos"     ^country</body></methods><methods><class-id>Company</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="country:">country: anObject"generated by Daskalos"     country := (self checkValue: anObject forVariable: #country)</body></methods><methods><class-id>Company</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Company</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Company</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     country := nil.</body></methods><class><name>Smartphone</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name price dateOfManufacture producer oS applications </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Smartphone class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#dateOfManufacture -&gt; Core.Date); add: (#oS -&gt; Core.Object); add: (#producer -&gt; Core.Object); add: (#applications -&gt; Core.Set); add: (#price -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Smartphone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="applications">applications"generated by Daskalos"     ^applications</body></methods><methods><class-id>Smartphone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dateOfManufacture">dateOfManufacture"generated by Daskalos"     ^dateOfManufacture</body></methods><methods><class-id>Smartphone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dateOfManufacture:">dateOfManufacture: anObject"generated by Daskalos"     dateOfManufacture := (self checkValue: anObject forVariable: #dateOfManufacture)</body></methods><methods><class-id>Smartphone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Smartphone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Smartphone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="oS">oS"generated by Daskalos"     ^oS</body></methods><methods><class-id>Smartphone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="oS:">oS: anObject"generated by Daskalos"     oS := (self checkValue: anObject forVariable: #oS)</body></methods><methods><class-id>Smartphone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price">price"generated by Daskalos"     ^price</body></methods><methods><class-id>Smartphone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price:">price: anObject"generated by Daskalos"     price := (self checkValue: anObject forVariable: #price)</body></methods><methods><class-id>Smartphone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="producer">producer"generated by Daskalos"     ^producer</body></methods><methods><class-id>Smartphone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="producer:">producer: anObject"generated by Daskalos"     producer := (self checkValue: anObject forVariable: #producer)</body></methods><methods><class-id>Smartphone</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     price := nil.     dateOfManufacture := nil.     producer := nil.     oS := nil.     applications := Set new.</body></methods><methods><class-id>Smartphone</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isExpensive">isExpensive	price &gt;= 800 ifTrue: [^'Expensive'] ifFalse: [^'Not expensive']</body></methods><methods><class-id>Smartphone</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isNewModel">isNewModel	(Date today subtractDate: dateOfManufacture) / 365.2422 &lt; 1 		ifTrue: [^'New model']		ifFalse: [^'Old model']</body></methods><do-it>OperatingSystem removeFromSystem</do-it><do-it>Application removeFromSystem</do-it><do-it>Company removeFromSystem</do-it><do-it>Smartphone removeFromSystem</do-it><class><name>Employee</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name sername id </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#sername -&gt; Core.String); add: (#id -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sername">sername"generated by Daskalos"     ^sername</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sername:">sername: anObject"generated by Daskalos"     sername := (self checkValue: anObject forVariable: #sername)</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     sername := nil.     id := nil.</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="amount_of_sailed_books">amount_of_sailed_books	^self sailed_Books size</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Common_proceed">Common_proceed	^(self sailed_Books collect: [:x | x price]) sum</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="employees_percent">employees_percent	^(self sailed_Books collect: [:x | x price * 10 / 100]) sum asFloat</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="sailed_Books">sailed_Books	^Book allInstances select: [:x | x sailed_by = self]</body></methods><class><name>Book</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name author publication_date price sailed_by </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Book class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#sailed_by -&gt; Core.Object); add: (#publication_date -&gt; Core.Date); add: (#price -&gt; Core.Number); add: (#author -&gt; Core.String); yourself)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="author">author"generated by Daskalos"     ^author</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="author:">author: anObject"generated by Daskalos"     author := (self checkValue: anObject forVariable: #author)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price">price"generated by Daskalos"     ^price</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price:">price: anObject"generated by Daskalos"     price := (self checkValue: anObject forVariable: #price)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="publication_date">publication_date"generated by Daskalos"     ^publication_date</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="publication_date:">publication_date: anObject"generated by Daskalos"     publication_date := (self checkValue: anObject forVariable: #publication_date)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sailed_by">sailed_by"generated by Daskalos"     ^sailed_by</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sailed_by:">sailed_by: anObject"generated by Daskalos"     sailed_by := (self checkValue: anObject forVariable: #sailed_by)</body></methods><methods><class-id>Book</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     author := nil.     publication_date := nil.     price := nil.     sailed_by := nil.</body></methods><methods><class-id>Book</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="purchasers">purchasers	^(Client allInstances select: [:x | x purchase = self]) 		collect: [:x | x name]		with: [:x | x bank_account]		with: [:x | x sername]</body></methods><class><name>Client</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name sername bank_account purchase date_of_purchase </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Client class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#bank_account -&gt; Core.String); add: (#sername -&gt; Core.String); add: (#purchase -&gt; Core.Object); add: (#date_of_purchase -&gt; Core.Date); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="bank_account">bank_account"generated by Daskalos"     ^bank_account</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="bank_account:">bank_account: anObject"generated by Daskalos"     bank_account := (self checkValue: anObject forVariable: #bank_account)</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="date_of_purchase">date_of_purchase"generated by Daskalos"     ^date_of_purchase</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="date_of_purchase:">date_of_purchase: anObject"generated by Daskalos"     date_of_purchase := (self checkValue: anObject forVariable: #date_of_purchase)</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purchase">purchase"generated by Daskalos"     ^purchase</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purchase:">purchase: anObject"generated by Daskalos"     purchase := (self checkValue: anObject forVariable: #purchase)</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sername">sername"generated by Daskalos"     ^sername</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sername:">sername: anObject"generated by Daskalos"     sername := (self checkValue: anObject forVariable: #sername)</body></methods><methods><class-id>Client</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     sername := nil.     bank_account := nil.     purchase := nil.     date_of_purchase := nil.</body></methods><do-it>Employees select: [: y | y id = 001]</do-it><do-it>Clients select: [: y | y date_of_purchase &lt; '1-DEC-2019' asDate]</do-it><do-it>Books select: [: y | y author = 'Tim LaHaye&amp;Jerry B. Jenkins']</do-it><class><name>Movie</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name producer release_date price sold_by </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Movie class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#release_date -&gt; Core.Date); add: (#name -&gt; Core.String); add: (#sold_by -&gt; Core.Object); add: (#price -&gt; Core.Number); add: (#producer -&gt; Core.String); yourself)</body></methods><methods><class-id>Movie</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Movie</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Movie</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price">price"generated by Daskalos"     ^price</body></methods><methods><class-id>Movie</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price:">price: anObject"generated by Daskalos"     price := (self checkValue: anObject forVariable: #price)</body></methods><methods><class-id>Movie</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="producer">producer"generated by Daskalos"     ^producer</body></methods><methods><class-id>Movie</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="producer:">producer: anObject"generated by Daskalos"     producer := (self checkValue: anObject forVariable: #producer)</body></methods><methods><class-id>Movie</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="release_date">release_date"generated by Daskalos"     ^release_date</body></methods><methods><class-id>Movie</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="release_date:">release_date: anObject"generated by Daskalos"     release_date := (self checkValue: anObject forVariable: #release_date)</body></methods><methods><class-id>Movie</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sold_by">sold_by"generated by Daskalos"     ^sold_by</body></methods><methods><class-id>Movie</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sold_by:">sold_by: anObject"generated by Daskalos"     sold_by := (self checkValue: anObject forVariable: #sold_by)</body></methods><methods><class-id>Movie</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     producer := nil.     release_date := nil.     price := nil.     sold_by := nil.</body></methods><class><name>Person</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname surname </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Person class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstname -&gt; Core.String); add: (#surname -&gt; Core.String); yourself)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname">firstname"generated by Daskalos"     ^firstname</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname:">firstname: anObject"generated by Daskalos"     firstname := (self checkValue: anObject forVariable: #firstname)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surname">surname"generated by Daskalos"     ^surname</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surname:">surname: anObject"generated by Daskalos"     surname := (self checkValue: anObject forVariable: #surname)</body></methods><methods><class-id>Person</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     surname := nil.</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>Person</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstname -&gt; Core.String); add: (#id -&gt; Core.Number); add: (#surname -&gt; Core.String); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     id := nil.</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="employee_money">employee_money	^(self sold_Movie collect: [:x | x price * 15 / 100]) sum asFloat</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Number_of_sold_Movies">Number_of_sold_Movies	^self sold_Movie size</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="sold_Movie">sold_Movie	^Movie allInstances select: [:x | x sold_by = self]</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Transaction">Transaction	^(self sold_Movie collect: [:x | x price]) sum</body></methods><class><name>Cinephile</name><environment>Smalltalk</environment><super>Person</super><private>false</private><indexed-type>none</indexed-type><inst-vars>bank_account date_of_purchase purchase </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Cinephile class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#bank_account -&gt; Core.String); add: (#firstname -&gt; Core.String); add: (#date_of_purchase -&gt; Core.Date); add: (#surname -&gt; Core.String); add: (#purchase -&gt; Core.Object); yourself)</body></methods><methods><class-id>Cinephile</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="bank_account">bank_account"generated by Daskalos"     ^bank_account</body></methods><methods><class-id>Cinephile</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="bank_account:">bank_account: anObject"generated by Daskalos"     bank_account := (self checkValue: anObject forVariable: #bank_account)</body></methods><methods><class-id>Cinephile</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="date_of_purchase">date_of_purchase"generated by Daskalos"     ^date_of_purchase</body></methods><methods><class-id>Cinephile</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="date_of_purchase:">date_of_purchase: anObject"generated by Daskalos"     date_of_purchase := (self checkValue: anObject forVariable: #date_of_purchase)</body></methods><methods><class-id>Cinephile</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purchase">purchase"generated by Daskalos"     ^purchase</body></methods><methods><class-id>Cinephile</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purchase:">purchase: anObject"generated by Daskalos"     purchase := (self checkValue: anObject forVariable: #purchase)</body></methods><methods><class-id>Cinephile</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     bank_account := nil.     date_of_purchase := nil.     purchase := nil.</body></methods><class><name>Visitor</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName modeOfPayment visits </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Visitor class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstName -&gt; Core.String); add: (#visits -&gt; Core.Object); add: (#lastName -&gt; Core.String); add: (#modeOfPayment -&gt; Core.String); yourself)</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="modeOfPayment">modeOfPayment"generated by Daskalos"     ^modeOfPayment</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="modeOfPayment:">modeOfPayment: anObject"generated by Daskalos"     modeOfPayment := (self checkValue: anObject forVariable: #modeOfPayment)</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="visits">visits"generated by Daskalos"     ^visits</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="visits:">visits: anObject"generated by Daskalos"     visits := (self checkValue: anObject forVariable: #visits)</body></methods><methods><class-id>Visitor</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     modeOfPayment := nil.     visits := nil.</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName id salary workIn showsAround </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#lastName -&gt; Core.String); add: (#showsAround -&gt; Core.Object); add: (#workIn -&gt; Core.Object); add: (#id -&gt; Core.Number); add: (#salary -&gt; Core.Number); add: (#firstName -&gt; Core.String); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary">salary"generated by Daskalos"     ^salary</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary:">salary: anObject"generated by Daskalos"     salary := (self checkValue: anObject forVariable: #salary)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="showsAround">showsAround"generated by Daskalos"     ^showsAround</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="showsAround:">showsAround: anObject"generated by Daskalos"     showsAround := (self checkValue: anObject forVariable: #showsAround)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="workIn">workIn"generated by Daskalos"     ^workIn</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="workIn:">workIn: anObject"generated by Daskalos"     workIn := (self checkValue: anObject forVariable: #workIn)</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     id := nil.     salary := nil.     workIn := nil.     showsAround := nil.</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="salaryRange">salaryRange	| sm1 sm2 |	sm1 := 'Good'.	sm2 := 'Average'.	salary &gt; 20000 ifTrue: [^sm1] ifFalse: [^sm2]</body></methods><class><name>Zoo</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>contact entranceFee address zooName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zoo class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#contact -&gt; Core.Number); add: (#zooName -&gt; Core.String); add: (#address -&gt; Core.String); add: (#entranceFee -&gt; Core.Number); yourself)</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="entranceFee">entranceFee"generated by Daskalos"     ^entranceFee</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="entranceFee:">entranceFee: anObject"generated by Daskalos"     entranceFee := (self checkValue: anObject forVariable: #entranceFee)</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zooName">zooName"generated by Daskalos"     ^zooName</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zooName:">zooName: anObject"generated by Daskalos"     zooName := (self checkValue: anObject forVariable: #zooName)</body></methods><methods><class-id>Zoo</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     contact := nil.     entranceFee := nil.     address := nil.     zooName := nil.</body></methods><class><name>Animal</name><environment>Smalltalk</environment><super>Zoo</super><private>false</private><indexed-type>none</indexed-type><inst-vars>age name animalType </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Animal class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); add: (#age -&gt; Core.Number); add: (#contact -&gt; Core.Number); add: (#animalType -&gt; Core.String); add: (#entranceFee -&gt; Core.Number); add: (#zooName -&gt; Core.String); yourself)</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age">age"generated by Daskalos"     ^age</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age:">age: anObject"generated by Daskalos"     age := (self checkValue: anObject forVariable: #age)</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="animalType">animalType"generated by Daskalos"     ^animalType</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="animalType:">animalType: anObject"generated by Daskalos"     animalType := (self checkValue: anObject forVariable: #animalType)</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Animal</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     age := nil.     name := nil.     animalType := nil.</body></methods><methods><class-id>Animal</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="ageRange">ageRange	| pm1 pm2 |	pm1 := 'Old'.	pm2 := 'Young'.	age &gt; 30 ifTrue: [^pm1] ifFalse: [^pm2]</body></methods><do-it>Employees select: [: y | y salaryRange = 'Average'].</do-it><do-it>Employees select: [: y | y salary &gt; 20000].</do-it><do-it>Animals select: [: y | y ageRange = 'Young'].</do-it><do-it>Animals select: [: y | y animalType = 'Sea Animal'].</do-it><do-it>Visitors select: [: z | z lastName = 'Rajaram'].</do-it><do-it>Visitors select: [: z | z modeOfPayment = 'Card'].</do-it><do-it>Visitor removeFromSystem</do-it><do-it>Employee removeFromSystem</do-it><do-it>Animal removeFromSystem</do-it><do-it>Zoo removeFromSystem</do-it><class><name>Movie</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name producer release_date price sold_by </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Movie class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#release_date -&gt; Core.Date); add: (#name -&gt; Core.String); add: (#sold_by -&gt; Core.Object); add: (#price -&gt; Core.Number); add: (#producer -&gt; Core.String); yourself)</body></methods><methods><class-id>Movie</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Movie</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Movie</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price">price"generated by Daskalos"     ^price</body></methods><methods><class-id>Movie</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price:">price: anObject"generated by Daskalos"     price := (self checkValue: anObject forVariable: #price)</body></methods><methods><class-id>Movie</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="producer">producer"generated by Daskalos"     ^producer</body></methods><methods><class-id>Movie</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="producer:">producer: anObject"generated by Daskalos"     producer := (self checkValue: anObject forVariable: #producer)</body></methods><methods><class-id>Movie</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="release_date">release_date"generated by Daskalos"     ^release_date</body></methods><methods><class-id>Movie</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="release_date:">release_date: anObject"generated by Daskalos"     release_date := (self checkValue: anObject forVariable: #release_date)</body></methods><methods><class-id>Movie</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sold_by">sold_by"generated by Daskalos"     ^sold_by</body></methods><methods><class-id>Movie</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sold_by:">sold_by: anObject"generated by Daskalos"     sold_by := (self checkValue: anObject forVariable: #sold_by)</body></methods><methods><class-id>Movie</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     producer := nil.     release_date := nil.     price := nil.     sold_by := nil.</body></methods><class><name>Person</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname surname </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Person class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstname -&gt; Core.String); add: (#surname -&gt; Core.String); yourself)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname">firstname"generated by Daskalos"     ^firstname</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname:">firstname: anObject"generated by Daskalos"     firstname := (self checkValue: anObject forVariable: #firstname)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surname">surname"generated by Daskalos"     ^surname</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surname:">surname: anObject"generated by Daskalos"     surname := (self checkValue: anObject forVariable: #surname)</body></methods><methods><class-id>Person</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     surname := nil.</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>Person</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstname -&gt; Core.String); add: (#id -&gt; Core.Number); add: (#surname -&gt; Core.String); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     id := nil.</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="employee_money">employee_money	^(self sold_Movie collect: [:x | x price * 15 / 100]) sum asFloat</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Number_of_sold_Movies">Number_of_sold_Movies	^self sold_Movie size</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="sold_Movie">sold_Movie	^Movie allInstances select: [:x | x sold_by = self]</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Transaction">Transaction	^(self sold_Movie collect: [:x | x price]) sum</body></methods><class><name>Cinephile</name><environment>Smalltalk</environment><super>Person</super><private>false</private><indexed-type>none</indexed-type><inst-vars>bank_account date_of_purchase purchase </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Cinephile class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#bank_account -&gt; Core.String); add: (#firstname -&gt; Core.String); add: (#date_of_purchase -&gt; Core.Date); add: (#surname -&gt; Core.String); add: (#purchase -&gt; Core.Object); yourself)</body></methods><methods><class-id>Cinephile</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="bank_account">bank_account"generated by Daskalos"     ^bank_account</body></methods><methods><class-id>Cinephile</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="bank_account:">bank_account: anObject"generated by Daskalos"     bank_account := (self checkValue: anObject forVariable: #bank_account)</body></methods><methods><class-id>Cinephile</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="date_of_purchase">date_of_purchase"generated by Daskalos"     ^date_of_purchase</body></methods><methods><class-id>Cinephile</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="date_of_purchase:">date_of_purchase: anObject"generated by Daskalos"     date_of_purchase := (self checkValue: anObject forVariable: #date_of_purchase)</body></methods><methods><class-id>Cinephile</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purchase">purchase"generated by Daskalos"     ^purchase</body></methods><methods><class-id>Cinephile</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purchase:">purchase: anObject"generated by Daskalos"     purchase := (self checkValue: anObject forVariable: #purchase)</body></methods><methods><class-id>Cinephile</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     bank_account := nil.     date_of_purchase := nil.     purchase := nil.</body></methods><do-it>Movies select: [: y | y producer = 'James Wan'].</do-it><do-it>Employees select: [: y | y id = 1].</do-it><do-it>Employees select: [: y | y id = 1].</do-it><do-it>Employees select: [: y | y id = 6].</do-it><do-it>Cinephiles select: [: y | y date_of_purchase &lt; '22-MAR-2021' asDate].</do-it><do-it>Cinephiles select: [: y | y date_of_purchase &gt; '22-MAR-2015' asDate].</do-it><do-it>Cinephiles select: [: y | y date_of_purchase &gt; '22-MAR-2020' asDate].</do-it><do-it>Cinephiles select: [: y | y date_of_purchase &gt; '22-MAR-2019' asDate].</do-it><do-it>Movie removeFromSystem</do-it><do-it>Employee removeFromSystem</do-it><do-it>Cinephile removeFromSystem</do-it><do-it>Person removeFromSystem</do-it><class><name>Employee</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name sername id </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#sername -&gt; Core.String); add: (#id -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sername">sername"generated by Daskalos"     ^sername</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sername:">sername: anObject"generated by Daskalos"     sername := (self checkValue: anObject forVariable: #sername)</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     sername := nil.     id := nil.</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="amount_of_sailed_books">amount_of_sailed_books	^self sailed_Books size</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Common_proceed">Common_proceed	^(self sailed_Books collect: [:x | x price]) sum</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="employees_percent">employees_percent	^(self sailed_Books collect: [:x | x price * 10 / 100]) sum asFloat</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="sailed_Books">sailed_Books	^Book allInstances select: [:x | x sailed_by = self]</body></methods><class><name>Book</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name author publication_date price sailed_by </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Book class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#sailed_by -&gt; Core.Object); add: (#publication_date -&gt; Core.Date); add: (#price -&gt; Core.Number); add: (#author -&gt; Core.String); yourself)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="author">author"generated by Daskalos"     ^author</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="author:">author: anObject"generated by Daskalos"     author := (self checkValue: anObject forVariable: #author)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price">price"generated by Daskalos"     ^price</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price:">price: anObject"generated by Daskalos"     price := (self checkValue: anObject forVariable: #price)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="publication_date">publication_date"generated by Daskalos"     ^publication_date</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="publication_date:">publication_date: anObject"generated by Daskalos"     publication_date := (self checkValue: anObject forVariable: #publication_date)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sailed_by">sailed_by"generated by Daskalos"     ^sailed_by</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sailed_by:">sailed_by: anObject"generated by Daskalos"     sailed_by := (self checkValue: anObject forVariable: #sailed_by)</body></methods><methods><class-id>Book</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     author := nil.     publication_date := nil.     price := nil.     sailed_by := nil.</body></methods><methods><class-id>Book</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="purchasers">purchasers	^(Client allInstances select: [:x | x purchase = self]) 		collect: [:x | x name]		with: [:x | x bank_account]		with: [:x | x sername]</body></methods><class><name>Client</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name sername bank_account purchase date_of_purchase </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Client class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#bank_account -&gt; Core.String); add: (#sername -&gt; Core.String); add: (#purchase -&gt; Core.Object); add: (#date_of_purchase -&gt; Core.Date); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="bank_account">bank_account"generated by Daskalos"     ^bank_account</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="bank_account:">bank_account: anObject"generated by Daskalos"     bank_account := (self checkValue: anObject forVariable: #bank_account)</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="date_of_purchase">date_of_purchase"generated by Daskalos"     ^date_of_purchase</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="date_of_purchase:">date_of_purchase: anObject"generated by Daskalos"     date_of_purchase := (self checkValue: anObject forVariable: #date_of_purchase)</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purchase">purchase"generated by Daskalos"     ^purchase</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purchase:">purchase: anObject"generated by Daskalos"     purchase := (self checkValue: anObject forVariable: #purchase)</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sername">sername"generated by Daskalos"     ^sername</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sername:">sername: anObject"generated by Daskalos"     sername := (self checkValue: anObject forVariable: #sername)</body></methods><methods><class-id>Client</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     sername := nil.     bank_account := nil.     purchase := nil.     date_of_purchase := nil.</body></methods><do-it>Books select: [: y | y author = 'Tim LaHaye&amp;Jerry B. Jenkins']</do-it><do-it>Employees select: [: y | y id = 001]</do-it><do-it>Clients select: [: y | y date_of_purchase &lt; '1-DEC-2019' asDate]</do-it><do-it>Employee removeFromSystem</do-it><do-it>Book removeFromSystem</do-it><do-it>Client removeFromSystem</do-it><class><name>Shop</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name address contact email </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Shop class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#contact -&gt; Core.Number); add: (#email -&gt; Core.String); add: (#address -&gt; Core.String); yourself)</body></methods><comment><class-id>Shop</class-id><body>We have created a class named Shop and it has name, address,contact, email</body></comment><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="email">email"generated by Daskalos"     ^email</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="email:">email: anObject"generated by Daskalos"     email := (self checkValue: anObject forVariable: #email)</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Shop</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     address := nil.     contact := nil.     email := nil.</body></methods><class><name>Dress</name><environment>Smalltalk</environment><super>Shop</super><private>false</private><indexed-type>none</indexed-type><inst-vars>type size price isin </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Dress class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#type -&gt; Core.String); add: (#isin -&gt; Core.Object); add: (#size -&gt; Core.String); add: (#contact -&gt; Core.Number); add: (#email -&gt; Core.String); add: (#price -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><comment><class-id>Dress</class-id><body>We have created a class named Dress and it has type,size,price</body></comment><methods><class-id>Dress</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="isin">isin"generated by Daskalos"     ^isin</body></methods><methods><class-id>Dress</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="isin:">isin: anObject"generated by Daskalos"     isin := (self checkValue: anObject forVariable: #isin)</body></methods><methods><class-id>Dress</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price">price"generated by Daskalos"     ^price</body></methods><methods><class-id>Dress</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price:">price: anObject"generated by Daskalos"     price := (self checkValue: anObject forVariable: #price)</body></methods><methods><class-id>Dress</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="size">size"generated by Daskalos"     ^size</body></methods><methods><class-id>Dress</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="size:">size: anObject"generated by Daskalos"     size := (self checkValue: anObject forVariable: #size)</body></methods><methods><class-id>Dress</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Dress</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Dress</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     type := nil.     size := nil.     price := nil.     isin := nil.</body></methods><class><name>Customers</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname lastname contact goto </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Customers class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#contact -&gt; Core.Number); add: (#firstname -&gt; Core.String); add: (#goto -&gt; Core.Object); add: (#lastname -&gt; Core.String); yourself)</body></methods><comment><class-id>Customers</class-id><body>We have created a class named Customers and it has firstname, lastname,contact</body></comment><methods><class-id>Customers</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Customers</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Customers</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname">firstname"generated by Daskalos"     ^firstname</body></methods><methods><class-id>Customers</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname:">firstname: anObject"generated by Daskalos"     firstname := (self checkValue: anObject forVariable: #firstname)</body></methods><methods><class-id>Customers</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="goto">goto"generated by Daskalos"     ^goto</body></methods><methods><class-id>Customers</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="goto:">goto: anObject"generated by Daskalos"     goto := (self checkValue: anObject forVariable: #goto)</body></methods><methods><class-id>Customers</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastname">lastname"generated by Daskalos"     ^lastname</body></methods><methods><class-id>Customers</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastname:">lastname: anObject"generated by Daskalos"     lastname := (self checkValue: anObject forVariable: #lastname)</body></methods><methods><class-id>Customers</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     lastname := nil.     contact := nil.     goto := nil.</body></methods><class><name>Employees</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname lastname id contact workin serve </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employees class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#workin -&gt; Core.Object); add: (#serve -&gt; Core.Object); add: (#id -&gt; Core.Number); add: (#contact -&gt; Core.Number); add: (#lastname -&gt; Core.String); add: (#firstname -&gt; Core.String); yourself)</body></methods><comment><class-id>Employees</class-id><body>We have created a class named Employees and it has firstname, lastname, id  and contact</body></comment><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname">firstname"generated by Daskalos"     ^firstname</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname:">firstname: anObject"generated by Daskalos"     firstname := (self checkValue: anObject forVariable: #firstname)</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastname">lastname"generated by Daskalos"     ^lastname</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastname:">lastname: anObject"generated by Daskalos"     lastname := (self checkValue: anObject forVariable: #lastname)</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="serve">serve"generated by Daskalos"     ^serve</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="serve:">serve: anObject"generated by Daskalos"     serve := (self checkValue: anObject forVariable: #serve)</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="workin">workin"generated by Daskalos"     ^workin</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="workin:">workin: anObject"generated by Daskalos"     workin := (self checkValue: anObject forVariable: #workin)</body></methods><methods><class-id>Employees</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     lastname := nil.     id := nil.     contact := nil.     workin := nil.     serve := nil.</body></methods><do-it>DressSet select: [:p | p type = 'Traditional'].</do-it><do-it>DressSet select: [:p | p price &lt; 1000].</do-it><do-it>DressSet select: [:p | p price &lt; 1000].</do-it><do-it>DressSet select: [:p | p price &lt; 1000].</do-it><do-it>s1 := Shop new.s1 name: 'Vinit Shop'.s1 address: 'Suchdol'.s1 contact: 9875464383.s1 email: 'vinit@gmail.com'.d1 := Dress new.d1 name: 'Vinit Shop'.d1 address: 'Suchdol'.d1 contact: 9875464383.d1 email: 'vinit@gmail.com'.d1 type: 'Western'.d1 size: 'M'.d1 price: 1200.d2 := Dress new.d2 := Dress new.d2 name: 'Vinit Shop'.d2 address: 'Suchdol'.d2 contact: 9875464383.d2 email: 'vinit@gmail.com'.d2 type: 'Traditional'.d2 size: 'S'.d2 price: 500.d3 := Dress new.d3 name: 'Vinit Shop'.d3 address: 'Suchdol'.d3 contact: 9875464383.d3 email: 'vinit@gmail.com'.d3 type: 'Sleep wear'.d3 size: 'XL'.d3 price: 700.d4 := Dress new.d4 name: 'Vinit Shop'.d4 address: 'Suchdol'.d4 contact: 9875464383.d4 email: 'vinit@gmail.com'.d4 type: 'Western'.d4 size: 'XS'.d4 price: 1500.d5 := Dress new.d5 name: 'Vinit Shop'.d5 address: 'Suchdol'.d5 contact: 9875464383.d5 email: 'vinit@gmail.com'.d5 type: 'Traditional'.d5 size: 'X'.d5 price: 2000.e1 := Employees new.e1 firstname: 'Robert'.e1 lastname: 'Brown'.e1 id: 0001.e1 contact: 970708698.e2 := Employees new.e2 firstname: 'Martin'.e2 lastname: 'kozak'.e2 id: 0002.e2 contact: 36799999.e3 := Employees new.e3 firstname: 'Caroline'.e3 lastname: 'latte'.e3 id: 0003.e3 contact: 5367888.e4 := Employees new.e4 firstname: 'Aurora'.e4 lastname: 'hak'.e4 id: 0004.e4 contact: 1234557788.c1 := Customers new.c1 firstname: 'katherine'.c1 lastname: 'RodrÃ­guez'.c1 contact: 946433.c2 := Customers new.c2 firstname: 'Robin'.c2 lastname: 'Sam'.c2 contact: 543322.c3 := Customers new.c3 firstname: 'Sophie'.c3 lastname: 'Williams'.c3 contact: 123443.c4 := Customers new.c4 firstname: 'Will'.c4 lastname: 'smith'.c4 contact: 245295.d1 isin: s1.d2 isin: s1.d3 isin: s1.d4 isin: s1.d5 isin: s1.c1 goto: s1.c2 goto: s1.c3 goto: s1.c4 goto: s1.e1 workin: s1.e2 workin: s1.e3 workin: s1.e4 workin: s1.e1 serve: c1.e2 serve: c4.e3 serve: c2.e4 serve: c3.ShopSet:= Set new.ShopSet add: s1.DressSet:= Set new.DressSet add: d1; add:d2; add: d3; add: d4; add: d5.EmployeesSet:= Set new.EmployeesSet add: e1; add: e2; add: e3; add: e4.CustumorsSet:= Set new.CustumorsSet add: c1; add: c2; add: c3; add: c4.</do-it><do-it>DressSet select: [:p | p price &lt; 1000].</do-it><do-it>EmployeesSet select: [:p | p id = 3].</do-it><do-it>CustumorsSet select: [:p | p firstname = 'Will'].</do-it><do-it>Dress removeFromSystem</do-it><do-it>Shop removeFromSystem</do-it><do-it>Customers removeFromSystem</do-it><do-it>Employees removeFromSystem</do-it><class><name>Shop</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>shopName address contact shop </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Shop class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#shopName -&gt; Core.String); add: (#contact -&gt; Core.Number); add: (#address -&gt; Core.String); add: (#shop -&gt; Core.Object); yourself)</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="shop:">shop: anObject"generated by Daskalos"     shop := (self checkValue: anObject forVariable: #shop)</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="shopName">shopName"generated by Daskalos"     ^shopName</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="shopName:">shopName: anObject"generated by Daskalos"     shopName := (self checkValue: anObject forVariable: #shopName)</body></methods><methods><class-id>Shop</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     shopName := nil.     address := nil.     contact := nil.     shop := nil.</body></methods><class><name>Product</name><environment>Smalltalk</environment><super>Shop</super><private>false</private><indexed-type>none</indexed-type><inst-vars>price manufacturedDate name soledBy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Product class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#soledBy -&gt; Core.Object); add: (#contact -&gt; Core.Number); add: (#address -&gt; Core.String); add: (#price -&gt; Core.Number); add: (#manufacturedDate -&gt; Core.Date); add: (#shopName -&gt; Core.String); yourself)</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="manufacturedDate">manufacturedDate"generated by Daskalos"     ^manufacturedDate</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="manufacturedDate:">manufacturedDate: anObject"generated by Daskalos"     manufacturedDate := (self checkValue: anObject forVariable: #manufacturedDate)</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price">price"generated by Daskalos"     ^price</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price:">price: anObject"generated by Daskalos"     price := (self checkValue: anObject forVariable: #price)</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="soledBy">soledBy"generated by Daskalos"     ^soledBy</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="soledBy:">soledBy: anObject"generated by Daskalos"     soledBy := (self checkValue: anObject forVariable: #soledBy)</body></methods><methods><class-id>Product</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     price := nil.     manufacturedDate := nil.     name := nil.     soledBy := nil.</body></methods><methods><class-id>Product</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="getprice">getprice	| am1 am2 |	am1 := 'Expensive'.	am2 := 'Less Expensive'.	price &gt; 100 ifTrue: [^am1] ifFalse: [^am2]</body></methods><class><name>Customer</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName purchaseDate buying </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Customer class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#purchaseDate -&gt; Core.Date); add: (#buying -&gt; Core.Object); add: (#lastName -&gt; Core.String); add: (#firstName -&gt; Core.String); yourself)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="buying">buying"generated by Daskalos"     ^buying</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="buying:">buying: anObject"generated by Daskalos"     buying := (self checkValue: anObject forVariable: #buying)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purchaseDate">purchaseDate"generated by Daskalos"     ^purchaseDate</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purchaseDate:">purchaseDate: anObject"generated by Daskalos"     purchaseDate := (self checkValue: anObject forVariable: #purchaseDate)</body></methods><methods><class-id>Customer</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     purchaseDate := nil.     buying := nil.</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName id employees salary serve </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#serve -&gt; Core.Object); add: (#firstName -&gt; Core.String); add: (#lastName -&gt; Core.String); add: (#salary -&gt; Core.Number); add: (#id -&gt; Core.Number); add: (#employees -&gt; Core.Object); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="employees:">employees: anObject"generated by Daskalos"     employees := (self checkValue: anObject forVariable: #employees)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary">salary"generated by Daskalos"     ^salary</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary:">salary: anObject"generated by Daskalos"     salary := (self checkValue: anObject forVariable: #salary)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="serve">serve"generated by Daskalos"     ^serve</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="serve:">serve: anObject"generated by Daskalos"     serve := (self checkValue: anObject forVariable: #serve)</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     id := nil.     employees := nil.     salary := nil.     serve := nil.</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="amount_of_soled_products">amount_of_soled_products	^self soledProducts size</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="employees_percent">employees_percent	^(self soledProducts collect: [:x | x price * 10 / 100]) sum asFloat</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="salaryRange">salaryRange	| sm1 sm2 |	sm1 := 'Good'.	sm2 := 'Average'.	salary &gt; 20000 ifTrue: [^sm1] ifFalse: [^sm2]</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="soledProducts">soledProducts	^Product allInstances select: [:x | x soledBy = self]</body></methods><do-it>Product removeFromSystem</do-it><do-it>Shop removeFromSystem</do-it><do-it>Customer removeFromSystem</do-it><do-it>Employee removeFromSystem</do-it><class><name>Shop</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>shopName address contact shop </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Shop class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#shopName -&gt; Core.String); add: (#contact -&gt; Core.Number); add: (#address -&gt; Core.String); add: (#shop -&gt; Core.Object); yourself)</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="shop:">shop: anObject"generated by Daskalos"     shop := (self checkValue: anObject forVariable: #shop)</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="shopName">shopName"generated by Daskalos"     ^shopName</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="shopName:">shopName: anObject"generated by Daskalos"     shopName := (self checkValue: anObject forVariable: #shopName)</body></methods><methods><class-id>Shop</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     shopName := nil.     address := nil.     contact := nil.     shop := nil.</body></methods><class><name>Product</name><environment>Smalltalk</environment><super>Shop</super><private>false</private><indexed-type>none</indexed-type><inst-vars>price manufacturedDate name soledBy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Product class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#soledBy -&gt; Core.Object); add: (#contact -&gt; Core.Number); add: (#address -&gt; Core.String); add: (#price -&gt; Core.Number); add: (#manufacturedDate -&gt; Core.Date); add: (#shopName -&gt; Core.String); yourself)</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="manufacturedDate">manufacturedDate"generated by Daskalos"     ^manufacturedDate</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="manufacturedDate:">manufacturedDate: anObject"generated by Daskalos"     manufacturedDate := (self checkValue: anObject forVariable: #manufacturedDate)</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price">price"generated by Daskalos"     ^price</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price:">price: anObject"generated by Daskalos"     price := (self checkValue: anObject forVariable: #price)</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="soledBy">soledBy"generated by Daskalos"     ^soledBy</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="soledBy:">soledBy: anObject"generated by Daskalos"     soledBy := (self checkValue: anObject forVariable: #soledBy)</body></methods><methods><class-id>Product</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     price := nil.     manufacturedDate := nil.     name := nil.     soledBy := nil.</body></methods><methods><class-id>Product</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="getprice">getprice	| am1 am2 |	am1 := 'Expensive'.	am2 := 'Less Expensive'.	price &gt; 100 ifTrue: [^am1] ifFalse: [^am2]</body></methods><class><name>Customer</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName purchaseDate buying </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Customer class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#purchaseDate -&gt; Core.Date); add: (#buying -&gt; Core.Object); add: (#lastName -&gt; Core.String); add: (#firstName -&gt; Core.String); yourself)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="buying">buying"generated by Daskalos"     ^buying</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="buying:">buying: anObject"generated by Daskalos"     buying := (self checkValue: anObject forVariable: #buying)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purchaseDate">purchaseDate"generated by Daskalos"     ^purchaseDate</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purchaseDate:">purchaseDate: anObject"generated by Daskalos"     purchaseDate := (self checkValue: anObject forVariable: #purchaseDate)</body></methods><methods><class-id>Customer</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     purchaseDate := nil.     buying := nil.</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName id employees salary serve </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#serve -&gt; Core.Object); add: (#firstName -&gt; Core.String); add: (#lastName -&gt; Core.String); add: (#salary -&gt; Core.Number); add: (#id -&gt; Core.Number); add: (#employees -&gt; Core.Object); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="employees:">employees: anObject"generated by Daskalos"     employees := (self checkValue: anObject forVariable: #employees)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary">salary"generated by Daskalos"     ^salary</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary:">salary: anObject"generated by Daskalos"     salary := (self checkValue: anObject forVariable: #salary)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="serve">serve"generated by Daskalos"     ^serve</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="serve:">serve: anObject"generated by Daskalos"     serve := (self checkValue: anObject forVariable: #serve)</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     id := nil.     employees := nil.     salary := nil.     serve := nil.</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="amount_of_soled_products">amount_of_soled_products	^self soledProducts size</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="employees_percent">employees_percent	^(self soledProducts collect: [:x | x price * 10 / 100]) sum asFloat</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="salaryRange">salaryRange	| sm1 sm2 |	sm1 := 'Good'.	sm2 := 'Average'.	salary &gt; 20000 ifTrue: [^sm1] ifFalse: [^sm2]</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="soledProducts">soledProducts	^Product allInstances select: [:x | x soledBy = self]</body></methods><class><name>Shop</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>shopName address contact shop </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Shop class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#shopName -&gt; Core.String); add: (#contact -&gt; Core.Number); add: (#address -&gt; Core.String); add: (#shop -&gt; Core.Object); yourself)</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="shop:">shop: anObject"generated by Daskalos"     shop := (self checkValue: anObject forVariable: #shop)</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="shopName">shopName"generated by Daskalos"     ^shopName</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="shopName:">shopName: anObject"generated by Daskalos"     shopName := (self checkValue: anObject forVariable: #shopName)</body></methods><methods><class-id>Shop</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     shopName := nil.     address := nil.     contact := nil.     shop := nil.</body></methods><class><name>Product</name><environment>Smalltalk</environment><super>Shop</super><private>false</private><indexed-type>none</indexed-type><inst-vars>price manufacturedDate name soledBy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Product class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#soledBy -&gt; Core.Object); add: (#contact -&gt; Core.Number); add: (#address -&gt; Core.String); add: (#price -&gt; Core.Number); add: (#manufacturedDate -&gt; Core.Date); add: (#shopName -&gt; Core.String); yourself)</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="manufacturedDate">manufacturedDate"generated by Daskalos"     ^manufacturedDate</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="manufacturedDate:">manufacturedDate: anObject"generated by Daskalos"     manufacturedDate := (self checkValue: anObject forVariable: #manufacturedDate)</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price">price"generated by Daskalos"     ^price</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price:">price: anObject"generated by Daskalos"     price := (self checkValue: anObject forVariable: #price)</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="soledBy">soledBy"generated by Daskalos"     ^soledBy</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="soledBy:">soledBy: anObject"generated by Daskalos"     soledBy := (self checkValue: anObject forVariable: #soledBy)</body></methods><methods><class-id>Product</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     price := nil.     manufacturedDate := nil.     name := nil.     soledBy := nil.</body></methods><methods><class-id>Product</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="getprice">getprice	| am1 am2 |	am1 := 'Expensive'.	am2 := 'Less Expensive'.	price &gt; 100 ifTrue: [^am1] ifFalse: [^am2]</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName id employees salary </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#salary -&gt; Core.Number); add: (#id -&gt; Core.Number); add: (#lastName -&gt; Core.String); add: (#employees -&gt; Core.Object); add: (#firstName -&gt; Core.String); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="employees:">employees: anObject"generated by Daskalos"     employees := (self checkValue: anObject forVariable: #employees)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary">salary"generated by Daskalos"     ^salary</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary:">salary: anObject"generated by Daskalos"     salary := (self checkValue: anObject forVariable: #salary)</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     id := nil.     employees := nil.     salary := nil.</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="amount_of_soled_products">amount_of_soled_products	^self soledProducts size</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="employees_percent">employees_percent	^(self soledProducts collect: [:x | x price * 10 / 100]) sum asFloat</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="salaryRange">salaryRange	| sm1 sm2 |	sm1 := 'Good'.	sm2 := 'Average'.	salary &gt; 20000 ifTrue: [^sm1] ifFalse: [^sm2]</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="soledProducts">soledProducts	^Product allInstances select: [:x | x soledBy = self]</body></methods><class><name>Customer</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName purchaseDate buying </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Customer class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#purchaseDate -&gt; Core.Date); add: (#buying -&gt; Core.Object); add: (#lastName -&gt; Core.String); add: (#firstName -&gt; Core.String); yourself)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="buying">buying"generated by Daskalos"     ^buying</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="buying:">buying: anObject"generated by Daskalos"     buying := (self checkValue: anObject forVariable: #buying)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purchaseDate">purchaseDate"generated by Daskalos"     ^purchaseDate</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purchaseDate:">purchaseDate: anObject"generated by Daskalos"     purchaseDate := (self checkValue: anObject forVariable: #purchaseDate)</body></methods><methods><class-id>Customer</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     purchaseDate := nil.     buying := nil.</body></methods><do-it>Employees := Set new.Products := Set new.Customers := Set new."________Employees___________"e1 := Employee new.e1 firstName: 'Micheal'.e1 lastName: 'Jason'. e1 id: 001.e1 salary: 15000.e2 := Employee new.e2 firstName: 'Lavanya'.e2 lastName: 'Athreya'. e2 id: 002.e2 salary: 21000.e3 := Employee new.e3 firstName: 'Morgan'.e3 lastName: 'FreeMan'. e3 id: 003.e3 salary: 25000.e4 := Employee new.e4 firstName: 'Arul'.e4 lastName: 'Sundaram'. e4 id: 004.e4 salary: 17000.Employees add: e1; add: e2 ; add: e3; add: e4."_______Products__________"p1 := Product new.p1 shopName: 'Albert'.p1 address: 'Andel'. p1 contact: 420112233.p1 name: 'Vegetables '.p1 price: 120. p1 manufacturedDate: '24-OCT-2022' asDate.p1 soledBy: e1.p2 := Product new.p2 shopName: 'Albert'.p2 address: 'Andel'. p2 contact: 420112233.p2 name: 'Beveregers'.p2 price: 40. p2 manufacturedDate: '20-JAN-2022' asDate.p2 soledBy: e2.p3 := Product new.p3 shopName: 'Albert'.p3 address: 'Andel'. p3 contact: 420112233.p3 name: 'Snacks'.p3 price: 30. p3 manufacturedDate: '20-FEB-2022' asDate.p3 soledBy: e3.p4 := Product new.p4 shopName: 'Albert'.p4 address: 'Andel'. p4 contact: 420112233.p4 name: 'Frozon Food'.p4 price: 80. p4 manufacturedDate: '20-APR-2022' asDate.p4 soledBy: e4.p5 := Product new.p5 shopName: 'Albert'.p5 address: 'Andel'. p5 contact: 420112233.p5 name: 'Fruits '.p5 price: 25. p5 manufacturedDate: '24-DEC-2022' asDate.p5 soledBy: e2.p6 := Product new.p6 shopName: 'Albert'.p6 address: 'Andel'. p6 contact: 420112233.p6 name: 'Stationaries '.p6 price: 40. p6 manufacturedDate: '24-APR-2022' asDate.p6 soledBy: e3.p7 := Product new.p7 shopName: 'Albert'.p7 address: 'Andel'. p7 contact: 420112233.p7 name: 'Toiletries '.p7 price: 70. p7 manufacturedDate: '24-JUN-2022' asDate.p7 soledBy: e1.Products add: p1; add: p2; add: p3; add: p4; add: p5; add: p6; add: p7."_________Customers___________"c1 := Customer new.c1 firstName: 'Reena'.c1 lastName: 'Bharath'. c1 purchaseDate: '24-JUN-2022' asDate.c1 buying: p1.c2 := Customer new.c2 firstName: 'Keerthana'.c2 lastName: 'Kannan'. c2 purchaseDate: '24-FEB-2022' asDate.c2 buying: p2.c3 := Customer new.c3 firstName: 'Darshini'.c3 lastName: 'Rajaram'. c3 purchaseDate: '12-JAN-2022' asDate.c3 buying: p3.c4 := Customer new.c4 firstName: 'Daniel'.c4 lastName: 'Prakash'. c4 purchaseDate: '24-APR-2022' asDate.c4 buying: p4.Customers add: c1; add: c2; add: c3; add: c4.</do-it><do-it>Product removeFromSystem</do-it><do-it>Shop removeFromSystem</do-it><do-it>Employee removeFromSystem</do-it><do-it>Customer removeFromSystem</do-it><class><name>Shop</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>shopName address contact shop </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Shop class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#shopName -&gt; Core.String); add: (#contact -&gt; Core.Number); add: (#address -&gt; Core.String); add: (#shop -&gt; Core.Object); yourself)</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="shop:">shop: anObject"generated by Daskalos"     shop := (self checkValue: anObject forVariable: #shop)</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="shopName">shopName"generated by Daskalos"     ^shopName</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="shopName:">shopName: anObject"generated by Daskalos"     shopName := (self checkValue: anObject forVariable: #shopName)</body></methods><methods><class-id>Shop</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     shopName := nil.     address := nil.     contact := nil.     shop := nil.</body></methods><class><name>Product</name><environment>Smalltalk</environment><super>Shop</super><private>false</private><indexed-type>none</indexed-type><inst-vars>price manufacturedDate name soledBy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Product class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#soledBy -&gt; Core.Object); add: (#contact -&gt; Core.Number); add: (#address -&gt; Core.String); add: (#price -&gt; Core.Number); add: (#manufacturedDate -&gt; Core.Date); add: (#shopName -&gt; Core.String); yourself)</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="manufacturedDate">manufacturedDate"generated by Daskalos"     ^manufacturedDate</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="manufacturedDate:">manufacturedDate: anObject"generated by Daskalos"     manufacturedDate := (self checkValue: anObject forVariable: #manufacturedDate)</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price">price"generated by Daskalos"     ^price</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price:">price: anObject"generated by Daskalos"     price := (self checkValue: anObject forVariable: #price)</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="soledBy">soledBy"generated by Daskalos"     ^soledBy</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="soledBy:">soledBy: anObject"generated by Daskalos"     soledBy := (self checkValue: anObject forVariable: #soledBy)</body></methods><methods><class-id>Product</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     price := nil.     manufacturedDate := nil.     name := nil.     soledBy := nil.</body></methods><methods><class-id>Product</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="getprice">getprice	| am1 am2 |	am1 := 'Expensive'.	am2 := 'Less Expensive'.	price &gt; 100 ifTrue: [^am1] ifFalse: [^am2]</body></methods><class><name>Customer</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName purchaseDate buying </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Customer class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#purchaseDate -&gt; Core.Date); add: (#buying -&gt; Core.Object); add: (#lastName -&gt; Core.String); add: (#firstName -&gt; Core.String); yourself)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="buying">buying"generated by Daskalos"     ^buying</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="buying:">buying: anObject"generated by Daskalos"     buying := (self checkValue: anObject forVariable: #buying)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purchaseDate">purchaseDate"generated by Daskalos"     ^purchaseDate</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purchaseDate:">purchaseDate: anObject"generated by Daskalos"     purchaseDate := (self checkValue: anObject forVariable: #purchaseDate)</body></methods><methods><class-id>Customer</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     purchaseDate := nil.     buying := nil.</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName id employees salary serve </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#serve -&gt; Core.Object); add: (#firstName -&gt; Core.String); add: (#lastName -&gt; Core.String); add: (#salary -&gt; Core.Number); add: (#id -&gt; Core.Number); add: (#employees -&gt; Core.Object); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="employees:">employees: anObject"generated by Daskalos"     employees := (self checkValue: anObject forVariable: #employees)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary">salary"generated by Daskalos"     ^salary</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary:">salary: anObject"generated by Daskalos"     salary := (self checkValue: anObject forVariable: #salary)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="serve">serve"generated by Daskalos"     ^serve</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="serve:">serve: anObject"generated by Daskalos"     serve := (self checkValue: anObject forVariable: #serve)</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     id := nil.     employees := nil.     salary := nil.     serve := nil.</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="amount_of_soled_products">amount_of_soled_products	^self soledProducts size</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="employees_percent">employees_percent	^(self soledProducts collect: [:x | x price * 10 / 100]) sum asFloat</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="salaryRange">salaryRange	| sm1 sm2 |	sm1 := 'Good'.	sm2 := 'Average'.	salary &gt; 20000 ifTrue: [^sm1] ifFalse: [^sm2]</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="soledProducts">soledProducts	^Product allInstances select: [:x | x soledBy = self]</body></methods><do-it>Product removeFromSystem</do-it><do-it>Shop removeFromSystem</do-it><do-it>Customer removeFromSystem</do-it><do-it>Employee removeFromSystem</do-it><class><name>Shop</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>shopName address contact shop </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Shop class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#shopName -&gt; Core.String); add: (#contact -&gt; Core.Number); add: (#address -&gt; Core.String); add: (#shop -&gt; Core.Object); yourself)</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="shop:">shop: anObject"generated by Daskalos"     shop := (self checkValue: anObject forVariable: #shop)</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="shopName">shopName"generated by Daskalos"     ^shopName</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="shopName:">shopName: anObject"generated by Daskalos"     shopName := (self checkValue: anObject forVariable: #shopName)</body></methods><methods><class-id>Shop</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     shopName := nil.     address := nil.     contact := nil.     shop := nil.</body></methods><class><name>Product</name><environment>Smalltalk</environment><super>Shop</super><private>false</private><indexed-type>none</indexed-type><inst-vars>price manufacturedDate name soledBy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Product class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#soledBy -&gt; Core.Object); add: (#contact -&gt; Core.Number); add: (#address -&gt; Core.String); add: (#price -&gt; Core.Number); add: (#manufacturedDate -&gt; Core.Date); add: (#shopName -&gt; Core.String); yourself)</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="manufacturedDate">manufacturedDate"generated by Daskalos"     ^manufacturedDate</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="manufacturedDate:">manufacturedDate: anObject"generated by Daskalos"     manufacturedDate := (self checkValue: anObject forVariable: #manufacturedDate)</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price">price"generated by Daskalos"     ^price</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price:">price: anObject"generated by Daskalos"     price := (self checkValue: anObject forVariable: #price)</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="soledBy">soledBy"generated by Daskalos"     ^soledBy</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="soledBy:">soledBy: anObject"generated by Daskalos"     soledBy := (self checkValue: anObject forVariable: #soledBy)</body></methods><methods><class-id>Product</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     price := nil.     manufacturedDate := nil.     name := nil.     soledBy := nil.</body></methods><methods><class-id>Product</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="getprice">getprice	| am1 am2 |	am1 := 'Expensive'.	am2 := 'Less Expensive'.	price &gt; 100 ifTrue: [^am1] ifFalse: [^am2]</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName id employees salary </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#salary -&gt; Core.Number); add: (#id -&gt; Core.Number); add: (#lastName -&gt; Core.String); add: (#employees -&gt; Core.Object); add: (#firstName -&gt; Core.String); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="employees:">employees: anObject"generated by Daskalos"     employees := (self checkValue: anObject forVariable: #employees)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary">salary"generated by Daskalos"     ^salary</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary:">salary: anObject"generated by Daskalos"     salary := (self checkValue: anObject forVariable: #salary)</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     id := nil.     employees := nil.     salary := nil.</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="amount_of_soled_products">amount_of_soled_products	^self soledProducts size</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="employees_percent">employees_percent	^(self soledProducts collect: [:x | x price * 10 / 100]) sum asFloat</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="salaryRange">salaryRange	| sm1 sm2 |	sm1 := 'Good'.	sm2 := 'Average'.	salary &gt; 20000 ifTrue: [^sm1] ifFalse: [^sm2]</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="soledProducts">soledProducts	^Product allInstances select: [:x | x soledBy = self]</body></methods><class><name>Customer</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName purchaseDate buying </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Customer class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#purchaseDate -&gt; Core.Date); add: (#buying -&gt; Core.Object); add: (#lastName -&gt; Core.String); add: (#firstName -&gt; Core.String); yourself)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="buying">buying"generated by Daskalos"     ^buying</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="buying:">buying: anObject"generated by Daskalos"     buying := (self checkValue: anObject forVariable: #buying)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purchaseDate">purchaseDate"generated by Daskalos"     ^purchaseDate</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purchaseDate:">purchaseDate: anObject"generated by Daskalos"     purchaseDate := (self checkValue: anObject forVariable: #purchaseDate)</body></methods><methods><class-id>Customer</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     purchaseDate := nil.     buying := nil.</body></methods><do-it>Product removeFromSystem</do-it><do-it>Shop removeFromSystem</do-it><do-it>Employee removeFromSystem</do-it><do-it>Customer removeFromSystem</do-it><class><name>Shop</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>shopName address contact shop </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Shop class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#shopName -&gt; Core.String); add: (#contact -&gt; Core.Number); add: (#address -&gt; Core.String); add: (#shop -&gt; Core.Object); yourself)</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="shop:">shop: anObject"generated by Daskalos"     shop := (self checkValue: anObject forVariable: #shop)</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="shopName">shopName"generated by Daskalos"     ^shopName</body></methods><methods><class-id>Shop</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="shopName:">shopName: anObject"generated by Daskalos"     shopName := (self checkValue: anObject forVariable: #shopName)</body></methods><methods><class-id>Shop</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     shopName := nil.     address := nil.     contact := nil.     shop := nil.</body></methods><class><name>Product</name><environment>Smalltalk</environment><super>Shop</super><private>false</private><indexed-type>none</indexed-type><inst-vars>price manufacturedDate name soledBy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Product class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#soledBy -&gt; Core.Object); add: (#contact -&gt; Core.Number); add: (#address -&gt; Core.String); add: (#price -&gt; Core.Number); add: (#manufacturedDate -&gt; Core.Date); add: (#shopName -&gt; Core.String); yourself)</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="manufacturedDate">manufacturedDate"generated by Daskalos"     ^manufacturedDate</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="manufacturedDate:">manufacturedDate: anObject"generated by Daskalos"     manufacturedDate := (self checkValue: anObject forVariable: #manufacturedDate)</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price">price"generated by Daskalos"     ^price</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price:">price: anObject"generated by Daskalos"     price := (self checkValue: anObject forVariable: #price)</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="soledBy">soledBy"generated by Daskalos"     ^soledBy</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="soledBy:">soledBy: anObject"generated by Daskalos"     soledBy := (self checkValue: anObject forVariable: #soledBy)</body></methods><methods><class-id>Product</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     price := nil.     manufacturedDate := nil.     name := nil.     soledBy := nil.</body></methods><methods><class-id>Product</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="getprice">getprice	| am1 am2 |	am1 := 'Expensive'.	am2 := 'Less Expensive'.	price &gt; 100 ifTrue: [^am1] ifFalse: [^am2]</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName id employees salary </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#salary -&gt; Core.Number); add: (#id -&gt; Core.Number); add: (#lastName -&gt; Core.String); add: (#employees -&gt; Core.Object); add: (#firstName -&gt; Core.String); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="employees:">employees: anObject"generated by Daskalos"     employees := (self checkValue: anObject forVariable: #employees)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary">salary"generated by Daskalos"     ^salary</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary:">salary: anObject"generated by Daskalos"     salary := (self checkValue: anObject forVariable: #salary)</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     id := nil.     employees := nil.     salary := nil.</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="amount_of_soled_products">amount_of_soled_products	^self soledProducts size</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="employees_percent">employees_percent	^(self soledProducts collect: [:x | x price * 10 / 100]) sum asFloat</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="salaryRange">salaryRange	| sm1 sm2 |	sm1 := 'Good'.	sm2 := 'Average'.	salary &gt; 20000 ifTrue: [^sm1] ifFalse: [^sm2]</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="soledProducts">soledProducts	^Product allInstances select: [:x | x soledBy = self]</body></methods><class><name>Customer</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName purchaseDate buying </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Customer class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#purchaseDate -&gt; Core.Date); add: (#buying -&gt; Core.Object); add: (#lastName -&gt; Core.String); add: (#firstName -&gt; Core.String); yourself)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="buying">buying"generated by Daskalos"     ^buying</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="buying:">buying: anObject"generated by Daskalos"     buying := (self checkValue: anObject forVariable: #buying)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purchaseDate">purchaseDate"generated by Daskalos"     ^purchaseDate</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purchaseDate:">purchaseDate: anObject"generated by Daskalos"     purchaseDate := (self checkValue: anObject forVariable: #purchaseDate)</body></methods><methods><class-id>Customer</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     purchaseDate := nil.     buying := nil.</body></methods><do-it>Products select: [: x | x getprice = 'Expensive'].</do-it><do-it>Products select: [: x | x manufacturedDate &gt; '01-APR-2021' asDate].</do-it><do-it>Employees select: [: y | y employees_percent &gt; 6.7].</do-it><do-it>Employees select: [: y | y amount_of_soled_products = 2].</do-it><do-it>Employees select: [: y | y salaryRange = 'Average'].</do-it><do-it>Customers select: [: z | z lastName = 'Rajaram'].</do-it><do-it>Customers select: [: z | z firstName = 'Reena'].</do-it><class><name>Visitor</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName modeOfPayment visits </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Visitor class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstName -&gt; Core.String); add: (#visits -&gt; Core.Object); add: (#lastName -&gt; Core.String); add: (#modeOfPayment -&gt; Core.String); yourself)</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="modeOfPayment">modeOfPayment"generated by Daskalos"     ^modeOfPayment</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="modeOfPayment:">modeOfPayment: anObject"generated by Daskalos"     modeOfPayment := (self checkValue: anObject forVariable: #modeOfPayment)</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="visits">visits"generated by Daskalos"     ^visits</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="visits:">visits: anObject"generated by Daskalos"     visits := (self checkValue: anObject forVariable: #visits)</body></methods><methods><class-id>Visitor</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     modeOfPayment := nil.     visits := nil.</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName id salary workIn showsAround </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#lastName -&gt; Core.String); add: (#showsAround -&gt; Core.Object); add: (#workIn -&gt; Core.Object); add: (#id -&gt; Core.Number); add: (#salary -&gt; Core.Number); add: (#firstName -&gt; Core.String); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary">salary"generated by Daskalos"     ^salary</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary:">salary: anObject"generated by Daskalos"     salary := (self checkValue: anObject forVariable: #salary)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="showsAround">showsAround"generated by Daskalos"     ^showsAround</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="showsAround:">showsAround: anObject"generated by Daskalos"     showsAround := (self checkValue: anObject forVariable: #showsAround)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="workIn">workIn"generated by Daskalos"     ^workIn</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="workIn:">workIn: anObject"generated by Daskalos"     workIn := (self checkValue: anObject forVariable: #workIn)</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     id := nil.     salary := nil.     workIn := nil.     showsAround := nil.</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="salaryRange">salaryRange	| sm1 sm2 |	sm1 := 'Good'.	sm2 := 'Average'.	salary &gt; 20000 ifTrue: [^sm1] ifFalse: [^sm2]</body></methods><class><name>Zoo</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>contact entranceFee address zooName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zoo class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#contact -&gt; Core.Number); add: (#zooName -&gt; Core.String); add: (#address -&gt; Core.String); add: (#entranceFee -&gt; Core.Number); yourself)</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="entranceFee">entranceFee"generated by Daskalos"     ^entranceFee</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="entranceFee:">entranceFee: anObject"generated by Daskalos"     entranceFee := (self checkValue: anObject forVariable: #entranceFee)</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zooName">zooName"generated by Daskalos"     ^zooName</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zooName:">zooName: anObject"generated by Daskalos"     zooName := (self checkValue: anObject forVariable: #zooName)</body></methods><methods><class-id>Zoo</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     contact := nil.     entranceFee := nil.     address := nil.     zooName := nil.</body></methods><class><name>Animal</name><environment>Smalltalk</environment><super>Zoo</super><private>false</private><indexed-type>none</indexed-type><inst-vars>age name animalType </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Animal class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); add: (#age -&gt; Core.Number); add: (#contact -&gt; Core.Number); add: (#animalType -&gt; Core.String); add: (#entranceFee -&gt; Core.Number); add: (#zooName -&gt; Core.String); yourself)</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age">age"generated by Daskalos"     ^age</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age:">age: anObject"generated by Daskalos"     age := (self checkValue: anObject forVariable: #age)</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="animalType">animalType"generated by Daskalos"     ^animalType</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="animalType:">animalType: anObject"generated by Daskalos"     animalType := (self checkValue: anObject forVariable: #animalType)</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Animal</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     age := nil.     name := nil.     animalType := nil.</body></methods><methods><class-id>Animal</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="ageRange">ageRange	| pm1 pm2 |	pm1 := 'Old'.	pm2 := 'Young'.	age &gt; 30 ifTrue: [^pm1] ifFalse: [^pm2]</body></methods><class><name>Housing</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>brand pricePerUnit sizes dep </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Housing class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#pricePerUnit -&gt; Core.Number); add: (#sizes -&gt; Core.String); add: (#dep -&gt; Core.Object); add: (#brand -&gt; Core.String); yourself)</body></methods><comment><class-id>Housing</class-id><body>This class implements instances, which saves information about the rooms.variables: brand,pricePerUnit,sizeMethod: dep</body></comment><methods><class-id>Housing</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="brand">brand"generated by Daskalos"     ^brand</body></methods><methods><class-id>Housing</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="brand:">brand: anObject"generated by Daskalos"     brand := (self checkValue: anObject forVariable: #brand)</body></methods><methods><class-id>Housing</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dep">dep"generated by Daskalos"     ^dep</body></methods><methods><class-id>Housing</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dep:">dep: anObject"generated by Daskalos"     dep := (self checkValue: anObject forVariable: #dep)</body></methods><methods><class-id>Housing</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="pricePerUnit">pricePerUnit"generated by Daskalos"     ^pricePerUnit</body></methods><methods><class-id>Housing</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="pricePerUnit:">pricePerUnit: anObject"generated by Daskalos"     pricePerUnit := (self checkValue: anObject forVariable: #pricePerUnit)</body></methods><methods><class-id>Housing</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sizes">sizes"generated by Daskalos"     ^sizes</body></methods><methods><class-id>Housing</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sizes:">sizes: anObject"generated by Daskalos"     sizes := (self checkValue: anObject forVariable: #sizes)</body></methods><methods><class-id>Housing</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     brand := nil.     pricePerUnit := nil.     sizes := nil.     dep := nil.</body></methods><class><name>HousingManagement</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name contact address email </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>HousingManagement class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); add: (#email -&gt; Core.String); add: (#contact -&gt; Core.Number); yourself)</body></methods><comment><class-id>HousingManagement</class-id><body>This class implements instances, which saves information about the Housing Management and Profile.variables: name,contact,address,email</body></comment><methods><class-id>HousingManagement</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>HousingManagement</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>HousingManagement</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>HousingManagement</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>HousingManagement</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="email">email"generated by Daskalos"     ^email</body></methods><methods><class-id>HousingManagement</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="email:">email: anObject"generated by Daskalos"     email := (self checkValue: anObject forVariable: #email)</body></methods><methods><class-id>HousingManagement</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>HousingManagement</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>HousingManagement</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     contact := nil.     address := nil.     email := nil.</body></methods><class><name>Person</name><environment>Smalltalk</environment><super>HousingManagement</super><private>false</private><indexed-type>none</indexed-type><inst-vars>payment </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Person class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#contact -&gt; Core.Number); add: (#email -&gt; Core.String); add: (#payment -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><comment><class-id>Person</class-id><body>This class implements instances, which saves information about the client profile.variables: payment</body></comment><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="payment">payment"generated by Daskalos"     ^payment</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="payment:">payment: anObject"generated by Daskalos"     payment := (self checkValue: anObject forVariable: #payment)</body></methods><methods><class-id>Person</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     payment := nil.</body></methods><class><name>Apartment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dep1 single duplex </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Apartment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#duplex -&gt; Core.String); add: (#dep1 -&gt; Core.Object); add: (#single -&gt; Core.String); yourself)</body></methods><comment><class-id>Apartment</class-id><body>This class implements instances, which saves information about the apartments.variables: single, duplexMethod: dep1</body></comment><methods><class-id>Apartment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dep1">dep1"generated by Daskalos"     ^dep1</body></methods><methods><class-id>Apartment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dep1:">dep1: anObject"generated by Daskalos"     dep1 := (self checkValue: anObject forVariable: #dep1)</body></methods><methods><class-id>Apartment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duplex">duplex"generated by Daskalos"     ^duplex</body></methods><methods><class-id>Apartment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duplex:">duplex: anObject"generated by Daskalos"     duplex := (self checkValue: anObject forVariable: #duplex)</body></methods><methods><class-id>Apartment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="single">single"generated by Daskalos"     ^single</body></methods><methods><class-id>Apartment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="single:">single: anObject"generated by Daskalos"     single := (self checkValue: anObject forVariable: #single)</body></methods><methods><class-id>Apartment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     dep1 := nil.     single := nil.     duplex := nil.</body></methods><do-it>cs1 := HousingManagement new.cs1 name: 'Oho Hoseing'.cs1 address: 'Prague'.cs1  contact: 773063410.cs1 email: 'ohotore@yahoo.com'.d1 := Apartment new.d1  single: 'one Room shared Bath'.d1 duplex: 'one Room with Kicthen'.d2 := Apartment new.d2 duplex: 'Comtable with Good Bath'.d2 single: 'Comfortable with Wifi and Good Bath'.c1 := Housing new. c1 sizes:  'Big'.  c1 pricePerUnit: 250.  c1 brand: 'H&amp;M Premium'.c2 := Housing new. c2 sizes:  'Small Medium'.  c2 pricePerUnit: 150.   c2 brand:'H&amp;M Economy'.c3 := Housing new. c3 sizes:  'Medium'.  c3 pricePerUnit:100.   c3 brand: 'Small Economy'.c4 := Housing new. c4 sizes:  'Mini Small'.  c4 pricePerUnit: 200.  c4 brand: 'Managing'.HousingSet := Set new.HousingSet add: c1; add: c2; add: c3; add: c4.ApartmentSet := Set new.ApartmentSet add: d1; add: d2.p1 := Person new.p1 contact: 770363410.p1 address: 'Kmakica'.p1 email: 'lohu@gmail.com'.p1 name: 'Lohu'.p1 payment: 'Cash'.p2 := Person new.p2 contact: 776034301.p2 address: 'Valcuhave'.p2 email: 'lisa@yahoomail.com'.p2 name: 'Lisa'.p2 payment: 'creditCard'.p3 := Person new.p3 contact: 775304301.p3 address: 'Prague'.p3 email: 'jane@hotmail.com'.p3 name: 'Jane'.p3 payment: 'creditCard'.p4 := Person new.p4 contact: 775534100.p4 address: 'Ukig'.p4 email: 'john@seznam.com'.p4 name: 'John'.p4 payment: 'Cash'.p5 := Person new.p5 contact: 777734100.p5 address: 'Uyio'.p5 email: 'johnny@outlook.com'.p5 name: 'Johnny'.p5 payment: 'Cash'.p6 := Person new.p6 contact: 776734100.p6 address: 'Prague'.p6 email: 'julie@seznam.com'.p6 name: 'Julie'.p6 payment: 'Cash'.PersonSet := Set new.PersonSet add: p1; add: p2; add: p3; add: p4; add: p5; add: p6.c1 dep: d1.c2 dep: d1.c3 dep: d1.c4 dep: d1.d1 dep1:p1.d2 dep1:p2.</do-it><do-it>Housing removeFromSystem</do-it><do-it>Person removeFromSystem</do-it><do-it>HousingManagement removeFromSystem</do-it><do-it>Apartment removeFromSystem</do-it><class><name>Books</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name author publication_date price </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Books class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#author -&gt; Core.String); add: (#publication_date -&gt; Core.Date); add: (#price -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Books</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="author">author"generated by Daskalos"     ^author</body></methods><methods><class-id>Books</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="author:">author: anObject"generated by Daskalos"     author := (self checkValue: anObject forVariable: #author)</body></methods><methods><class-id>Books</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Books</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Books</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price">price"generated by Daskalos"     ^price</body></methods><methods><class-id>Books</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price:">price: anObject"generated by Daskalos"     price := (self checkValue: anObject forVariable: #price)</body></methods><methods><class-id>Books</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="publication_date">publication_date"generated by Daskalos"     ^publication_date</body></methods><methods><class-id>Books</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="publication_date:">publication_date: anObject"generated by Daskalos"     publication_date := (self checkValue: anObject forVariable: #publication_date)</body></methods><methods><class-id>Books</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     author := nil.     publication_date := nil.     price := nil.</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name id number_of_sales </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#number_of_sales -&gt; Core.Number); add: (#id -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="number_of_sales">number_of_sales"generated by Daskalos"     ^number_of_sales</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="number_of_sales:">number_of_sales: anObject"generated by Daskalos"     number_of_sales := (self checkValue: anObject forVariable: #number_of_sales)</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     id := nil.     number_of_sales := nil.</body></methods><class><name>Client</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name sername bank_account purchase date_of_purchase </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Client class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#sername -&gt; Core.String); add: (#bank_account -&gt; Core.Number); add: (#name -&gt; Core.String); add: (#date_of_purchase -&gt; Core.Date); add: (#purchase -&gt; Core.Set); yourself)</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="bank_account">bank_account"generated by Daskalos"     ^bank_account</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="bank_account:">bank_account: anObject"generated by Daskalos"     bank_account := (self checkValue: anObject forVariable: #bank_account)</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="date_of_purchase">date_of_purchase"generated by Daskalos"     ^date_of_purchase</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="date_of_purchase:">date_of_purchase: anObject"generated by Daskalos"     date_of_purchase := (self checkValue: anObject forVariable: #date_of_purchase)</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purchase">purchase"generated by Daskalos"     ^purchase</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sername">sername"generated by Daskalos"     ^sername</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sername:">sername: anObject"generated by Daskalos"     sername := (self checkValue: anObject forVariable: #sername)</body></methods><methods><class-id>Client</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     sername := nil.     bank_account := nil.     purchase := Set new.     date_of_purchase := nil.</body></methods><do-it>Books removeFromSystem</do-it><do-it>Employee removeFromSystem</do-it><do-it>Client removeFromSystem</do-it><class><name>University</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>universityName address email contact </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>University class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#contact -&gt; Core.Number); add: (#universityName -&gt; Core.String); add: (#email -&gt; Core.String); yourself)</body></methods><comment><class-id>University</class-id><body>This class implements instances, which stores data about University which as a subclass Course</body></comment><methods><class-id>University</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>University</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>University</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>University</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>University</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="email">email"generated by Daskalos"     ^email</body></methods><methods><class-id>University</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="email:">email: anObject"generated by Daskalos"     email := (self checkValue: anObject forVariable: #email)</body></methods><methods><class-id>University</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="universityName">universityName"generated by Daskalos"     ^universityName</body></methods><methods><class-id>University</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="universityName:">universityName: anObject"generated by Daskalos"     universityName := (self checkValue: anObject forVariable: #universityName)</body></methods><methods><class-id>University</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     universityName := nil.     address := nil.     email := nil.     contact := nil.</body></methods><class><name>Course</name><environment>Smalltalk</environment><super>University</super><private>false</private><indexed-type>none</indexed-type><inst-vars>type name length fee </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Course class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#fee -&gt; Core.Number); add: (#type -&gt; Core.String); add: (#universityName -&gt; Core.String); add: (#contact -&gt; Core.Number); add: (#length -&gt; Core.Number); add: (#address -&gt; Core.String); add: (#email -&gt; Core.String); yourself)</body></methods><comment><class-id>Course</class-id><body>This class implements instances, which stores data about Course offered in University</body></comment><methods><class-id>Course</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="fee">fee"generated by Daskalos"     ^fee</body></methods><methods><class-id>Course</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="fee:">fee: anObject"generated by Daskalos"     fee := (self checkValue: anObject forVariable: #fee)</body></methods><methods><class-id>Course</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="length">length"generated by Daskalos"     ^length</body></methods><methods><class-id>Course</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="length:">length: anObject"generated by Daskalos"     length := (self checkValue: anObject forVariable: #length)</body></methods><methods><class-id>Course</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Course</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Course</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Course</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Course</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     type := nil.     name := nil.     length := nil.     fee := nil.</body></methods><methods><class-id>Course</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="getfees">getfees	| fm1 fm2 |	fm1 := 'Expensive'.	fm2 := 'Cheap'.	fee &gt; 21000 ifTrue: [^fm1] ifFalse: [^fm2]</body></methods><class><name>Teacher</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName surName id experience salary teach </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Teacher class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#surName -&gt; Core.String); add: (#firstName -&gt; Core.String); add: (#id -&gt; Core.Number); add: (#salary -&gt; Core.Number); add: (#experience -&gt; Core.Number); add: (#teach -&gt; Core.Object); yourself)</body></methods><comment><class-id>Teacher</class-id><body>This class implements instances, which stores data about Teachers</body></comment><methods><class-id>Teacher</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="experience">experience"generated by Daskalos"     ^experience</body></methods><methods><class-id>Teacher</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="experience:">experience: anObject"generated by Daskalos"     experience := (self checkValue: anObject forVariable: #experience)</body></methods><methods><class-id>Teacher</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Teacher</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Teacher</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Teacher</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Teacher</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary">salary"generated by Daskalos"     ^salary</body></methods><methods><class-id>Teacher</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary:">salary: anObject"generated by Daskalos"     salary := (self checkValue: anObject forVariable: #salary)</body></methods><methods><class-id>Teacher</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surName">surName"generated by Daskalos"     ^surName</body></methods><methods><class-id>Teacher</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surName:">surName: anObject"generated by Daskalos"     surName := (self checkValue: anObject forVariable: #surName)</body></methods><methods><class-id>Teacher</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="teach">teach"generated by Daskalos"     ^teach</body></methods><methods><class-id>Teacher</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="teach:">teach: anObject"generated by Daskalos"     teach := (self checkValue: anObject forVariable: #teach)</body></methods><methods><class-id>Teacher</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     surName := nil.     id := nil.     experience := nil.     salary := nil.     teach := nil.</body></methods><methods><class-id>Teacher</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="salaryRange">salaryRange	| sm1 sm2 |	sm1 := 'Good'.	sm2 := 'Average'.	salary &gt; 20000 ifTrue: [^sm1] ifFalse: [^sm2]</body></methods><methods><class-id>Teacher</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="training">training	| tm1 tm2 |	tm1 := 'No Training Needed'.	tm2 := 'Training Needed'.	experience &gt; 2 ifTrue: [^tm1] ifFalse: [^tm2]</body></methods><class><name>Student</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName surName id bankDetails learn schoolScores </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Student class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#schoolScores -&gt; Core.Number); add: (#surName -&gt; Core.String); add: (#firstName -&gt; Core.String); add: (#id -&gt; Core.Number); add: (#learn -&gt; Core.Object); add: (#bankDetails -&gt; Core.String); yourself)</body></methods><comment><class-id>Student</class-id><body>This class implements instances, which stores data about Students</body></comment><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="bankDetails">bankDetails"generated by Daskalos"     ^bankDetails</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="bankDetails:">bankDetails: anObject"generated by Daskalos"     bankDetails := (self checkValue: anObject forVariable: #bankDetails)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="learn">learn"generated by Daskalos"     ^learn</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="learn:">learn: anObject"generated by Daskalos"     learn := (self checkValue: anObject forVariable: #learn)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="schoolScores">schoolScores"generated by Daskalos"     ^schoolScores</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="schoolScores:">schoolScores: anObject"generated by Daskalos"     schoolScores := (self checkValue: anObject forVariable: #schoolScores)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surName">surName"generated by Daskalos"     ^surName</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surName:">surName: anObject"generated by Daskalos"     surName := (self checkValue: anObject forVariable: #surName)</body></methods><methods><class-id>Student</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     surName := nil.     id := nil.     bankDetails := nil.     learn := nil.     schoolScores := nil.</body></methods><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="previousScores">previousScores	| pm1 pm2 |	pm1 := 'Good'.	pm2 := 'Average'.	schoolScores &gt; 50 ifTrue: [^pm1] ifFalse: [^pm2]</body></methods><class><name>University</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>universityName address email contact </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>University class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#contact -&gt; Core.Number); add: (#universityName -&gt; Core.String); add: (#email -&gt; Core.String); yourself)</body></methods><comment><class-id>University</class-id><body>This class implements instances, which stores data about University which as a subclass Course</body></comment><methods><class-id>University</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>University</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>University</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>University</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>University</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="email">email"generated by Daskalos"     ^email</body></methods><methods><class-id>University</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="email:">email: anObject"generated by Daskalos"     email := (self checkValue: anObject forVariable: #email)</body></methods><methods><class-id>University</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="universityName">universityName"generated by Daskalos"     ^universityName</body></methods><methods><class-id>University</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="universityName:">universityName: anObject"generated by Daskalos"     universityName := (self checkValue: anObject forVariable: #universityName)</body></methods><methods><class-id>University</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     universityName := nil.     address := nil.     email := nil.     contact := nil.</body></methods><class><name>Course</name><environment>Smalltalk</environment><super>University</super><private>false</private><indexed-type>none</indexed-type><inst-vars>type name length fee </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Course class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#fee -&gt; Core.Number); add: (#type -&gt; Core.String); add: (#universityName -&gt; Core.String); add: (#contact -&gt; Core.Number); add: (#length -&gt; Core.Number); add: (#address -&gt; Core.String); add: (#email -&gt; Core.String); yourself)</body></methods><comment><class-id>Course</class-id><body>This class implements instances, which stores data about Course offered in University</body></comment><methods><class-id>Course</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="fee">fee"generated by Daskalos"     ^fee</body></methods><methods><class-id>Course</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="fee:">fee: anObject"generated by Daskalos"     fee := (self checkValue: anObject forVariable: #fee)</body></methods><methods><class-id>Course</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="length">length"generated by Daskalos"     ^length</body></methods><methods><class-id>Course</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="length:">length: anObject"generated by Daskalos"     length := (self checkValue: anObject forVariable: #length)</body></methods><methods><class-id>Course</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Course</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Course</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Course</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Course</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     type := nil.     name := nil.     length := nil.     fee := nil.</body></methods><methods><class-id>Course</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="getfees">getfees	| fm1 fm2 |	fm1 := 'Expensive'.	fm2 := 'Cheap'.	fee &gt; 21000 ifTrue: [^fm1] ifFalse: [^fm2]</body></methods><class><name>Teacher</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName surName id experience salary teach </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Teacher class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#surName -&gt; Core.String); add: (#firstName -&gt; Core.String); add: (#id -&gt; Core.Number); add: (#salary -&gt; Core.Number); add: (#experience -&gt; Core.Number); add: (#teach -&gt; Core.Object); yourself)</body></methods><comment><class-id>Teacher</class-id><body>This class implements instances, which stores data about Teachers</body></comment><methods><class-id>Teacher</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="experience">experience"generated by Daskalos"     ^experience</body></methods><methods><class-id>Teacher</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="experience:">experience: anObject"generated by Daskalos"     experience := (self checkValue: anObject forVariable: #experience)</body></methods><methods><class-id>Teacher</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Teacher</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Teacher</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Teacher</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Teacher</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary">salary"generated by Daskalos"     ^salary</body></methods><methods><class-id>Teacher</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary:">salary: anObject"generated by Daskalos"     salary := (self checkValue: anObject forVariable: #salary)</body></methods><methods><class-id>Teacher</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surName">surName"generated by Daskalos"     ^surName</body></methods><methods><class-id>Teacher</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surName:">surName: anObject"generated by Daskalos"     surName := (self checkValue: anObject forVariable: #surName)</body></methods><methods><class-id>Teacher</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="teach">teach"generated by Daskalos"     ^teach</body></methods><methods><class-id>Teacher</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="teach:">teach: anObject"generated by Daskalos"     teach := (self checkValue: anObject forVariable: #teach)</body></methods><methods><class-id>Teacher</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     surName := nil.     id := nil.     experience := nil.     salary := nil.     teach := nil.</body></methods><methods><class-id>Teacher</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="salaryRange">salaryRange	| sm1 sm2 |	sm1 := 'Good'.	sm2 := 'Average'.	salary &gt; 20000 ifTrue: [^sm1] ifFalse: [^sm2]</body></methods><methods><class-id>Teacher</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="training">training	| tm1 tm2 |	tm1 := 'No Training Needed'.	tm2 := 'Training Needed'.	experience &gt; 2 ifTrue: [^tm1] ifFalse: [^tm2]</body></methods><class><name>Student</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName surName id bankDetails learn schoolScores </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Student class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#schoolScores -&gt; Core.Number); add: (#surName -&gt; Core.String); add: (#firstName -&gt; Core.String); add: (#id -&gt; Core.Number); add: (#learn -&gt; Core.Object); add: (#bankDetails -&gt; Core.String); yourself)</body></methods><comment><class-id>Student</class-id><body>This class implements instances, which stores data about Students</body></comment><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="bankDetails">bankDetails"generated by Daskalos"     ^bankDetails</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="bankDetails:">bankDetails: anObject"generated by Daskalos"     bankDetails := (self checkValue: anObject forVariable: #bankDetails)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="learn">learn"generated by Daskalos"     ^learn</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="learn:">learn: anObject"generated by Daskalos"     learn := (self checkValue: anObject forVariable: #learn)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="schoolScores">schoolScores"generated by Daskalos"     ^schoolScores</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="schoolScores:">schoolScores: anObject"generated by Daskalos"     schoolScores := (self checkValue: anObject forVariable: #schoolScores)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surName">surName"generated by Daskalos"     ^surName</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surName:">surName: anObject"generated by Daskalos"     surName := (self checkValue: anObject forVariable: #surName)</body></methods><methods><class-id>Student</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     surName := nil.     id := nil.     bankDetails := nil.     learn := nil.     schoolScores := nil.</body></methods><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="previousScores">previousScores	| pm1 pm2 |	pm1 := 'Good'.	pm2 := 'Average'.	schoolScores &gt; 50 ifTrue: [^pm1] ifFalse: [^pm2]</body></methods><do-it>Courses select: [: x | x getfees = 'Expensive'].</do-it><do-it>Courses select: [: x | x type = 'Masters'].</do-it><do-it>Students select: [: y | y previousScores = 'Average'].</do-it><do-it>Students select: [: y | y surName = 'Gates'].</do-it><do-it>Teachers select: [: z | z salaryRange = 'Good'].</do-it><do-it>Teachers select: [: z | z training = 'Training Needed'].</do-it><class><name>Airline</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name contact headquarters </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Airline class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#contact -&gt; Core.Number); add: (#headquarters -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><comment><class-id>Airline</class-id><body>This Airline Class has instances such as name,address and headquarters</body></comment><methods><class-id>Airline</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Airline</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Airline</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="headquarters">headquarters"generated by Daskalos"     ^headquarters</body></methods><methods><class-id>Airline</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="headquarters:">headquarters: anObject"generated by Daskalos"     headquarters := (self checkValue: anObject forVariable: #headquarters)</body></methods><methods><class-id>Airline</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Airline</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Airline</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     contact := nil.     headquarters := nil.</body></methods><class><name>Ticket</name><environment>Smalltalk</environment><super>Airline</super><private>false</private><indexed-type>none</indexed-type><inst-vars>arrival dateOfTravel departure ticketId </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Ticket class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#dateOfTravel -&gt; Core.Date); add: (#departure -&gt; Core.String); add: (#headquarters -&gt; Core.String); add: (#contact -&gt; Core.Number); add: (#arrival -&gt; Core.String); add: (#ticketId -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><comment><class-id>Ticket</class-id><body>This Ticket class has instances such as arrival, depature, date of travel and the ticket id.</body></comment><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="arrival">arrival"generated by Daskalos"     ^arrival</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="arrival:">arrival: anObject"generated by Daskalos"     arrival := (self checkValue: anObject forVariable: #arrival)</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dateOfTravel">dateOfTravel"generated by Daskalos"     ^dateOfTravel</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dateOfTravel:">dateOfTravel: anObject"generated by Daskalos"     dateOfTravel := (self checkValue: anObject forVariable: #dateOfTravel)</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="departure">departure"generated by Daskalos"     ^departure</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="departure:">departure: anObject"generated by Daskalos"     departure := (self checkValue: anObject forVariable: #departure)</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="ticketId">ticketId"generated by Daskalos"     ^ticketId</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="ticketId:">ticketId: anObject"generated by Daskalos"     ticketId := (self checkValue: anObject forVariable: #ticketId)</body></methods><methods><class-id>Ticket</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     arrival := nil.     dateOfTravel := nil.     departure := nil.     ticketId := nil.</body></methods><class><name>Passenger</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName idType purposeOfTravel buy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Passenger class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#purposeOfTravel -&gt; Core.String); add: (#buy -&gt; Core.Object); add: (#idType -&gt; Core.String); add: (#firstName -&gt; Core.String); add: (#lastName -&gt; Core.String); yourself)</body></methods><comment><class-id>Passenger</class-id><body>This Passenger Class has instances such first name,last name, id type and purpose of travel</body></comment><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="buy">buy"generated by Daskalos"     ^buy</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="buy:">buy: anObject"generated by Daskalos"     buy := (self checkValue: anObject forVariable: #buy)</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="idType">idType"generated by Daskalos"     ^idType</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="idType:">idType: anObject"generated by Daskalos"     idType := (self checkValue: anObject forVariable: #idType)</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purposeOfTravel">purposeOfTravel"generated by Daskalos"     ^purposeOfTravel</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purposeOfTravel:">purposeOfTravel: anObject"generated by Daskalos"     purposeOfTravel := (self checkValue: anObject forVariable: #purposeOfTravel)</body></methods><methods><class-id>Passenger</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     idType := nil.     purposeOfTravel := nil.     buy := nil.</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName id jobPosition salary workIn worksFor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#lastName -&gt; Core.String); add: (#worksFor -&gt; Core.Object); add: (#id -&gt; Core.Number); add: (#workIn -&gt; Core.Object); add: (#firstName -&gt; Core.String); add: (#salary -&gt; Core.Number); add: (#jobPosition -&gt; Core.String); yourself)</body></methods><comment><class-id>Employee</class-id><body>This Employee Class has instances such as first name,last name, id, job position  and salary</body></comment><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jobPosition">jobPosition"generated by Daskalos"     ^jobPosition</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jobPosition:">jobPosition: anObject"generated by Daskalos"     jobPosition := (self checkValue: anObject forVariable: #jobPosition)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary">salary"generated by Daskalos"     ^salary</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary:">salary: anObject"generated by Daskalos"     salary := (self checkValue: anObject forVariable: #salary)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="workIn">workIn"generated by Daskalos"     ^workIn</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="workIn:">workIn: anObject"generated by Daskalos"     workIn := (self checkValue: anObject forVariable: #workIn)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="worksFor">worksFor"generated by Daskalos"     ^worksFor</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="worksFor:">worksFor: anObject"generated by Daskalos"     worksFor := (self checkValue: anObject forVariable: #worksFor)</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     id := nil.     jobPosition := nil.     salary := nil.     workIn := nil.     worksFor := nil.</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="salaryRange">salaryRange	| sm1 sm2 |	sm1 := 'Good'.	sm2 := 'Average'.	salary &gt; 50000 ifTrue: [^sm1] ifFalse: [^sm2]</body></methods><class><name>Passenger</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName idType purposeOfTravel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Passenger class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#purposeOfTravel -&gt; Core.String); add: (#idType -&gt; Core.String); add: (#lastName -&gt; Core.String); add: (#firstName -&gt; Core.String); yourself)</body></methods><remove-selector><class-id>Passenger</class-id> <selector>buy</selector></remove-selector><remove-selector><class-id>Passenger</class-id> <selector>buy:</selector></remove-selector><methods><class-id>Passenger</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     idType := nil.     purposeOfTravel := nil.</body></methods><class><name>Passenger</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName idType purposeOfTravel buy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Passenger class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#purposeOfTravel -&gt; Core.String); add: (#buy -&gt; Core.Object); add: (#idType -&gt; Core.String); add: (#lastName -&gt; Core.String); add: (#firstName -&gt; Core.String); yourself)</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="buy:">buy: anObject"generated by Daskalos"     buy := (self checkValue: anObject forVariable: #buy)</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="buy">buy"generated by Daskalos"     ^buy</body></methods><methods><class-id>Passenger</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     idType := nil.     purposeOfTravel := nil.     buy := nil.</body></methods><do-it>Employees := Set new.Passengers := Set new.Tickets := Set new.Airlines := Set new."________Airliness___________"a1 := Airline new.a1 name: 'ABCD Airlines'.a1 contact: 79878188. a1 headquarters: 'San Fransisco'."________Employees___________"e1 := Employee new.e1 firstName: 'Micheal'.e1 lastName: 'Jason'. e1 id: 001.e1 salary: 120000.e1 jobPosition: 'Air Hosters'.e2 := Employee new.e2 firstName: 'Tom'.e2 lastName: 'Athreya'. e2 id: 002.e2 salary: 50000.e2 jobPosition: 'Manager'.e3 := Employee new.e3 firstName: 'Jerry'.e3 lastName: 'Mad'. e3 id: 003.e3 salary: 150000.e3 jobPosition: 'Pilot'.e4 := Employee new.e4 firstName: 'Jonathon'.e4 lastName: 'Maggi'. e4 id: 004.e4 salary: 60000.e4 jobPosition: 'Manager'.e5 := Employee new.e5 firstName: 'Hannah'.e5 lastName: 'Perousia'. e5 id: 005.e5 salary: 150000.e5 jobPosition: 'Air Hosters'."________Passengers___________"p1 := Passenger new.p1 firstName: 'Micheal'.p1 lastName: 'Jason'. p1 idType: 'Passport'.p1 purposeOfTravel: 'Vacation'.p2 := Passenger new.p2 firstName: 'Muthasir'.p2 lastName: 'Sam'. p2 idType: 'Permenant Residence Card'.p2 purposeOfTravel: 'Business'.p3 := Passenger new.p3 firstName: 'Badri'.p3 lastName: 'Janathan'. p3 idType: 'Passport'.p3 purposeOfTravel: 'Study'.p4 := Passenger new.p4 firstName: 'Josua'.p4 lastName: 'Samuel'. p4 idType: 'Driving License'.p4 purposeOfTravel: 'Vacation'."________Tickets___________"t1 := Ticket new.t1 name: 'ABCD Airlines'.t1 contact: 79878188. t1 headquarters: 'San Fransisco'.t1 departure: 'New York'.t1 arrival: 'Praha'.t1 dateOfTravel: '15-AUG-2022' asDate.t1 ticketId: 112233.t2 := Ticket new.t2 name: 'ABCD Airlines'.t2 contact: 79878188. t2 headquarters: 'San Fransisco'.t2 departure: 'Greenland'.t2 arrival: 'Dubai'.t2 dateOfTravel: '21-SEP-2022' asDate.t2 ticketId: 223344.t3 := Ticket new.t3 name: 'ABCD Airlines'.t3 contact: 79878188. t3 headquarters: 'San Fransisco'.t3 departure: 'UK'.t3 arrival: 'Iceland'.t3 dateOfTravel: '21-FEB-2022' asDate.t3 ticketId: 14566.t4 := Ticket new.t4 name: 'ABCD Airlines'.t4 contact: 79878188. t4 headquarters: 'San Fransisco'.t4 departure: 'India'.t4 arrival: 'Germany'.t4 dateOfTravel: '20-DEC-2022' asDate.t4 ticketId: 893672.Airlines add: a1.Employees add: e1; add: e2; add: e3; add: e4; add: e5. Passengers add: p1; add: p2; add: p3; add: p4.Tickets add:t1; add: t2; add: t3; add: t4.e1 workIn: a1.e2 workIn: a1.e3 workIn: a1.e4 workIn: a1.e5 workIn: a1.e1 worksFor: p1.e2 worksFor: p2.e3 worksFor: p3.e4 worksFor: p4.e5 worksFor: p1.p1 buy: t1.p2 buy: t2.p3 buy: t3.p4 buy: t4.</do-it><do-it>Employees select: [: z | z salaryRange = 'Average'].</do-it><do-it>Employees select: [: z | z jobPosition = 'Air Hosters'].</do-it><do-it>Tickets select: [: x | x arrival = 'Praha'].</do-it><do-it>Passengers select: [: z | z purposeOfTravel = 'Vacation'].</do-it><class><name>PhoneStore</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name contact address </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>PhoneStore class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#contact -&gt; Core.Number); add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>PhoneStore</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>PhoneStore</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>PhoneStore</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>PhoneStore</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>PhoneStore</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>PhoneStore</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>PhoneStore</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     contact := nil.     address := nil.</body></methods><class><name>ModelPhone</name><environment>Smalltalk</environment><super>PhoneStore</super><private>false</private><indexed-type>none</indexed-type><inst-vars>brandName brandCamera brandBattery soledBy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>ModelPhone class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#address -&gt; Core.String); add: (#contact -&gt; Core.Number); add: (#brandBattery -&gt; Core.String); add: (#brandCamera -&gt; Core.String); add: (#soledBy -&gt; Core.Object); add: (#brandName -&gt; Core.String); yourself)</body></methods><methods><class-id>ModelPhone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="brandBattery">brandBattery"generated by Daskalos"     ^brandBattery</body></methods><methods><class-id>ModelPhone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="brandBattery:">brandBattery: anObject"generated by Daskalos"     brandBattery := (self checkValue: anObject forVariable: #brandBattery)</body></methods><methods><class-id>ModelPhone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="brandCamera">brandCamera"generated by Daskalos"     ^brandCamera</body></methods><methods><class-id>ModelPhone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="brandCamera:">brandCamera: anObject"generated by Daskalos"     brandCamera := (self checkValue: anObject forVariable: #brandCamera)</body></methods><methods><class-id>ModelPhone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="brandName">brandName"generated by Daskalos"     ^brandName</body></methods><methods><class-id>ModelPhone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="brandName:">brandName: anObject"generated by Daskalos"     brandName := (self checkValue: anObject forVariable: #brandName)</body></methods><methods><class-id>ModelPhone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="soledBy">soledBy"generated by Daskalos"     ^soledBy</body></methods><methods><class-id>ModelPhone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="soledBy:">soledBy: anObject"generated by Daskalos"     soledBy := (self checkValue: anObject forVariable: #soledBy)</body></methods><methods><class-id>ModelPhone</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     brandName := nil.     brandCamera := nil.     brandBattery := nil.     soledBy := nil.</body></methods><class><name>Customer</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName surName age bought </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Customer class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstName -&gt; Core.String); add: (#age -&gt; Core.Number); add: (#surName -&gt; Core.String); add: (#bought -&gt; Core.Object); yourself)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age">age"generated by Daskalos"     ^age</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age:">age: anObject"generated by Daskalos"     age := (self checkValue: anObject forVariable: #age)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="bought">bought"generated by Daskalos"     ^bought</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="bought:">bought: anObject"generated by Daskalos"     bought := (self checkValue: anObject forVariable: #bought)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surName">surName"generated by Daskalos"     ^surName</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surName:">surName: anObject"generated by Daskalos"     surName := (self checkValue: anObject forVariable: #surName)</body></methods><methods><class-id>Customer</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     surName := nil.     age := nil.     bought := nil.</body></methods><methods><class-id>Customer</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="getage">getage	| am1 am2 |	am1 := 'Old'.	am2 := 'Young'.	age &gt; 40 ifTrue: [^am1] ifFalse: [^am2]</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName surName id salary soledTo </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstName -&gt; Core.String); add: (#id -&gt; Core.Number); add: (#surName -&gt; Core.String); add: (#salary -&gt; Core.Number); add: (#soledTo -&gt; Core.Object); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary">salary"generated by Daskalos"     ^salary</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary:">salary: anObject"generated by Daskalos"     salary := (self checkValue: anObject forVariable: #salary)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="soledTo">soledTo"generated by Daskalos"     ^soledTo</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="soledTo:">soledTo: anObject"generated by Daskalos"     soledTo := (self checkValue: anObject forVariable: #soledTo)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surName">surName"generated by Daskalos"     ^surName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surName:">surName: anObject"generated by Daskalos"     surName := (self checkValue: anObject forVariable: #surName)</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     surName := nil.     id := nil.     salary := nil.     soledTo := nil.</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="salaryRange">salaryRange	| sm1 sm2 |	sm1 := 'Good'.	sm2 := 'Average'.	salary &gt; 20000 ifTrue: [^sm1] ifFalse: [^sm2]</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="soledProducts">soledProducts	^ModelPhone allInstances select: [:x | x soledBy = self]</body></methods><do-it>ModelPhone removeFromSystem</do-it><do-it>PhoneStore removeFromSystem</do-it><do-it>Customer removeFromSystem</do-it><do-it>Employee removeFromSystem</do-it><class><name>Auto</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>typ rokVyroby spz vlastnik </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Auto class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#spz -&gt; Core.String); add: (#vlastnik -&gt; Core.Object); add: (#typ -&gt; Core.String); add: (#rokVyroby -&gt; Core.Number); yourself)</body></methods><comment><class-id>Auto</class-id><body>Toto je trida, ktera implementuje objekty typu Auto</body></comment><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rokVyroby">rokVyroby"generated by Daskalos"     ^rokVyroby</body></methods><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rokVyroby:">rokVyroby: anObject"generated by Daskalos"     rokVyroby := (self checkValue: anObject forVariable: #rokVyroby)</body></methods><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="spz">spz"generated by Daskalos"     ^spz</body></methods><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="spz:">spz: anObject"generated by Daskalos"     spz := (self checkValue: anObject forVariable: #spz)</body></methods><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="typ">typ"generated by Daskalos"     ^typ</body></methods><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="typ:">typ: anObject"generated by Daskalos"     typ := (self checkValue: anObject forVariable: #typ)</body></methods><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vlastnik">vlastnik"generated by Daskalos"     ^vlastnik</body></methods><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vlastnik:">vlastnik: anObject"generated by Daskalos"     vlastnik := (self checkValue: anObject forVariable: #vlastnik)</body></methods><methods><class-id>Auto</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     typ := nil.     rokVyroby := nil.     spz := nil.     vlastnik := nil.</body></methods><methods><class-id>Auto</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="garaz">garaz	^vlastnik adresa</body></methods><methods><class-id>Auto</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="musiSTK">musiSTK	^self stari &gt;= 5</body></methods><methods><class-id>Auto</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="stari">stari	^Date today year - rokVyroby</body></methods><class><name>Osoba</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno adresa </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Osoba class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#adresa -&gt; Core.String); add: (#jmeno -&gt; Core.String); yourself)</body></methods><comment><class-id>Osoba</class-id><body>Toto je trida, ktera implementuje objekty typu Osoba</body></comment><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa">adresa"generated by Daskalos"     ^adresa</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa:">adresa: anObject"generated by Daskalos"     adresa := (self checkValue: anObject forVariable: #adresa)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Osoba</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     adresa := nil.</body></methods><do-it>Auto removeFromSystem</do-it><do-it>Osoba removeFromSystem</do-it><class><name>Person</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname surname address birthdate </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Person class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#surname -&gt; Core.String); add: (#address -&gt; Core.String); add: (#birthdate -&gt; Core.Date); add: (#firstname -&gt; Core.String); yourself)</body></methods><comment><class-id>Person</class-id><body>Instances of this class stores info about persons.Each person knows its name (firstname &amp; surname), address and birthdate.Attribute of each person has also age, but this attribute is made by method.</body></comment><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #address. ^nil].     address := anObject</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="birthdate">birthdate"generated by Daskalos"     ^birthdate</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="birthdate:">birthdate: anObject"generated by Daskalos"     (anObject isKindOf: Date) ifFalse: [self class typeErrorFor: #birthdate. ^nil].     birthdate := anObject</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname">firstname"generated by Daskalos"     ^firstname</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname:">firstname: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #firstname. ^nil].     firstname := anObject</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surname">surname"generated by Daskalos"     ^surname</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surname:">surname: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #surname. ^nil].     surname := anObject</body></methods><methods><class-id>Person</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     surname := nil.     address := nil.     birthdate := nil.</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="age">agebirthdate isNil	ifTrue: [^nil]	ifFalse: [^((Date today subtractDate: birthdate) / 365.2422) truncated]</body></methods><class><name>Doctor</name><environment>Smalltalk</environment><super>Person</super><private>false</private><indexed-type>none</indexed-type><inst-vars>specialization visitations </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Doctor class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#surname -&gt; Core.String); add: (#address -&gt; Core.String); add: (#firstname -&gt; Core.String); add: (#visitations -&gt; Core.Set); add: (#birthdate -&gt; Core.Date); add: (#specialization -&gt; Core.String); yourself)</body></methods><comment><class-id>Doctor</class-id><body>Concrete subclass of class Person, which add specific behavior for persons being medical doctors. note that a doctor may be a patient as well.</body></comment><methods><class-id>Doctor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="specialization">specialization"generated by Daskalos"     ^specialization</body></methods><methods><class-id>Doctor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="specialization:">specialization: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #specialization. ^nil].     specialization := anObject</body></methods><methods><class-id>Doctor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="visitations">visitations"generated by Daskalos"     ^visitations</body></methods><methods><class-id>Doctor</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     specialization := nil.     visitations := Set new.</body></methods><class><name>Visitation</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>doctor patient visitDate diagnosis nextVisitDate </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Visitation class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#doctor -&gt; Core.Object); add: (#nextVisitDate -&gt; Core.Date); add: (#diagnosis -&gt; Core.String); add: (#visitDate -&gt; Core.Date); add: (#patient -&gt; Core.Object); yourself)</body></methods><comment><class-id>Visitation</class-id><body>This is class having instances, which stores data about visitation of some person at some doctor.</body></comment><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="diagnosis">diagnosis"generated by Daskalos"     ^diagnosis</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="diagnosis:">diagnosis: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #diagnosis. ^nil].     diagnosis := anObject</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="doctor">doctor"generated by Daskalos"     ^doctor</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="doctor:">doctor: anObject"generated by Daskalos"     doctor := anObject</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nextVisitDate">nextVisitDate"generated by Daskalos"     ^nextVisitDate</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nextVisitDate:">nextVisitDate: anObject"generated by Daskalos"     (anObject isKindOf: Date) ifFalse: [self class typeErrorFor: #nextVisitDate. ^nil].     nextVisitDate := anObject</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="patient">patient"generated by Daskalos"     ^patient</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="patient:">patient: anObject"generated by Daskalos"     patient := anObject</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="visitDate">visitDate"generated by Daskalos"     ^visitDate</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="visitDate:">visitDate: anObject"generated by Daskalos"     (anObject isKindOf: Date) ifFalse: [self class typeErrorFor: #visitDate. ^nil].     visitDate := anObject</body></methods><methods><class-id>Visitation</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     doctor := nil.     patient := nil.     visitDate := nil.     diagnosis := nil.     nextVisitDate := nil.</body></methods><class><name>Bolt</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Employee</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Customer</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><do-it>Bolt removeFromSystem</do-it><do-it>Employee removeFromSystem</do-it><do-it>Customer removeFromSystem</do-it><class><name>BoltFood</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><do-it>BoltFood renameTo: #Bolt</do-it><do-it>Doctor removeFromSystem</do-it><do-it>Person removeFromSystem</do-it><do-it>Visitation removeFromSystem</do-it><class><name>PhoneStore</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name contact address </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>PhoneStore class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#contact -&gt; Core.Number); add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>PhoneStore</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>PhoneStore</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>PhoneStore</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>PhoneStore</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>PhoneStore</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>PhoneStore</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>PhoneStore</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     contact := nil.     address := nil.</body></methods><class><name>ModelPhone</name><environment>Smalltalk</environment><super>PhoneStore</super><private>false</private><indexed-type>none</indexed-type><inst-vars>brandName brandCamera brandBattery soledBy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>ModelPhone class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#address -&gt; Core.String); add: (#contact -&gt; Core.Number); add: (#brandBattery -&gt; Core.String); add: (#brandCamera -&gt; Core.String); add: (#soledBy -&gt; Core.Object); add: (#brandName -&gt; Core.String); yourself)</body></methods><methods><class-id>ModelPhone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="brandBattery">brandBattery"generated by Daskalos"     ^brandBattery</body></methods><methods><class-id>ModelPhone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="brandBattery:">brandBattery: anObject"generated by Daskalos"     brandBattery := (self checkValue: anObject forVariable: #brandBattery)</body></methods><methods><class-id>ModelPhone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="brandCamera">brandCamera"generated by Daskalos"     ^brandCamera</body></methods><methods><class-id>ModelPhone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="brandCamera:">brandCamera: anObject"generated by Daskalos"     brandCamera := (self checkValue: anObject forVariable: #brandCamera)</body></methods><methods><class-id>ModelPhone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="brandName">brandName"generated by Daskalos"     ^brandName</body></methods><methods><class-id>ModelPhone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="brandName:">brandName: anObject"generated by Daskalos"     brandName := (self checkValue: anObject forVariable: #brandName)</body></methods><methods><class-id>ModelPhone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="soledBy">soledBy"generated by Daskalos"     ^soledBy</body></methods><methods><class-id>ModelPhone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="soledBy:">soledBy: anObject"generated by Daskalos"     soledBy := (self checkValue: anObject forVariable: #soledBy)</body></methods><methods><class-id>ModelPhone</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     brandName := nil.     brandCamera := nil.     brandBattery := nil.     soledBy := nil.</body></methods><class><name>Customer</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName surName age bought </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Customer class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstName -&gt; Core.String); add: (#age -&gt; Core.Number); add: (#surName -&gt; Core.String); add: (#bought -&gt; Core.Object); yourself)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age">age"generated by Daskalos"     ^age</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age:">age: anObject"generated by Daskalos"     age := (self checkValue: anObject forVariable: #age)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="bought">bought"generated by Daskalos"     ^bought</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="bought:">bought: anObject"generated by Daskalos"     bought := (self checkValue: anObject forVariable: #bought)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surName">surName"generated by Daskalos"     ^surName</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surName:">surName: anObject"generated by Daskalos"     surName := (self checkValue: anObject forVariable: #surName)</body></methods><methods><class-id>Customer</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     surName := nil.     age := nil.     bought := nil.</body></methods><methods><class-id>Customer</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="getage">getage	| am1 am2 |	am1 := 'Old'.	am2 := 'Young'.	age &gt; 40 ifTrue: [^am1] ifFalse: [^am2]</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName surName id salary soledTo </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstName -&gt; Core.String); add: (#id -&gt; Core.Number); add: (#surName -&gt; Core.String); add: (#salary -&gt; Core.Number); add: (#soledTo -&gt; Core.Object); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary">salary"generated by Daskalos"     ^salary</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary:">salary: anObject"generated by Daskalos"     salary := (self checkValue: anObject forVariable: #salary)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="soledTo">soledTo"generated by Daskalos"     ^soledTo</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="soledTo:">soledTo: anObject"generated by Daskalos"     soledTo := (self checkValue: anObject forVariable: #soledTo)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surName">surName"generated by Daskalos"     ^surName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surName:">surName: anObject"generated by Daskalos"     surName := (self checkValue: anObject forVariable: #surName)</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     surName := nil.     id := nil.     salary := nil.     soledTo := nil.</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="salaryRange">salaryRange	| sm1 sm2 |	sm1 := 'Good'.	sm2 := 'Average'.	salary &gt; 20000 ifTrue: [^sm1] ifFalse: [^sm2]</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="soledProducts">soledProducts	^ModelPhone allInstances select: [:x | x soledBy = self]</body></methods><class><name>Employees</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Restaurants</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Customers</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Bolt</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Bolt class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Bolt</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Bolt</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Bolt</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Bolt</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name contact </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Bolt class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#contact -&gt; Core.Number); yourself)</body></methods><methods><class-id>Bolt</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Bolt</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Bolt</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     contact := nil.</body></methods><class><name>Bolt</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name contact address </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Bolt class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#contact -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Bolt</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Bolt</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Bolt</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     contact := nil.     address := nil.</body></methods><class><name>Employees</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employees class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstName -&gt; Core.String); yourself)</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Employees</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.</body></methods><class><name>Employees</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName surName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employees class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#surName -&gt; Core.String); add: (#firstName -&gt; Core.String); yourself)</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surName:">surName: anObject"generated by Daskalos"     surName := (self checkValue: anObject forVariable: #surName)</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surName">surName"generated by Daskalos"     ^surName</body></methods><methods><class-id>Employees</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     surName := nil.</body></methods><class><name>Employees</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName surName id </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employees class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#id -&gt; Core.Number); add: (#firstName -&gt; Core.String); add: (#surName -&gt; Core.String); yourself)</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employees</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     surName := nil.     id := nil.</body></methods><class><name>Employees</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName surName id salary </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employees class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#id -&gt; Core.Number); add: (#firstName -&gt; Core.String); add: (#surName -&gt; Core.String); add: (#salary -&gt; Core.Number); yourself)</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary:">salary: anObject"generated by Daskalos"     salary := (self checkValue: anObject forVariable: #salary)</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary">salary"generated by Daskalos"     ^salary</body></methods><methods><class-id>Employees</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     surName := nil.     id := nil.     salary := nil.</body></methods><class><name>Customers</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Customers class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstName -&gt; Core.String); yourself)</body></methods><methods><class-id>Customers</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Customers</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Customers</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.</body></methods><class><name>Customers</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Customers class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#lastName -&gt; Core.String); add: (#firstName -&gt; Core.String); yourself)</body></methods><methods><class-id>Customers</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Customers</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Customers</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.</body></methods><class><name>Customers</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName contact </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Customers class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#contact -&gt; Core.Number); add: (#lastName -&gt; Core.String); add: (#firstName -&gt; Core.String); yourself)</body></methods><methods><class-id>Customers</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Customers</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Customers</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     contact := nil.</body></methods><class><name>Customers</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName contact email </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Customers class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#contact -&gt; Core.Number); add: (#lastName -&gt; Core.String); add: (#firstName -&gt; Core.String); add: (#email -&gt; Core.String); yourself)</body></methods><methods><class-id>Customers</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="email:">email: anObject"generated by Daskalos"     email := (self checkValue: anObject forVariable: #email)</body></methods><methods><class-id>Customers</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="email">email"generated by Daskalos"     ^email</body></methods><methods><class-id>Customers</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     contact := nil.     email := nil.</body></methods><class><name>Restaurants</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Restaurants class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Restaurants</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Restaurants</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Restaurants</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Restaurants</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name contact </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Restaurants class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#contact -&gt; Core.Number); yourself)</body></methods><methods><class-id>Restaurants</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Restaurants</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Restaurants</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     contact := nil.</body></methods><class><name>Restaurants</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name contact food </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Restaurants class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#contact -&gt; Core.Number); add: (#food -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Restaurants</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="food:">food: anObject"generated by Daskalos"     food := (self checkValue: anObject forVariable: #food)</body></methods><methods><class-id>Restaurants</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="food">food"generated by Daskalos"     ^food</body></methods><methods><class-id>Restaurants</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     contact := nil.     food := nil.</body></methods><class><name>Restaurants</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name contact food email </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Restaurants class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#contact -&gt; Core.Number); add: (#food -&gt; Core.String); add: (#email -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Restaurants</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="email:">email: anObject"generated by Daskalos"     email := (self checkValue: anObject forVariable: #email)</body></methods><methods><class-id>Restaurants</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="email">email"generated by Daskalos"     ^email</body></methods><methods><class-id>Restaurants</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     contact := nil.     food := nil.     email := nil.</body></methods><class><name>Bolt</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name contact address hires </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Bolt class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#contact -&gt; Core.Number); add: (#hires -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Bolt</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="hires:">hires: anObject"generated by Daskalos"     hires := (self checkValue: anObject forVariable: #hires)</body></methods><methods><class-id>Bolt</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="hires">hires"generated by Daskalos"     ^hires</body></methods><methods><class-id>Bolt</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     contact := nil.     address := nil.     hires := nil.</body></methods><class><name>Restaurants</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name contact food email givesTo </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Restaurants class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#contact -&gt; Core.Number); add: (#food -&gt; Core.String); add: (#givesTo -&gt; Core.Object); add: (#email -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Restaurants</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="givesTo:">givesTo: anObject"generated by Daskalos"     givesTo := (self checkValue: anObject forVariable: #givesTo)</body></methods><methods><class-id>Restaurants</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="givesTo">givesTo"generated by Daskalos"     ^givesTo</body></methods><methods><class-id>Restaurants</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     contact := nil.     food := nil.     email := nil.     givesTo := nil.</body></methods><class><name>Customers</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName contact email order </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Customers class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#contact -&gt; Core.Number); add: (#lastName -&gt; Core.String); add: (#firstName -&gt; Core.String); add: (#order -&gt; Core.Object); add: (#email -&gt; Core.String); yourself)</body></methods><methods><class-id>Customers</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="order:">order: anObject"generated by Daskalos"     order := (self checkValue: anObject forVariable: #order)</body></methods><methods><class-id>Customers</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="order">order"generated by Daskalos"     ^order</body></methods><methods><class-id>Customers</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     contact := nil.     email := nil.     order := nil.</body></methods><class><name>Employees</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName surName id salary employedBy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employees class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#employedBy -&gt; Core.Object); add: (#id -&gt; Core.Number); add: (#firstName -&gt; Core.String); add: (#surName -&gt; Core.String); add: (#salary -&gt; Core.Number); yourself)</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="employedBy:">employedBy: anObject"generated by Daskalos"     employedBy := (self checkValue: anObject forVariable: #employedBy)</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="employedBy">employedBy"generated by Daskalos"     ^employedBy</body></methods><methods><class-id>Employees</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     surName := nil.     id := nil.     salary := nil.     employedBy := nil.</body></methods><class><name>Employees</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName surName id salary employedBy delivery </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employees class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#employedBy -&gt; Core.Object); add: (#firstName -&gt; Core.String); add: (#id -&gt; Core.Number); add: (#salary -&gt; Core.Number); add: (#delivery -&gt; Core.Object); add: (#surName -&gt; Core.String); yourself)</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="delivery:">delivery: anObject"generated by Daskalos"     delivery := (self checkValue: anObject forVariable: #delivery)</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="delivery">delivery"generated by Daskalos"     ^delivery</body></methods><methods><class-id>Employees</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     surName := nil.     id := nil.     salary := nil.     employedBy := nil.     delivery := nil.</body></methods><class><name>Employees</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName surName id salary employedBy delivery getsOrders </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employees class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#employedBy -&gt; Core.Object); add: (#id -&gt; Core.Number); add: (#firstName -&gt; Core.String); add: (#salary -&gt; Core.Number); add: (#getsOrders -&gt; Core.Object); add: (#delivery -&gt; Core.Object); add: (#surName -&gt; Core.String); yourself)</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="getsOrders:">getsOrders: anObject"generated by Daskalos"     getsOrders := (self checkValue: anObject forVariable: #getsOrders)</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="getsOrders">getsOrders"generated by Daskalos"     ^getsOrders</body></methods><methods><class-id>Employees</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     surName := nil.     id := nil.     salary := nil.     employedBy := nil.     delivery := nil.     getsOrders := nil.</body></methods><do-it>ModelPhone removeFromSystem</do-it><do-it>PhoneStore removeFromSystem</do-it><do-it>Customer removeFromSystem</do-it><do-it>Employee removeFromSystem</do-it><class><name>Visitor</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName modeOfPayment visits </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Visitor class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstName -&gt; Core.String); add: (#visits -&gt; Core.Object); add: (#lastName -&gt; Core.String); add: (#modeOfPayment -&gt; Core.String); yourself)</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="modeOfPayment">modeOfPayment"generated by Daskalos"     ^modeOfPayment</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="modeOfPayment:">modeOfPayment: anObject"generated by Daskalos"     modeOfPayment := (self checkValue: anObject forVariable: #modeOfPayment)</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="visits">visits"generated by Daskalos"     ^visits</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="visits:">visits: anObject"generated by Daskalos"     visits := (self checkValue: anObject forVariable: #visits)</body></methods><methods><class-id>Visitor</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     modeOfPayment := nil.     visits := nil.</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName id salary workIn showsAround </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#lastName -&gt; Core.String); add: (#showsAround -&gt; Core.Object); add: (#workIn -&gt; Core.Object); add: (#id -&gt; Core.Number); add: (#salary -&gt; Core.Number); add: (#firstName -&gt; Core.String); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary">salary"generated by Daskalos"     ^salary</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary:">salary: anObject"generated by Daskalos"     salary := (self checkValue: anObject forVariable: #salary)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="showsAround">showsAround"generated by Daskalos"     ^showsAround</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="showsAround:">showsAround: anObject"generated by Daskalos"     showsAround := (self checkValue: anObject forVariable: #showsAround)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="workIn">workIn"generated by Daskalos"     ^workIn</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="workIn:">workIn: anObject"generated by Daskalos"     workIn := (self checkValue: anObject forVariable: #workIn)</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     id := nil.     salary := nil.     workIn := nil.     showsAround := nil.</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="salaryRange">salaryRange	| sm1 sm2 |	sm1 := 'Good'.	sm2 := 'Average'.	salary &gt; 20000 ifTrue: [^sm1] ifFalse: [^sm2]</body></methods><class><name>Zoo</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>contact entranceFee address zooName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zoo class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#contact -&gt; Core.Number); add: (#zooName -&gt; Core.String); add: (#address -&gt; Core.String); add: (#entranceFee -&gt; Core.Number); yourself)</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="entranceFee">entranceFee"generated by Daskalos"     ^entranceFee</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="entranceFee:">entranceFee: anObject"generated by Daskalos"     entranceFee := (self checkValue: anObject forVariable: #entranceFee)</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zooName">zooName"generated by Daskalos"     ^zooName</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zooName:">zooName: anObject"generated by Daskalos"     zooName := (self checkValue: anObject forVariable: #zooName)</body></methods><methods><class-id>Zoo</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     contact := nil.     entranceFee := nil.     address := nil.     zooName := nil.</body></methods><class><name>Animal</name><environment>Smalltalk</environment><super>Zoo</super><private>false</private><indexed-type>none</indexed-type><inst-vars>age name animalType </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Animal class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); add: (#age -&gt; Core.Number); add: (#contact -&gt; Core.Number); add: (#animalType -&gt; Core.String); add: (#entranceFee -&gt; Core.Number); add: (#zooName -&gt; Core.String); yourself)</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age">age"generated by Daskalos"     ^age</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age:">age: anObject"generated by Daskalos"     age := (self checkValue: anObject forVariable: #age)</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="animalType">animalType"generated by Daskalos"     ^animalType</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="animalType:">animalType: anObject"generated by Daskalos"     animalType := (self checkValue: anObject forVariable: #animalType)</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Animal</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     age := nil.     name := nil.     animalType := nil.</body></methods><methods><class-id>Animal</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="ageRange">ageRange	| pm1 pm2 |	pm1 := 'Old'.	pm2 := 'Young'.	age &gt; 30 ifTrue: [^pm1] ifFalse: [^pm2]</body></methods><do-it>Employees renameTo: #Employee</do-it><do-it>Restaurants renameTo: #Restaurant</do-it><do-it>Customers renameTo: #Customer</do-it><do-it>Employees select: [: y | y salaryRange = 'Average'].</do-it><do-it>Visitor removeFromSystem</do-it><do-it>Employee removeFromSystem</do-it><do-it>Animal removeFromSystem</do-it><do-it>Zoo removeFromSystem</do-it><class><name>Visitor</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName modeOfPayment visits </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Visitor class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstName -&gt; Core.String); add: (#visits -&gt; Core.Object); add: (#lastName -&gt; Core.String); add: (#modeOfPayment -&gt; Core.String); yourself)</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="modeOfPayment">modeOfPayment"generated by Daskalos"     ^modeOfPayment</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="modeOfPayment:">modeOfPayment: anObject"generated by Daskalos"     modeOfPayment := (self checkValue: anObject forVariable: #modeOfPayment)</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="visits">visits"generated by Daskalos"     ^visits</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="visits:">visits: anObject"generated by Daskalos"     visits := (self checkValue: anObject forVariable: #visits)</body></methods><methods><class-id>Visitor</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     modeOfPayment := nil.     visits := nil.</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName id salary workIn showsAround </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#lastName -&gt; Core.String); add: (#showsAround -&gt; Core.Object); add: (#workIn -&gt; Core.Object); add: (#id -&gt; Core.Number); add: (#salary -&gt; Core.Number); add: (#firstName -&gt; Core.String); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary">salary"generated by Daskalos"     ^salary</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary:">salary: anObject"generated by Daskalos"     salary := (self checkValue: anObject forVariable: #salary)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="showsAround">showsAround"generated by Daskalos"     ^showsAround</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="showsAround:">showsAround: anObject"generated by Daskalos"     showsAround := (self checkValue: anObject forVariable: #showsAround)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="workIn">workIn"generated by Daskalos"     ^workIn</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="workIn:">workIn: anObject"generated by Daskalos"     workIn := (self checkValue: anObject forVariable: #workIn)</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     id := nil.     salary := nil.     workIn := nil.     showsAround := nil.</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="salaryRange">salaryRange	| sm1 sm2 |	sm1 := 'Good'.	sm2 := 'Average'.	salary &gt; 20000 ifTrue: [^sm1] ifFalse: [^sm2]</body></methods><class><name>Zoo</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>contact entranceFee address zooName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zoo class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#contact -&gt; Core.Number); add: (#zooName -&gt; Core.String); add: (#address -&gt; Core.String); add: (#entranceFee -&gt; Core.Number); yourself)</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="entranceFee">entranceFee"generated by Daskalos"     ^entranceFee</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="entranceFee:">entranceFee: anObject"generated by Daskalos"     entranceFee := (self checkValue: anObject forVariable: #entranceFee)</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zooName">zooName"generated by Daskalos"     ^zooName</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zooName:">zooName: anObject"generated by Daskalos"     zooName := (self checkValue: anObject forVariable: #zooName)</body></methods><methods><class-id>Zoo</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     contact := nil.     entranceFee := nil.     address := nil.     zooName := nil.</body></methods><class><name>Animal</name><environment>Smalltalk</environment><super>Zoo</super><private>false</private><indexed-type>none</indexed-type><inst-vars>age name animalType </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Animal class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); add: (#age -&gt; Core.Number); add: (#contact -&gt; Core.Number); add: (#animalType -&gt; Core.String); add: (#entranceFee -&gt; Core.Number); add: (#zooName -&gt; Core.String); yourself)</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age">age"generated by Daskalos"     ^age</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age:">age: anObject"generated by Daskalos"     age := (self checkValue: anObject forVariable: #age)</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="animalType">animalType"generated by Daskalos"     ^animalType</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="animalType:">animalType: anObject"generated by Daskalos"     animalType := (self checkValue: anObject forVariable: #animalType)</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Animal</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     age := nil.     name := nil.     animalType := nil.</body></methods><methods><class-id>Animal</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="ageRange">ageRange	| pm1 pm2 |	pm1 := 'Old'.	pm2 := 'Young'.	age &gt; 30 ifTrue: [^pm1] ifFalse: [^pm2]</body></methods><do-it>Visitor removeFromSystem</do-it><do-it>Employee removeFromSystem</do-it><do-it>Animal removeFromSystem</do-it><do-it>Zoo removeFromSystem</do-it><class><name>Visitor</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName modeOfPayment visits </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Visitor class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstName -&gt; Core.String); add: (#visits -&gt; Core.Object); add: (#lastName -&gt; Core.String); add: (#modeOfPayment -&gt; Core.String); yourself)</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="modeOfPayment">modeOfPayment"generated by Daskalos"     ^modeOfPayment</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="modeOfPayment:">modeOfPayment: anObject"generated by Daskalos"     modeOfPayment := (self checkValue: anObject forVariable: #modeOfPayment)</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="visits">visits"generated by Daskalos"     ^visits</body></methods><methods><class-id>Visitor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="visits:">visits: anObject"generated by Daskalos"     visits := (self checkValue: anObject forVariable: #visits)</body></methods><methods><class-id>Visitor</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     modeOfPayment := nil.     visits := nil.</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName id salary workIn showsAround </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#lastName -&gt; Core.String); add: (#showsAround -&gt; Core.Object); add: (#workIn -&gt; Core.Object); add: (#id -&gt; Core.Number); add: (#salary -&gt; Core.Number); add: (#firstName -&gt; Core.String); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary">salary"generated by Daskalos"     ^salary</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary:">salary: anObject"generated by Daskalos"     salary := (self checkValue: anObject forVariable: #salary)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="showsAround">showsAround"generated by Daskalos"     ^showsAround</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="showsAround:">showsAround: anObject"generated by Daskalos"     showsAround := (self checkValue: anObject forVariable: #showsAround)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="workIn">workIn"generated by Daskalos"     ^workIn</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="workIn:">workIn: anObject"generated by Daskalos"     workIn := (self checkValue: anObject forVariable: #workIn)</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     id := nil.     salary := nil.     workIn := nil.     showsAround := nil.</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="salaryRange">salaryRange	| sm1 sm2 |	sm1 := 'Good'.	sm2 := 'Average'.	salary &gt; 20000 ifTrue: [^sm1] ifFalse: [^sm2]</body></methods><class><name>Zoo</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>contact entranceFee address zooName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zoo class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#contact -&gt; Core.Number); add: (#zooName -&gt; Core.String); add: (#address -&gt; Core.String); add: (#entranceFee -&gt; Core.Number); yourself)</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="entranceFee">entranceFee"generated by Daskalos"     ^entranceFee</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="entranceFee:">entranceFee: anObject"generated by Daskalos"     entranceFee := (self checkValue: anObject forVariable: #entranceFee)</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zooName">zooName"generated by Daskalos"     ^zooName</body></methods><methods><class-id>Zoo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zooName:">zooName: anObject"generated by Daskalos"     zooName := (self checkValue: anObject forVariable: #zooName)</body></methods><methods><class-id>Zoo</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     contact := nil.     entranceFee := nil.     address := nil.     zooName := nil.</body></methods><class><name>Animal</name><environment>Smalltalk</environment><super>Zoo</super><private>false</private><indexed-type>none</indexed-type><inst-vars>age name animalType </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Animal class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); add: (#age -&gt; Core.Number); add: (#contact -&gt; Core.Number); add: (#animalType -&gt; Core.String); add: (#entranceFee -&gt; Core.Number); add: (#zooName -&gt; Core.String); yourself)</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age">age"generated by Daskalos"     ^age</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age:">age: anObject"generated by Daskalos"     age := (self checkValue: anObject forVariable: #age)</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="animalType">animalType"generated by Daskalos"     ^animalType</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="animalType:">animalType: anObject"generated by Daskalos"     animalType := (self checkValue: anObject forVariable: #animalType)</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Animal</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Animal</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     age := nil.     name := nil.     animalType := nil.</body></methods><methods><class-id>Animal</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="ageRange">ageRange	| pm1 pm2 |	pm1 := 'Old'.	pm2 := 'Young'.	age &gt; 30 ifTrue: [^pm1] ifFalse: [^pm2]</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name sername id </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#sername -&gt; Core.String); add: (#id -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sername">sername"generated by Daskalos"     ^sername</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sername:">sername: anObject"generated by Daskalos"     sername := (self checkValue: anObject forVariable: #sername)</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     sername := nil.     id := nil.</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="amount_of_sailed_books">amount_of_sailed_books	^self sailed_Books size</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Common_proceed">Common_proceed	^(self sailed_Books collect: [:x | x price]) sum</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="employees_percent">employees_percent	^(self sailed_Books collect: [:x | x price * 10 / 100]) sum asFloat</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="sailed_Books">sailed_Books	^Book allInstances select: [:x | x sailed_by = self]</body></methods><class><name>Book</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name author publication_date price sailed_by </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Book class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#sailed_by -&gt; Core.Object); add: (#publication_date -&gt; Core.Date); add: (#price -&gt; Core.Number); add: (#author -&gt; Core.String); yourself)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="author">author"generated by Daskalos"     ^author</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="author:">author: anObject"generated by Daskalos"     author := (self checkValue: anObject forVariable: #author)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price">price"generated by Daskalos"     ^price</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price:">price: anObject"generated by Daskalos"     price := (self checkValue: anObject forVariable: #price)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="publication_date">publication_date"generated by Daskalos"     ^publication_date</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="publication_date:">publication_date: anObject"generated by Daskalos"     publication_date := (self checkValue: anObject forVariable: #publication_date)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sailed_by">sailed_by"generated by Daskalos"     ^sailed_by</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sailed_by:">sailed_by: anObject"generated by Daskalos"     sailed_by := (self checkValue: anObject forVariable: #sailed_by)</body></methods><methods><class-id>Book</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     author := nil.     publication_date := nil.     price := nil.     sailed_by := nil.</body></methods><methods><class-id>Book</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="purchasers">purchasers	^(Client allInstances select: [:x | x purchase = self]) 		collect: [:x | x name]		with: [:x | x bank_account]		with: [:x | x sername]</body></methods><class><name>Client</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name sername bank_account purchase date_of_purchase </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Client class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#bank_account -&gt; Core.String); add: (#sername -&gt; Core.String); add: (#purchase -&gt; Core.Object); add: (#date_of_purchase -&gt; Core.Date); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="bank_account">bank_account"generated by Daskalos"     ^bank_account</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="bank_account:">bank_account: anObject"generated by Daskalos"     bank_account := (self checkValue: anObject forVariable: #bank_account)</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="date_of_purchase">date_of_purchase"generated by Daskalos"     ^date_of_purchase</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="date_of_purchase:">date_of_purchase: anObject"generated by Daskalos"     date_of_purchase := (self checkValue: anObject forVariable: #date_of_purchase)</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purchase">purchase"generated by Daskalos"     ^purchase</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purchase:">purchase: anObject"generated by Daskalos"     purchase := (self checkValue: anObject forVariable: #purchase)</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sername">sername"generated by Daskalos"     ^sername</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sername:">sername: anObject"generated by Daskalos"     sername := (self checkValue: anObject forVariable: #sername)</body></methods><methods><class-id>Client</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     sername := nil.     bank_account := nil.     purchase := nil.     date_of_purchase := nil.</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name sername id </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#sername -&gt; Core.String); add: (#id -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sername">sername"generated by Daskalos"     ^sername</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sername:">sername: anObject"generated by Daskalos"     sername := (self checkValue: anObject forVariable: #sername)</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     sername := nil.     id := nil.</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="amount_of_sailed_books">amount_of_sailed_books	^self sailed_Books size</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Common_proceed">Common_proceed	^(self sailed_Books collect: [:x | x price]) sum</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="employees_percent">employees_percent	^(self sailed_Books collect: [:x | x price * 10 / 100]) sum asFloat</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="sailed_Books">sailed_Books	^Book allInstances select: [:x | x sailed_by = self]</body></methods><class><name>Book</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name author publication_date price sailed_by </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Book class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#sailed_by -&gt; Core.Object); add: (#publication_date -&gt; Core.Date); add: (#price -&gt; Core.Number); add: (#author -&gt; Core.String); yourself)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="author">author"generated by Daskalos"     ^author</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="author:">author: anObject"generated by Daskalos"     author := (self checkValue: anObject forVariable: #author)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price">price"generated by Daskalos"     ^price</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price:">price: anObject"generated by Daskalos"     price := (self checkValue: anObject forVariable: #price)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="publication_date">publication_date"generated by Daskalos"     ^publication_date</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="publication_date:">publication_date: anObject"generated by Daskalos"     publication_date := (self checkValue: anObject forVariable: #publication_date)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sailed_by">sailed_by"generated by Daskalos"     ^sailed_by</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sailed_by:">sailed_by: anObject"generated by Daskalos"     sailed_by := (self checkValue: anObject forVariable: #sailed_by)</body></methods><methods><class-id>Book</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     author := nil.     publication_date := nil.     price := nil.     sailed_by := nil.</body></methods><methods><class-id>Book</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="purchasers">purchasers	^(Client allInstances select: [:x | x purchase = self]) 		collect: [:x | x name]		with: [:x | x bank_account]		with: [:x | x sername]</body></methods><class><name>Client</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name sername bank_account purchase date_of_purchase </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Client class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#bank_account -&gt; Core.String); add: (#sername -&gt; Core.String); add: (#purchase -&gt; Core.Object); add: (#date_of_purchase -&gt; Core.Date); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="bank_account">bank_account"generated by Daskalos"     ^bank_account</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="bank_account:">bank_account: anObject"generated by Daskalos"     bank_account := (self checkValue: anObject forVariable: #bank_account)</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="date_of_purchase">date_of_purchase"generated by Daskalos"     ^date_of_purchase</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="date_of_purchase:">date_of_purchase: anObject"generated by Daskalos"     date_of_purchase := (self checkValue: anObject forVariable: #date_of_purchase)</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purchase">purchase"generated by Daskalos"     ^purchase</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purchase:">purchase: anObject"generated by Daskalos"     purchase := (self checkValue: anObject forVariable: #purchase)</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sername">sername"generated by Daskalos"     ^sername</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sername:">sername: anObject"generated by Daskalos"     sername := (self checkValue: anObject forVariable: #sername)</body></methods><methods><class-id>Client</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     sername := nil.     bank_account := nil.     purchase := nil.     date_of_purchase := nil.</body></methods><class><name>Employees</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Book</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Customers</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Employees</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employees class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Employees</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Employees</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name surname </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employees class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#surname -&gt; Core.String); yourself)</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surname:">surname: anObject"generated by Daskalos"     surname := (self checkValue: anObject forVariable: #surname)</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surname">surname"generated by Daskalos"     ^surname</body></methods><methods><class-id>Employees</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     surname := nil.</body></methods><class><name>Employees</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name surname id </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employees class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#surname -&gt; Core.String); add: (#id -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employees</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     surname := nil.     id := nil.</body></methods><class><name>Employees</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name surname id email </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employees class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#surname -&gt; Core.String); add: (#email -&gt; Core.String); add: (#id -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="email:">email: anObject"generated by Daskalos"     email := (self checkValue: anObject forVariable: #email)</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="email">email"generated by Daskalos"     ^email</body></methods><methods><class-id>Employees</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     surname := nil.     id := nil.     email := nil.</body></methods><class><name>Employees</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name surname id email contact </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employees class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#surname -&gt; Core.String); add: (#email -&gt; Core.String); add: (#contact -&gt; Core.String); add: (#id -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Employees</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     surname := nil.     id := nil.     email := nil.     contact := nil.</body></methods><class><name>Book</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Book class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Book</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Book</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name author </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Book class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#author -&gt; Core.String); yourself)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="author:">author: anObject"generated by Daskalos"     author := (self checkValue: anObject forVariable: #author)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="author">author"generated by Daskalos"     ^author</body></methods><methods><class-id>Book</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     author := nil.</body></methods><class><name>Book</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name author publication_date </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Book class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#author -&gt; Core.String); add: (#publication_date -&gt; Core.Date); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="publication_date:">publication_date: anObject"generated by Daskalos"     publication_date := (self checkValue: anObject forVariable: #publication_date)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="publication_date">publication_date"generated by Daskalos"     ^publication_date</body></methods><methods><class-id>Book</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     author := nil.     publication_date := nil.</body></methods><class><name>Book</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name author publication_date price </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Book class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#author -&gt; Core.String); add: (#publication_date -&gt; Core.Date); add: (#price -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price:">price: anObject"generated by Daskalos"     price := (self checkValue: anObject forVariable: #price)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price">price"generated by Daskalos"     ^price</body></methods><methods><class-id>Book</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     author := nil.     publication_date := nil.     price := nil.</body></methods><class><name>Customers</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Customers class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstname -&gt; Core.String); yourself)</body></methods><methods><class-id>Customers</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname:">firstname: anObject"generated by Daskalos"     firstname := (self checkValue: anObject forVariable: #firstname)</body></methods><methods><class-id>Customers</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname">firstname"generated by Daskalos"     ^firstname</body></methods><methods><class-id>Customers</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.</body></methods><class><name>Customers</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname surname </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Customers class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#surname -&gt; Core.String); add: (#firstname -&gt; Core.String); yourself)</body></methods><methods><class-id>Customers</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surname:">surname: anObject"generated by Daskalos"     surname := (self checkValue: anObject forVariable: #surname)</body></methods><methods><class-id>Customers</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surname">surname"generated by Daskalos"     ^surname</body></methods><methods><class-id>Customers</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     surname := nil.</body></methods><class><name>Customers</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname surname bank_account </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Customers class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#surname -&gt; Core.String); add: (#firstname -&gt; Core.String); add: (#bank_account -&gt; Core.Number); yourself)</body></methods><methods><class-id>Customers</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="bank_account:">bank_account: anObject"generated by Daskalos"     bank_account := (self checkValue: anObject forVariable: #bank_account)</body></methods><methods><class-id>Customers</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="bank_account">bank_account"generated by Daskalos"     ^bank_account</body></methods><methods><class-id>Customers</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     surname := nil.     bank_account := nil.</body></methods><class><name>Customers</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname surname bank_account date_of_purchase </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Customers class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#surname -&gt; Core.String); add: (#date_of_purchase -&gt; Core.Date); add: (#firstname -&gt; Core.String); add: (#bank_account -&gt; Core.Number); yourself)</body></methods><methods><class-id>Customers</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="date_of_purchase:">date_of_purchase: anObject"generated by Daskalos"     date_of_purchase := (self checkValue: anObject forVariable: #date_of_purchase)</body></methods><methods><class-id>Customers</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="date_of_purchase">date_of_purchase"generated by Daskalos"     ^date_of_purchase</body></methods><methods><class-id>Customers</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     surname := nil.     bank_account := nil.     date_of_purchase := nil.</body></methods><class><name>Customers</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname surname date_of_purchase </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Customers class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#surname -&gt; Core.String); add: (#firstname -&gt; Core.String); add: (#date_of_purchase -&gt; Core.Date); yourself)</body></methods><remove-selector><class-id>Customers</class-id> <selector>bank_account</selector></remove-selector><remove-selector><class-id>Customers</class-id> <selector>bank_account:</selector></remove-selector><methods><class-id>Customers</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     surname := nil.     date_of_purchase := nil.</body></methods><class><name>Customers</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname surname date_of_purchase purchase_type </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Customers class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#surname -&gt; Core.String); add: (#purchase_type -&gt; Core.String); add: (#firstname -&gt; Core.String); add: (#date_of_purchase -&gt; Core.Date); yourself)</body></methods><methods><class-id>Customers</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purchase_type:">purchase_type: anObject"generated by Daskalos"     purchase_type := (self checkValue: anObject forVariable: #purchase_type)</body></methods><methods><class-id>Customers</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purchase_type">purchase_type"generated by Daskalos"     ^purchase_type</body></methods><methods><class-id>Customers</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     surname := nil.     date_of_purchase := nil.     purchase_type := nil.</body></methods><class><name>Library</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><do-it>Employees removeFromSystem</do-it><class><name>Employees</name><environment>Smalltalk</environment><super>Library</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Employees</name><environment>Smalltalk</environment><super>Library</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employees class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstname -&gt; Core.String); yourself)</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname:">firstname: anObject"generated by Daskalos"     firstname := (self checkValue: anObject forVariable: #firstname)</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname">firstname"generated by Daskalos"     ^firstname</body></methods><methods><class-id>Employees</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.</body></methods><class><name>Employees</name><environment>Smalltalk</environment><super>Library</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname lastname </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employees class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstname -&gt; Core.String); add: (#lastname -&gt; Core.String); yourself)</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastname:">lastname: anObject"generated by Daskalos"     lastname := (self checkValue: anObject forVariable: #lastname)</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastname">lastname"generated by Daskalos"     ^lastname</body></methods><methods><class-id>Employees</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     lastname := nil.</body></methods><class><name>Employees</name><environment>Smalltalk</environment><super>Library</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname lastname id </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employees class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#id -&gt; Core.Number); add: (#firstname -&gt; Core.String); add: (#lastname -&gt; Core.String); yourself)</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employees</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     lastname := nil.     id := nil.</body></methods><class><name>Employees</name><environment>Smalltalk</environment><super>Library</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname lastname id email </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employees class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#email -&gt; Core.String); add: (#id -&gt; Core.Number); add: (#firstname -&gt; Core.String); add: (#lastname -&gt; Core.String); yourself)</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="email:">email: anObject"generated by Daskalos"     email := (self checkValue: anObject forVariable: #email)</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="email">email"generated by Daskalos"     ^email</body></methods><methods><class-id>Employees</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     lastname := nil.     id := nil.     email := nil.</body></methods><class><name>Employees</name><environment>Smalltalk</environment><super>Library</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname lastname id email contact </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employees class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#lastname -&gt; Core.String); add: (#contact -&gt; Core.Number); add: (#id -&gt; Core.Number); add: (#firstname -&gt; Core.String); add: (#email -&gt; Core.String); yourself)</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Employees</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Employees</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     lastname := nil.     id := nil.     email := nil.     contact := nil.</body></methods><class><name>Library</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Library class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Library</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Library</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Library</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Library</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name location </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Library class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#location -&gt; Core.String); yourself)</body></methods><methods><class-id>Library</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="location:">location: anObject"generated by Daskalos"     location := (self checkValue: anObject forVariable: #location)</body></methods><methods><class-id>Library</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="location">location"generated by Daskalos"     ^location</body></methods><methods><class-id>Library</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     location := nil.</body></methods><do-it>Customers renameTo: #Customer</do-it><do-it>Employees renameTo: #Employee</do-it><class><name>Library</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Employee</name><environment>Smalltalk</environment><super>Library</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Book</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Customer</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Library</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Library class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Library</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Library</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Library</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Library</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name location </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Library class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#location -&gt; Core.String); yourself)</body></methods><methods><class-id>Library</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="location:">location: anObject"generated by Daskalos"     location := (self checkValue: anObject forVariable: #location)</body></methods><methods><class-id>Library</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="location">location"generated by Daskalos"     ^location</body></methods><methods><class-id>Library</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     location := nil.</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>Library</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#location -&gt; Core.String); add: (#firstname -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname:">firstname: anObject"generated by Daskalos"     firstname := (self checkValue: anObject forVariable: #firstname)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname">firstname"generated by Daskalos"     ^firstname</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>Library</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname lastname </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#location -&gt; Core.String); add: (#firstname -&gt; Core.String); add: (#lastname -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastname:">lastname: anObject"generated by Daskalos"     lastname := (self checkValue: anObject forVariable: #lastname)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastname">lastname"generated by Daskalos"     ^lastname</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     lastname := nil.</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>Library</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname lastname id </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#id -&gt; Core.Number); add: (#location -&gt; Core.String); add: (#lastname -&gt; Core.String); add: (#firstname -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     lastname := nil.     id := nil.</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>Library</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname lastname id email </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#lastname -&gt; Core.String); add: (#id -&gt; Core.Number); add: (#location -&gt; Core.String); add: (#email -&gt; Core.String); add: (#firstname -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="email:">email: anObject"generated by Daskalos"     email := (self checkValue: anObject forVariable: #email)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="email">email"generated by Daskalos"     ^email</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     lastname := nil.     id := nil.     email := nil.</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>Library</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname lastname id email contact </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#lastname -&gt; Core.String); add: (#id -&gt; Core.Number); add: (#contact -&gt; Core.String); add: (#location -&gt; Core.String); add: (#email -&gt; Core.String); add: (#firstname -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     lastname := nil.     id := nil.     email := nil.     contact := nil.</body></methods><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#lastname -&gt; Core.String); add: (#id -&gt; Core.Number); add: (#contact -&gt; Core.Number); add: (#location -&gt; Core.String); add: (#email -&gt; Core.String); add: (#firstname -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><remove-selector><class-id>Employee</class-id> <selector>contact:</selector></remove-selector><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     lastname := nil.     id := nil.     email := nil.     contact := nil.</body></methods><class><name>Book</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Book class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Book</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Book</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name author </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Book class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#author -&gt; Core.String); yourself)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="author:">author: anObject"generated by Daskalos"     author := (self checkValue: anObject forVariable: #author)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="author">author"generated by Daskalos"     ^author</body></methods><methods><class-id>Book</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     author := nil.</body></methods><class><name>Book</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name author publication_date </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Book class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#author -&gt; Core.String); add: (#publication_date -&gt; Core.Date); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="publication_date:">publication_date: anObject"generated by Daskalos"     publication_date := (self checkValue: anObject forVariable: #publication_date)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="publication_date">publication_date"generated by Daskalos"     ^publication_date</body></methods><methods><class-id>Book</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     author := nil.     publication_date := nil.</body></methods><class><name>Book</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name author publication_date price </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Book class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#author -&gt; Core.String); add: (#publication_date -&gt; Core.Date); add: (#price -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price:">price: anObject"generated by Daskalos"     price := (self checkValue: anObject forVariable: #price)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price">price"generated by Daskalos"     ^price</body></methods><methods><class-id>Book</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     author := nil.     publication_date := nil.     price := nil.</body></methods><class><name>Customer</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Customer class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstname -&gt; Core.String); yourself)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname:">firstname: anObject"generated by Daskalos"     firstname := (self checkValue: anObject forVariable: #firstname)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname">firstname"generated by Daskalos"     ^firstname</body></methods><methods><class-id>Customer</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.</body></methods><class><name>Customer</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname surname </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Customer class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#surname -&gt; Core.String); add: (#firstname -&gt; Core.String); yourself)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surname:">surname: anObject"generated by Daskalos"     surname := (self checkValue: anObject forVariable: #surname)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surname">surname"generated by Daskalos"     ^surname</body></methods><methods><class-id>Customer</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     surname := nil.</body></methods><class><name>Customer</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname surname date_of_purchase </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Customer class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#date_of_purchase -&gt; Core.Date); add: (#firstname -&gt; Core.String); add: (#surname -&gt; Core.String); yourself)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="date_of_purchase:">date_of_purchase: anObject"generated by Daskalos"     date_of_purchase := (self checkValue: anObject forVariable: #date_of_purchase)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="date_of_purchase">date_of_purchase"generated by Daskalos"     ^date_of_purchase</body></methods><methods><class-id>Customer</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     surname := nil.     date_of_purchase := nil.</body></methods><class><name>Customer</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname surname date_of_purchase payment_type </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Customer class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#date_of_purchase -&gt; Core.Date); add: (#payment_type -&gt; Core.String); add: (#firstname -&gt; Core.String); add: (#surname -&gt; Core.String); yourself)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="payment_type:">payment_type: anObject"generated by Daskalos"     payment_type := (self checkValue: anObject forVariable: #payment_type)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="payment_type">payment_type"generated by Daskalos"     ^payment_type</body></methods><methods><class-id>Customer</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     surname := nil.     date_of_purchase := nil.     payment_type := nil.</body></methods><class><name>Client</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name bank_account purchase date_of_purchase </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Client class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#purchase -&gt; Core.Object); add: (#date_of_purchase -&gt; Core.Date); add: (#bank_account -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><remove-selector><class-id>Client</class-id> <selector>sername</selector></remove-selector><remove-selector><class-id>Client</class-id> <selector>sername:</selector></remove-selector><methods><class-id>Client</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     bank_account := nil.     purchase := nil.     date_of_purchase := nil.</body></methods><class><name>Client</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name bank_account purchase date_of_purchase surname </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Client class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#purchase -&gt; Core.Object); add: (#date_of_purchase -&gt; Core.Date); add: (#surname -&gt; Core.String); add: (#bank_account -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surname:">surname: anObject"generated by Daskalos"     surname := (self checkValue: anObject forVariable: #surname)</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surname">surname"generated by Daskalos"     ^surname</body></methods><methods><class-id>Client</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     bank_account := nil.     purchase := nil.     date_of_purchase := nil.     surname := nil.</body></methods><do-it>Employees := Set new.Books := Set new.Clients := Set new. "______________________Employees______________________"e1 := Employee new.e1 name: 'Steven'.e1 sername: 'Drake'.e1 id: 001.e2 := Employee new.e2 name: 'Alice'.e2 sername: 'Grow'.e2 id: 002.e3 := Employee new.e3 name: 'Morgan'.e3 sername: 'Freeman'.e3 id: 003.Employees add: e1; add: e2; add: e3."__________Books____________"b1 := Book new.b1 name: 'It'.b1 author: 'Steven King'.b1 publication_date: '15-SEP-1986' asDate.b1 price: 20 .b1 sailed_by: e1.b2 := Book new.b2 name: 'Steve Jobs'.b2 author: 'Walter Isaacson'.b2 publication_date: '24-OCT-2011' asDate.b2 price: 30 .b2 sailed_by: e1.b3 := Book new.b3 name: 'JavaScript &amp; jQuery'.b3 author: 'David Mcfarland'.b3 publication_date: '17-JUL-2008' asDate.b3 price: 37 .b3 sailed_by: e1.b4 := Book new.b4 name: 'Complete code'.b4 author: 'Stive McKonnel'.b4 publication_date: '13-FEB-1993' asDate.b4 price: 70 .b4 sailed_by: e1.b5 := Book new.b5 name: 'The Shining'.b5 author: 'Steven King'.b5 publication_date: '28-JUN-1977' asDate.b5 price: 15 .b5 sailed_by: e3.b6 := Book new.b6 name: 'The Lord of The Rings The Fellowship of the Ring'.b6 author: 'J. R. R. Tolkien'.b6 publication_date: '29-JUL-1954' asDate.b6 price: 30 .b6 sailed_by: e1.b7 := Book new.b7 name: 'Shantaram'.b7 author: 'David Roberts'.b7 publication_date: '7-AUG-2003' asDate.b7 price: 37.b7 sailed_by: e1.b8 := Book new.b8 name: 'Norwagian Wood'.b8 author: 'Haruki Murakami'.b8 publication_date: '4-SEP-1987' asDate.b8 price: 10.b8 sailed_by: e1.b9 := Book new.b9 name: '1Q84: Book 1'.b9 author: 'Haruki Murakami'.b9 publication_date: '29-MAY-2009' asDate.b9 price: 15.b9 sailed_by: e1.b10 := Book new.b10 name: '1Q84: Book 2'.b10 author: 'Haruki Murakami'.b10 publication_date: '29-MAY-2009' asDate.b10 price: 15.b10 sailed_by: e3.b11 := Book new.b11 name: '1Q84: Book 3'.b11 author: 'Haruki Murakami'.b11 publication_date: '16-APR-2010' asDate.b11 price: 15.b11 sailed_by: e3.b12 := Book new.b12 name: 'The Rising'.b12 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b12 publication_date: '31-MAR-2005' asDate.b12 price: 15.b12 sailed_by: e1.b13 := Book new.b13 name: 'The Regime'.b13 author: 'Tim LaHaye&amp;Jerry B Jenkins'.b13 publication_date: '15-NOV-2005' asDate.b13 price: 15.b13 sailed_by: e1.b14 := Book new.b14 name: 'The Rapture'.b14 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b14 publication_date: '6-JUN-2006' asDate.b14 price: 15.b14 sailed_by: e2.b15 := Book new.b15 name: 'Left Behind'.b15 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b15 publication_date: '31-DEC-1995' asDate.b15 price: 17.b15 sailed_by: e1.b16 := Book new.b16 name: 'Tribulation Force'.b16 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b16 publication_date: '29-OCT-1996' asDate.b16 price: 15.b16 sailed_by: e1.b17 := Book new.b17 name: 'Nicolae'.b17 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b17 publication_date: '1-OCT-1997' asDate.b17 price: 15.b17 sailed_by: e3.b18 := Book new.b18 name: 'Soul Harvest'.b18 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b18 publication_date: '1-FEB-1998' asDate.b18 price: 15.b18 sailed_by: e3.b19 := Book new.b19 name: 'Apollyon'.b19 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b19 publication_date: '1-FEB-1999' asDate.b19 price: 15.b19 sailed_by: e2.b20 := Book new.b20 name: 'Assassins'.b20 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b20 publication_date: '15-AUG-1999' asDate.b20 price: 15.b20 sailed_by: e2.b21 := Book new.b21 name: 'The Indwelling'.b21 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b21 publication_date: '4-MAY-2000' asDate.b21 price: 15.b21 sailed_by: e2.b22  := Book new.b22 name: 'The Mark'.b22 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b22 publication_date: '9-NOV-2000' asDate.b22 price: 15.b22 sailed_by: e3.b23 := Book new.b23 name: 'Desecration'.b23 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b23 publication_date: '30-OCT-2001' asDate.b23 price: 15.b23 sailed_by: e2.b24 := Book new.b24 name: 'Desecration'.b24 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b24 publication_date: '30-OCT-2001' asDate.b24 price: 15.b24 sailed_by: e2.b25  := Book new.b25 name: 'The Remnant'.b25 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b25 publication_date: '3-JUL-2002' asDate.b25 price: 15.b25 sailed_by: e2.b26 := Book new.b26 name: 'Armageddon	'.b26 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b26 publication_date: '14-APR-2003' asDate.b26 price: 15.b26 sailed_by: e2.b27 := Book new.b27 name: 'Glorious Appearing'.b27 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b27 publication_date: '30-MAR-2004' asDate.b27 price: 15.b27 sailed_by: e2.b28 := Book new.b28 name: 'Kingdom Come	'.b28 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b28 publication_date: '7-APR-2007' asDate.b28 price: 15.b28 sailed_by: e1.b29 := Book new.b29 name: 'Programming language C# 7 and NET palforms and NET CORE'.b29 author: 'Philip Japikse&amp;Andrew Troelsen'.b29 publication_date: '30-NOV-2019' asDate.b29 price: 30.b29 sailed_by: e1.b30 := Book new.b30 name: 'Grokking Algorithms'.b30 author: 'Aditya Bhargava'.b30 publication_date: '30-MAY-2016' asDate.b30 price: 47.b30 sailed_by: e2.Books add: b1; add: b2; add: b3; add: b4; add: b5; add: b6; add: b7; add: b8; add: b9; add: b10; add: b11; add: b12; add: b13; add: b14; add: b15; add: b16; add: b17; add: b18; add: b19; add: b20; add: b21; add: b22; add: b23; add: b24; add: b25; add: b26; add: b27; add: b28; add: b29; add: b30."______________________Clients______________________"c1 := Client new.c1 name: 'Carl'.c1 surname: 'Grimes'.c1 bank_account: '56777652/0008'.c1 purchase:  b1.c1 date_of_purchase: ' 4-AUG-2019' asDate.c2 := Client new.c2 name: 'Rick'.c2 surname: 'Grimes'.c2 bank_account: '012328498/008'.c2 purchase:  b2.c2 date_of_purchase: '5-MAR-2020' asDate.c3 := Client new.c3 name: 'Lori'.c3 surname: 'Grimes'.c3 bank_account: '5943509/008'.c3 purchase:  b3.c3 date_of_purchase: '16-AUG-2020' asDate.c4 := Client new.c4 name: 'Judith'.c4 surname: 'Grimes'.c4 bank_account:  '42352345325/008'.c4 purchase:  b6.c4 date_of_purchase: '21-MAR-2020' asDate.c5 := Client new.c5 name: 'Glenn'.c5 surname: 'Rhee'.c5 bank_account: '49850934798/008'.c5 purchase:  b5.c5 date_of_purchase: '20-JUN-2020' asDate.c6 := Client new.c6 name: 'Magy'.c6 surname: 'Rhee'.c6 bank_account: '12524565361/008'.c6 purchase:  b4.c6 date_of_purchase: '5-APR-2020' asDate.c7 := Client new.c7 name: 'Shane'.c7 surname: 'Walsh'.c7 bank_account: '23626341241/008'.c7 purchase:  b7.c7 date_of_purchase: '21-APR-2020' asDate.c8 := Client new.c8 name: 'Merle'.c8 surname: 'Dikson'.c8 bank_account: '2362623623/008'.c8 purchase:  b8.c8 date_of_purchase: '19-SEP-2019' asDate.c9  := Client new.c9 name: 'Daryl'.c9 surname: 'Dikson'.c9 bank_account: '23626236/008'.c9 purchase:  b9.c9 date_of_purchase: '4-MAY-2020' asDate.c10 := Client new.c10 name: 'Carol'.c10 surname: 'Peletier'.c10 bank_account: '326262523532/008'.c10 purchase:  b10.c10 date_of_purchase: '31-OCT-2019' asDate.c11 := Client new.c11 name: 'Hershel'.c11 surname: 'Greene'.c11 bank_account: '133161613/008'.c11 purchase:  b13.c11 date_of_purchase: '1-NOV-2020' asDate.c12 := Client new.c12 name: 'Beth'.c12 surname: 'Greene'.c12 bank_account: '165136161/008'.c12 purchase:  b12.c12 date_of_purchase: '28-JUN-2020' asDate.c13  := Client new.c13 name: 'Rosita'.c13 surname: 'Espinosa'.c13 bank_account: '32235235/008'.c13 purchase:  b11.c13 date_of_purchase: '30-AUG-2020' asDate.c14 := Client new.c14 name: 'Teodor'.c14 surname: 'Douglas'.c14 bank_account: '1252151512 /008'.c14 purchase:  b14.c14 date_of_purchase: '30-MAR-2020' asDate.c15 := Client new.c15 name: 'Sasha'.c15 surname: 'Williams'.c15 bank_account: '215215151/008'.c15 purchase:  b15.c15 date_of_purchase: '18-NOV-2019' asDate.c16 := Client new.c16 name: 'Abrakham'.c16 surname: 'Ford'.c16 bank_account: '12515616131/008'.c16 purchase:  b16.c16 date_of_purchase: '4-OCT-2020' asDate.c17 := Client new.c17 name: 'Eugine'.c17 surname: 'Porter'.c17 bank_account: '1251521562/008'.c17 purchase:  b17.c17 date_of_purchase: '19-AUG-2020' asDate.c18 := Client new.c18 name: 'Spencer'.c18 surname: 'Monro'.c18 bank_account: '23626326/008'.c18 purchase:  b18.c18 date_of_purchase: '25-OCT-2020' asDate.c19 := Client new.c19 name: 'Deanna'.c19 surname: 'Monro'.c19 bank_account: '347437347347/008'.c19 purchase:  b20.c19 date_of_purchase: '19-APR-2018' asDate.c20 := Client new.c20 name: 'Jessie'.c20 surname: 'Anderson'.c20 bank_account: '3473474373/008'.c20 purchase:  b19.c20 date_of_purchase: '9-NOV-2018' asDate.c21 := Client new.c21 name: 'Bob'.c21 surname: 'Stookey'.c21 bank_account: '34734737347/008'.c21 purchase:  b22.c21 date_of_purchase: '30-MAR-2021' asDate.c22 := Client new.c22 name: 'Tyreese'.c22 surname: 'Williams'.c22 bank_account: '34763734383/008'.c22 purchase:  b21.c22 date_of_purchase: '25-JAN-2020' asDate.c23 := Client new.c23 name: 'Tara'.c23 surname: 'Chambler'.c23 bank_account:'3473456346/008'.c23 purchase:  b23.c23 date_of_purchase: '3-JUL-2020' asDate.c24 := Client new.c24 name: 'Chester'.c24 surname: 'Jones'.c24 bank_account: '378658574/008'.c24 purchase:  b24.c24 date_of_purchase: '15-MAY-2020' asDate.c25 := Client new.c25 name: 'Morgan'.c25 surname: 'Jones'.c25 bank_account: '533456346737/008'.c25 purchase:  b25.c25 date_of_purchase: '14-NOV-2020' asDate.c26 := Client new.c26 name: 'Austin'.c26 surname: 'Amelio'.c26 bank_account: '5458467456456/008'.c26 purchase:  b26.c26 date_of_purchase: '27-JUN-2020' asDate.c27 := Client new.c27 name: 'Tom'.c27 surname: 'Payne'.c27 bank_account: '444564745458/008'.c27 purchase: b27.c27 date_of_purchase: '6-SEP-2020' asDate.c28 := Client new.c28 name: 'Khary'.c28 surname: 'Payton'.c28 bank_account: '64363484581/008'.c28 purchase:  b29.c28 date_of_purchase: '2-MAR-2021' asDate.c29  := Client new.c29 name: 'Steven'.c29 surname: 'Ogg'.c29 bank_account: '334545345/008'.c29 purchase:  b30.c29 date_of_purchase: '11-FEB-2020' asDate.c30 := Client new.c30 name: 'Katelyn'.c30 surname: 'Nacon'.c30 bank_account: '24124125215/008'.c30 purchase:  b28.c30 date_of_purchase: '7-June-2019' asDate.Clients add: c1; add: c2; add: c3; add: c4; add: c5; add: c6; add: c7; add: c8; add: c9; add: c10; add: c11; add: c12; add: c13; add: c14; add: c15; add: c16; add: c17; add: c18; add: c19; add: c20; add: c21; add: c22; add: c23; add: c24; add: c25; add: c26; add: c27; add: c28; add: c29;  add: c30.</do-it><class><name>Book</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name author publication_date price </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Book class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#publication_date -&gt; Core.Date); add: (#author -&gt; Core.String); add: (#price -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><remove-selector><class-id>Book</class-id> <selector>sailed_by</selector></remove-selector><remove-selector><class-id>Book</class-id> <selector>sailed_by:</selector></remove-selector><methods><class-id>Book</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     author := nil.     publication_date := nil.     price := nil.</body></methods><class><name>Book</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name author publication_date price soled_by </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Book class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#publication_date -&gt; Core.Date); add: (#name -&gt; Core.String); add: (#soled_by -&gt; Core.Object); add: (#price -&gt; Core.Number); add: (#author -&gt; Core.String); yourself)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="soled_by:">soled_by: anObject"generated by Daskalos"     soled_by := (self checkValue: anObject forVariable: #soled_by)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="soled_by">soled_by"generated by Daskalos"     ^soled_by</body></methods><methods><class-id>Book</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     author := nil.     publication_date := nil.     price := nil.     soled_by := nil.</body></methods><class><name>Book</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name author publication_date price </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Book class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#publication_date -&gt; Core.Date); add: (#author -&gt; Core.String); add: (#price -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><remove-selector><class-id>Book</class-id> <selector>soled_by</selector></remove-selector><remove-selector><class-id>Book</class-id> <selector>soled_by:</selector></remove-selector><methods><class-id>Book</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     author := nil.     publication_date := nil.     price := nil.</body></methods><class><name>Book</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name author publication_date price sold_by </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Book class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#publication_date -&gt; Core.Date); add: (#name -&gt; Core.String); add: (#price -&gt; Core.Number); add: (#sold_by -&gt; Core.Object); add: (#author -&gt; Core.String); yourself)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sold_by:">sold_by: anObject"generated by Daskalos"     sold_by := (self checkValue: anObject forVariable: #sold_by)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sold_by">sold_by"generated by Daskalos"     ^sold_by</body></methods><methods><class-id>Book</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     author := nil.     publication_date := nil.     price := nil.     sold_by := nil.</body></methods><do-it>Employees := Set new.Books := Set new.Clients := Set new. "______________________Employees______________________"e1 := Employee new.e1 name: 'Steven'.e1 sername: 'Drake'.e1 id: 001.e2 := Employee new.e2 name: 'Alice'.e2 sername: 'Grow'.e2 id: 002.e3 := Employee new.e3 name: 'Morgan'.e3 sername: 'Freeman'.e3 id: 003.Employees add: e1; add: e2; add: e3."__________Books____________"b1 := Book new.b1 name: 'It'.b1 author: 'Steven King'.b1 publication_date: '15-SEP-1986' asDate.b1 price: 20 .b1 sold_by: e1.b2 := Book new.b2 name: 'Steve Jobs'.b2 author: 'Walter Isaacson'.b2 publication_date: '24-OCT-2011' asDate.b2 price: 30 .b2 sold_by: e1.b3 := Book new.b3 name: 'JavaScript &amp; jQuery'.b3 author: 'David Mcfarland'.b3 publication_date: '17-JUL-2008' asDate.b3 price: 37 .b3 sold_by: e1.b4 := Book new.b4 name: 'Complete code'.b4 author: 'Stive McKonnel'.b4 publication_date: '13-FEB-1993' asDate.b4 price: 70 .b4 sold_by: e1.b5 := Book new.b5 name: 'The Shining'.b5 author: 'Steven King'.b5 publication_date: '28-JUN-1977' asDate.b5 price: 15 .b5 sold_by: e3.b6 := Book new.b6 name: 'The Lord of The Rings The Fellowship of the Ring'.b6 author: 'J. R. R. Tolkien'.b6 publication_date: '29-JUL-1954' asDate.b6 price: 30 .b6 sold_by: e1.b7 := Book new.b7 name: 'Shantaram'.b7 author: 'David Roberts'.b7 publication_date: '7-AUG-2003' asDate.b7 price: 37.b7 sold_by: e1.b8 := Book new.b8 name: 'Norwagian Wood'.b8 author: 'Haruki Murakami'.b8 publication_date: '4-SEP-1987' asDate.b8 price: 10.b8 sold_by: e1.b9 := Book new.b9 name: '1Q84: Book 1'.b9 author: 'Haruki Murakami'.b9 publication_date: '29-MAY-2009' asDate.b9 price: 15.b9 sold_by: e1.b10 := Book new.b10 name: '1Q84: Book 2'.b10 author: 'Haruki Murakami'.b10 publication_date: '29-MAY-2009' asDate.b10 price: 15.b10 sold_by: e3.b11 := Book new.b11 name: '1Q84: Book 3'.b11 author: 'Haruki Murakami'.b11 publication_date: '16-APR-2010' asDate.b11 price: 15.b11 sold_by: e3.b12 := Book new.b12 name: 'The Rising'.b12 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b12 publication_date: '31-MAR-2005' asDate.b12 price: 15.b12 sold_by: e1.b13 := Book new.b13 name: 'The Regime'.b13 author: 'Tim LaHaye&amp;Jerry B Jenkins'.b13 publication_date: '15-NOV-2005' asDate.b13 price: 15.b13 sold_by: e1.b14 := Book new.b14 name: 'The Rapture'.b14 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b14 publication_date: '6-JUN-2006' asDate.b14 price: 15.b14 sold_by: e2.b15 := Book new.b15 name: 'Left Behind'.b15 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b15 publication_date: '31-DEC-1995' asDate.b15 price: 17.b15 sold_by: e1.b16 := Book new.b16 name: 'Tribulation Force'.b16 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b16 publication_date: '29-OCT-1996' asDate.b16 price: 15.b16 sold_by: e1.b17 := Book new.b17 name: 'Nicolae'.b17 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b17 publication_date: '1-OCT-1997' asDate.b17 price: 15.b17 sold_by: e3.b18 := Book new.b18 name: 'Soul Harvest'.b18 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b18 publication_date: '1-FEB-1998' asDate.b18 price: 15.b18 sold_by: e3.b19 := Book new.b19 name: 'Apollyon'.b19 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b19 publication_date: '1-FEB-1999' asDate.b19 price: 15.b19 sold_by: e2.b20 := Book new.b20 name: 'Assassins'.b20 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b20 publication_date: '15-AUG-1999' asDate.b20 price: 15.b20 sold_by: e2.b21 := Book new.b21 name: 'The Indwelling'.b21 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b21 publication_date: '4-MAY-2000' asDate.b21 price: 15.b21 sold_by: e2.b22  := Book new.b22 name: 'The Mark'.b22 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b22 publication_date: '9-NOV-2000' asDate.b22 price: 15.b22 sold_by: e3.b23 := Book new.b23 name: 'Desecration'.b23 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b23 publication_date: '30-OCT-2001' asDate.b23 price: 15.b23 sold_by: e2.b24 := Book new.b24 name: 'Desecration'.b24 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b24 publication_date: '30-OCT-2001' asDate.b24 price: 15.b24 sold_by: e2.b25  := Book new.b25 name: 'The Remnant'.b25 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b25 publication_date: '3-JUL-2002' asDate.b25 price: 15.b25 sold_by: e2.b26 := Book new.b26 name: 'Armageddon	'.b26 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b26 publication_date: '14-APR-2003' asDate.b26 price: 15.b26 sold_by: e2.b27 := Book new.b27 name: 'Glorious Appearing'.b27 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b27 publication_date: '30-MAR-2004' asDate.b27 price: 15.b27 sold_by: e2.b28 := Book new.b28 name: 'Kingdom Come	'.b28 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b28 publication_date: '7-APR-2007' asDate.b28 price: 15.b28 sold_by: e1.b29 := Book new.b29 name: 'Programming language C# 7 and NET palforms and NET CORE'.b29 author: 'Philip Japikse&amp;Andrew Troelsen'.b29 publication_date: '30-NOV-2019' asDate.b29 price: 30.b29 sold_by: e1.b30 := Book new.b30 name: 'Grokking Algorithms'.b30 author: 'Aditya Bhargava'.b30 publication_date: '30-MAY-2016' asDate.b30 price: 47.b30 sold_by: e2.Books add: b1; add: b2; add: b3; add: b4; add: b5; add: b6; add: b7; add: b8; add: b9; add: b10; add: b11; add: b12; add: b13; add: b14; add: b15; add: b16; add: b17; add: b18; add: b19; add: b20; add: b21; add: b22; add: b23; add: b24; add: b25; add: b26; add: b27; add: b28; add: b29; add: b30."______________________Clients______________________"c1 := Client new.c1 name: 'Carl'.c1 surname: 'Grimes'.c1 bank_account: '56777652/0008'.c1 purchase:  b1.c1 date_of_purchase: ' 4-AUG-2019' asDate.c2 := Client new.c2 name: 'Rick'.c2 surname: 'Grimes'.c2 bank_account: '012328498/008'.c2 purchase:  b2.c2 date_of_purchase: '5-MAR-2020' asDate.c3 := Client new.c3 name: 'Lori'.c3 surname: 'Grimes'.c3 bank_account: '5943509/008'.c3 purchase:  b3.c3 date_of_purchase: '16-AUG-2020' asDate.c4 := Client new.c4 name: 'Judith'.c4 surname: 'Grimes'.c4 bank_account:  '42352345325/008'.c4 purchase:  b6.c4 date_of_purchase: '21-MAR-2020' asDate.c5 := Client new.c5 name: 'Glenn'.c5 surname: 'Rhee'.c5 bank_account: '49850934798/008'.c5 purchase:  b5.c5 date_of_purchase: '20-JUN-2020' asDate.c6 := Client new.c6 name: 'Magy'.c6 surname: 'Rhee'.c6 bank_account: '12524565361/008'.c6 purchase:  b4.c6 date_of_purchase: '5-APR-2020' asDate.c7 := Client new.c7 name: 'Shane'.c7 surname: 'Walsh'.c7 bank_account: '23626341241/008'.c7 purchase:  b7.c7 date_of_purchase: '21-APR-2020' asDate.c8 := Client new.c8 name: 'Merle'.c8 surname: 'Dikson'.c8 bank_account: '2362623623/008'.c8 purchase:  b8.c8 date_of_purchase: '19-SEP-2019' asDate.c9  := Client new.c9 name: 'Daryl'.c9 surname: 'Dikson'.c9 bank_account: '23626236/008'.c9 purchase:  b9.c9 date_of_purchase: '4-MAY-2020' asDate.c10 := Client new.c10 name: 'Carol'.c10 surname: 'Peletier'.c10 bank_account: '326262523532/008'.c10 purchase:  b10.c10 date_of_purchase: '31-OCT-2019' asDate.c11 := Client new.c11 name: 'Hershel'.c11 surname: 'Greene'.c11 bank_account: '133161613/008'.c11 purchase:  b13.c11 date_of_purchase: '1-NOV-2020' asDate.c12 := Client new.c12 name: 'Beth'.c12 surname: 'Greene'.c12 bank_account: '165136161/008'.c12 purchase:  b12.c12 date_of_purchase: '28-JUN-2020' asDate.c13  := Client new.c13 name: 'Rosita'.c13 surname: 'Espinosa'.c13 bank_account: '32235235/008'.c13 purchase:  b11.c13 date_of_purchase: '30-AUG-2020' asDate.c14 := Client new.c14 name: 'Teodor'.c14 surname: 'Douglas'.c14 bank_account: '1252151512 /008'.c14 purchase:  b14.c14 date_of_purchase: '30-MAR-2020' asDate.c15 := Client new.c15 name: 'Sasha'.c15 surname: 'Williams'.c15 bank_account: '215215151/008'.c15 purchase:  b15.c15 date_of_purchase: '18-NOV-2019' asDate.c16 := Client new.c16 name: 'Abrakham'.c16 surname: 'Ford'.c16 bank_account: '12515616131/008'.c16 purchase:  b16.c16 date_of_purchase: '4-OCT-2020' asDate.c17 := Client new.c17 name: 'Eugine'.c17 surname: 'Porter'.c17 bank_account: '1251521562/008'.c17 purchase:  b17.c17 date_of_purchase: '19-AUG-2020' asDate.c18 := Client new.c18 name: 'Spencer'.c18 surname: 'Monro'.c18 bank_account: '23626326/008'.c18 purchase:  b18.c18 date_of_purchase: '25-OCT-2020' asDate.c19 := Client new.c19 name: 'Deanna'.c19 surname: 'Monro'.c19 bank_account: '347437347347/008'.c19 purchase:  b20.c19 date_of_purchase: '19-APR-2018' asDate.c20 := Client new.c20 name: 'Jessie'.c20 surname: 'Anderson'.c20 bank_account: '3473474373/008'.c20 purchase:  b19.c20 date_of_purchase: '9-NOV-2018' asDate.c21 := Client new.c21 name: 'Bob'.c21 surname: 'Stookey'.c21 bank_account: '34734737347/008'.c21 purchase:  b22.c21 date_of_purchase: '30-MAR-2021' asDate.c22 := Client new.c22 name: 'Tyreese'.c22 surname: 'Williams'.c22 bank_account: '34763734383/008'.c22 purchase:  b21.c22 date_of_purchase: '25-JAN-2020' asDate.c23 := Client new.c23 name: 'Tara'.c23 surname: 'Chambler'.c23 bank_account:'3473456346/008'.c23 purchase:  b23.c23 date_of_purchase: '3-JUL-2020' asDate.c24 := Client new.c24 name: 'Chester'.c24 surname: 'Jones'.c24 bank_account: '378658574/008'.c24 purchase:  b24.c24 date_of_purchase: '15-MAY-2020' asDate.c25 := Client new.c25 name: 'Morgan'.c25 surname: 'Jones'.c25 bank_account: '533456346737/008'.c25 purchase:  b25.c25 date_of_purchase: '14-NOV-2020' asDate.c26 := Client new.c26 name: 'Austin'.c26 surname: 'Amelio'.c26 bank_account: '5458467456456/008'.c26 purchase:  b26.c26 date_of_purchase: '27-JUN-2020' asDate.c27 := Client new.c27 name: 'Tom'.c27 surname: 'Payne'.c27 bank_account: '444564745458/008'.c27 purchase: b27.c27 date_of_purchase: '6-SEP-2020' asDate.c28 := Client new.c28 name: 'Khary'.c28 surname: 'Payton'.c28 bank_account: '64363484581/008'.c28 purchase:  b29.c28 date_of_purchase: '2-MAR-2021' asDate.c29  := Client new.c29 name: 'Steven'.c29 surname: 'Ogg'.c29 bank_account: '334545345/008'.c29 purchase:  b30.c29 date_of_purchase: '11-FEB-2020' asDate.c30 := Client new.c30 name: 'Katelyn'.c30 surname: 'Nacon'.c30 bank_account: '24124125215/008'.c30 purchase:  b28.c30 date_of_purchase: '7-June-2019' asDate.Clients add: c1; add: c2; add: c3; add: c4; add: c5; add: c6; add: c7; add: c8; add: c9; add: c10; add: c11; add: c12; add: c13; add: c14; add: c15; add: c16; add: c17; add: c18; add: c19; add: c20; add: c21; add: c22; add: c23; add: c24; add: c25; add: c26; add: c27; add: c28; add: c29;  add: c30.</do-it><class><name>Library</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><do-it>Employee removeFromSystem</do-it><class><name>Employee</name><environment>Smalltalk</environment><super>Library</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Employee</name><environment>Smalltalk</environment><super>Library</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>Library</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name surname </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#surname -&gt; Core.String); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surname:">surname: anObject"generated by Daskalos"     surname := (self checkValue: anObject forVariable: #surname)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surname">surname"generated by Daskalos"     ^surname</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     surname := nil.</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>Library</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name surname id </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#surname -&gt; Core.String); add: (#id -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     surname := nil.     id := nil.</body></methods><do-it>Employee removeFromSystem</do-it><do-it>Library removeFromSystem</do-it><do-it>Book removeFromSystem</do-it><do-it>Customer removeFromSystem</do-it><class><name>Employee</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name sername id </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#sername -&gt; Core.String); add: (#id -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sername">sername"generated by Daskalos"     ^sername</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sername:">sername: anObject"generated by Daskalos"     sername := (self checkValue: anObject forVariable: #sername)</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     sername := nil.     id := nil.</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="amount_of_sailed_books">amount_of_sailed_books	^self sailed_Books size</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Common_proceed">Common_proceed	^(self sailed_Books collect: [:x | x price]) sum</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="employees_percent">employees_percent	^(self sailed_Books collect: [:x | x price * 10 / 100]) sum asFloat</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="sailed_Books">sailed_Books	^Book allInstances select: [:x | x sailed_by = self]</body></methods><class><name>Book</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name author publication_date price sailed_by </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Book class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#sailed_by -&gt; Core.Object); add: (#publication_date -&gt; Core.Date); add: (#price -&gt; Core.Number); add: (#author -&gt; Core.String); yourself)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="author">author"generated by Daskalos"     ^author</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="author:">author: anObject"generated by Daskalos"     author := (self checkValue: anObject forVariable: #author)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price">price"generated by Daskalos"     ^price</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price:">price: anObject"generated by Daskalos"     price := (self checkValue: anObject forVariable: #price)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="publication_date">publication_date"generated by Daskalos"     ^publication_date</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="publication_date:">publication_date: anObject"generated by Daskalos"     publication_date := (self checkValue: anObject forVariable: #publication_date)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sailed_by">sailed_by"generated by Daskalos"     ^sailed_by</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sailed_by:">sailed_by: anObject"generated by Daskalos"     sailed_by := (self checkValue: anObject forVariable: #sailed_by)</body></methods><methods><class-id>Book</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     author := nil.     publication_date := nil.     price := nil.     sailed_by := nil.</body></methods><methods><class-id>Book</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="purchasers">purchasers	^(Client allInstances select: [:x | x purchase = self]) 		collect: [:x | x name]		with: [:x | x bank_account]		with: [:x | x sername]</body></methods><class><name>Client</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name sername bank_account purchase date_of_purchase </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Client class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#bank_account -&gt; Core.String); add: (#sername -&gt; Core.String); add: (#purchase -&gt; Core.Object); add: (#date_of_purchase -&gt; Core.Date); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="bank_account">bank_account"generated by Daskalos"     ^bank_account</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="bank_account:">bank_account: anObject"generated by Daskalos"     bank_account := (self checkValue: anObject forVariable: #bank_account)</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="date_of_purchase">date_of_purchase"generated by Daskalos"     ^date_of_purchase</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="date_of_purchase:">date_of_purchase: anObject"generated by Daskalos"     date_of_purchase := (self checkValue: anObject forVariable: #date_of_purchase)</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purchase">purchase"generated by Daskalos"     ^purchase</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purchase:">purchase: anObject"generated by Daskalos"     purchase := (self checkValue: anObject forVariable: #purchase)</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sername">sername"generated by Daskalos"     ^sername</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sername:">sername: anObject"generated by Daskalos"     sername := (self checkValue: anObject forVariable: #sername)</body></methods><methods><class-id>Client</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     sername := nil.     bank_account := nil.     purchase := nil.     date_of_purchase := nil.</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>Library</super><private>false</private><indexed-type>none</indexed-type><inst-vars>surname id </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#surname -&gt; Core.String); add: (#id -&gt; Core.String); yourself)</body></methods><remove-selector><class-id>Employee</class-id> <selector>name</selector></remove-selector><remove-selector><class-id>Employee</class-id> <selector>name:</selector></remove-selector><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     surname := nil.     id := nil.</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>Library</super><private>false</private><indexed-type>none</indexed-type><inst-vars>surname id firstname </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstname -&gt; Core.String); add: (#surname -&gt; Core.String); add: (#id -&gt; Core.String); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname:">firstname: anObject"generated by Daskalos"     firstname := (self checkValue: anObject forVariable: #firstname)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname">firstname"generated by Daskalos"     ^firstname</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     surname := nil.     id := nil.     firstname := nil.</body></methods><class><name>Library</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Library class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Library</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Library</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Library</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Library</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name location </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Library class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#location -&gt; Core.String); yourself)</body></methods><methods><class-id>Library</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="location:">location: anObject"generated by Daskalos"     location := (self checkValue: anObject forVariable: #location)</body></methods><methods><class-id>Library</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="location">location"generated by Daskalos"     ^location</body></methods><methods><class-id>Library</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     location := nil.</body></methods><class><name>Client</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>bank_account purchase date_of_purchase surname </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Client class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#purchase -&gt; Core.Object); add: (#date_of_purchase -&gt; Core.Date); add: (#surname -&gt; Core.String); add: (#bank_account -&gt; Core.String); yourself)</body></methods><remove-selector><class-id>Client</class-id> <selector>name</selector></remove-selector><remove-selector><class-id>Client</class-id> <selector>name:</selector></remove-selector><methods><class-id>Client</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     bank_account := nil.     purchase := nil.     date_of_purchase := nil.     surname := nil.</body></methods><class><name>Client</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>bank_account purchase date_of_purchase surname firstname </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Client class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#purchase -&gt; Core.Object); add: (#date_of_purchase -&gt; Core.Date); add: (#surname -&gt; Core.String); add: (#firstname -&gt; Core.String); add: (#bank_account -&gt; Core.String); yourself)</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname:">firstname: anObject"generated by Daskalos"     firstname := (self checkValue: anObject forVariable: #firstname)</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname">firstname"generated by Daskalos"     ^firstname</body></methods><methods><class-id>Client</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     bank_account := nil.     purchase := nil.     date_of_purchase := nil.     surname := nil.     firstname := nil.</body></methods><do-it>Employees := Set new.Books := Set new.Clients := Set new. "______________________Employees______________________"e1 := Employee new.e1 name: 'CZU Library'.e1 location: 'Kamycka'.e1 firstname: 'Steven'.e1 surname: 'Drake'.e1 id: 001.e2 := Employee new.e2 name: 'CZU Library'.e2 location: 'Kamycka'.e2 firstname: 'Alice'.e2 surname: 'Grow'.e2 id: 002.e3 := Employee new.e3 name: 'CZU Library'.e3 location: 'Kamycka'.e3 firstname: 'Morgan'.e3 surname: 'Freeman'.e3 id: 003.Employees add: e1; add: e2; add: e3."__________Books____________"b1 := Book new.b1 name: 'It'.b1 author: 'Steven King'.b1 publication_date: '15-SEP-1986' asDate.b1 price: 20 .b1 sold_by: e1.b2 := Book new.b2 name: 'Steve Jobs'.b2 author: 'Walter Isaacson'.b2 publication_date: '24-OCT-2011' asDate.b2 price: 30 .b2 sold_by: e1.b3 := Book new.b3 name: 'JavaScript &amp; jQuery'.b3 author: 'David Mcfarland'.b3 publication_date: '17-JUL-2008' asDate.b3 price: 37 .b3 sold_by: e1.b4 := Book new.b4 name: 'Complete code'.b4 author: 'Stive McKonnel'.b4 publication_date: '13-FEB-1993' asDate.b4 price: 70 .b4 sold_by: e1.b5 := Book new.b5 name: 'The Shining'.b5 author: 'Steven King'.b5 publication_date: '28-JUN-1977' asDate.b5 price: 15 .b5 sold_by: e3.b6 := Book new.b6 name: 'The Lord of The Rings The Fellowship of the Ring'.b6 author: 'J. R. R. Tolkien'.b6 publication_date: '29-JUL-1954' asDate.b6 price: 30 .b6 sold_by: e1.b7 := Book new.b7 name: 'Shantaram'.b7 author: 'David Roberts'.b7 publication_date: '7-AUG-2003' asDate.b7 price: 37.b7 sold_by: e1.b8 := Book new.b8 name: 'Norwagian Wood'.b8 author: 'Haruki Murakami'.b8 publication_date: '4-SEP-1987' asDate.b8 price: 10.b8 sold_by: e1.b9 := Book new.b9 name: '1Q84: Book 1'.b9 author: 'Haruki Murakami'.b9 publication_date: '29-MAY-2009' asDate.b9 price: 15.b9 sold_by: e1.b10 := Book new.b10 name: '1Q84: Book 2'.b10 author: 'Haruki Murakami'.b10 publication_date: '29-MAY-2009' asDate.b10 price: 15.b10 sold_by: e3.b11 := Book new.b11 name: '1Q84: Book 3'.b11 author: 'Haruki Murakami'.b11 publication_date: '16-APR-2010' asDate.b11 price: 15.b11 sold_by: e3.b12 := Book new.b12 name: 'The Rising'.b12 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b12 publication_date: '31-MAR-2005' asDate.b12 price: 15.b12 sold_by: e1.b13 := Book new.b13 name: 'The Regime'.b13 author: 'Tim LaHaye&amp;Jerry B Jenkins'.b13 publication_date: '15-NOV-2005' asDate.b13 price: 15.b13 sold_by: e1.b14 := Book new.b14 name: 'The Rapture'.b14 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b14 publication_date: '6-JUN-2006' asDate.b14 price: 15.b14 sold_by: e2.b15 := Book new.b15 name: 'Left Behind'.b15 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b15 publication_date: '31-DEC-1995' asDate.b15 price: 17.b15 sold_by: e1.b16 := Book new.b16 name: 'Tribulation Force'.b16 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b16 publication_date: '29-OCT-1996' asDate.b16 price: 15.b16 sold_by: e1.b17 := Book new.b17 name: 'Nicolae'.b17 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b17 publication_date: '1-OCT-1997' asDate.b17 price: 15.b17 sold_by: e3.b18 := Book new.b18 name: 'Soul Harvest'.b18 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b18 publication_date: '1-FEB-1998' asDate.b18 price: 15.b18 sold_by: e3.b19 := Book new.b19 name: 'Apollyon'.b19 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b19 publication_date: '1-FEB-1999' asDate.b19 price: 15.b19 sold_by: e2.b20 := Book new.b20 name: 'Assassins'.b20 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b20 publication_date: '15-AUG-1999' asDate.b20 price: 15.b20 sold_by: e2.b21 := Book new.b21 name: 'The Indwelling'.b21 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b21 publication_date: '4-MAY-2000' asDate.b21 price: 15.b21 sold_by: e2.b22  := Book new.b22 name: 'The Mark'.b22 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b22 publication_date: '9-NOV-2000' asDate.b22 price: 15.b22 sold_by: e3.b23 := Book new.b23 name: 'Desecration'.b23 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b23 publication_date: '30-OCT-2001' asDate.b23 price: 15.b23 sold_by: e2.b24 := Book new.b24 name: 'Desecration'.b24 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b24 publication_date: '30-OCT-2001' asDate.b24 price: 15.b24 sold_by: e2.b25  := Book new.b25 name: 'The Remnant'.b25 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b25 publication_date: '3-JUL-2002' asDate.b25 price: 15.b25 sold_by: e2.b26 := Book new.b26 name: 'Armageddon	'.b26 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b26 publication_date: '14-APR-2003' asDate.b26 price: 15.b26 sold_by: e2.b27 := Book new.b27 name: 'Glorious Appearing'.b27 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b27 publication_date: '30-MAR-2004' asDate.b27 price: 15.b27 sold_by: e2.b28 := Book new.b28 name: 'Kingdom Come	'.b28 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b28 publication_date: '7-APR-2007' asDate.b28 price: 15.b28 sold_by: e1.b29 := Book new.b29 name: 'Programming language C# 7 and NET palforms and NET CORE'.b29 author: 'Philip Japikse&amp;Andrew Troelsen'.b29 publication_date: '30-NOV-2019' asDate.b29 price: 30.b29 sold_by: e1.b30 := Book new.b30 name: 'Grokking Algorithms'.b30 author: 'Aditya Bhargava'.b30 publication_date: '30-MAY-2016' asDate.b30 price: 47.b30 sold_by: e2.Books add: b1; add: b2; add: b3; add: b4; add: b5; add: b6; add: b7; add: b8; add: b9; add: b10; add: b11; add: b12; add: b13; add: b14; add: b15; add: b16; add: b17; add: b18; add: b19; add: b20; add: b21; add: b22; add: b23; add: b24; add: b25; add: b26; add: b27; add: b28; add: b29; add: b30."______________________Clients______________________"c1 := Client new.c1 firstname: 'Carl'.c1 surname: 'Grimes'.c1 bank_account: '56777652/0008'.c1 purchase:  b1.c1 date_of_purchase: ' 4-AUG-2019' asDate.c2 := Client new.c2 firstname: 'Rick'.c2 surname: 'Grimes'.c2 bank_account: '012328498/008'.c2 purchase:  b2.c2 date_of_purchase: '5-MAR-2020' asDate.c3 := Client new.c3 firstname: 'Lori'.c3 surname: 'Grimes'.c3 bank_account: '5943509/008'.c3 purchase:  b3.c3 date_of_purchase: '16-AUG-2020' asDate.c4 := Client new.c4 firstname: 'Judith'.c4 surname: 'Grimes'.c4 bank_account:  '42352345325/008'.c4 purchase:  b6.c4 date_of_purchase: '21-MAR-2020' asDate.c5 := Client new.c5 firstname: 'Glenn'.c5 surname: 'Rhee'.c5 bank_account: '49850934798/008'.c5 purchase:  b5.c5 date_of_purchase: '20-JUN-2020' asDate.c6 := Client new.c6 firstname: 'Magy'.c6 surname: 'Rhee'.c6 bank_account: '12524565361/008'.c6 purchase:  b4.c6 date_of_purchase: '5-APR-2020' asDate.c7 := Client new.c7 firstname: 'Shane'.c7 surname: 'Walsh'.c7 bank_account: '23626341241/008'.c7 purchase:  b7.c7 date_of_purchase: '21-APR-2020' asDate.c8 := Client new.c8 firstname: 'Merle'.c8 surname: 'Dikson'.c8 bank_account: '2362623623/008'.c8 purchase:  b8.c8 date_of_purchase: '19-SEP-2019' asDate.c9  := Client new.c9 firstname: 'Daryl'.c9 surname: 'Dikson'.c9 bank_account: '23626236/008'.c9 purchase:  b9.c9 date_of_purchase: '4-MAY-2020' asDate.c10 := Client new.c10 firstname: 'Carol'.c10 surname: 'Peletier'.c10 bank_account: '326262523532/008'.c10 purchase:  b10.c10 date_of_purchase: '31-OCT-2019' asDate.c11 := Client new.c11 firstname: 'Hershel'.c11 surname: 'Greene'.c11 bank_account: '133161613/008'.c11 purchase:  b13.c11 date_of_purchase: '1-NOV-2020' asDate.c12 := Client new.c12 firstname: 'Beth'.c12 surname: 'Greene'.c12 bank_account: '165136161/008'.c12 purchase:  b12.c12 date_of_purchase: '28-JUN-2020' asDate.c13  := Client new.c13 firstname: 'Rosita'.c13 surname: 'Espinosa'.c13 bank_account: '32235235/008'.c13 purchase:  b11.c13 date_of_purchase: '30-AUG-2020' asDate.c14 := Client new.c14 firstname: 'Teodor'.c14 surname: 'Douglas'.c14 bank_account: '1252151512 /008'.c14 purchase:  b14.c14 date_of_purchase: '30-MAR-2020' asDate.c15 := Client new.c15 firstname: 'Sasha'.c15 surname: 'Williams'.c15 bank_account: '215215151/008'.c15 purchase:  b15.c15 date_of_purchase: '18-NOV-2019' asDate.c16 := Client new.c16 firstname: 'Abrakham'.c16 surname: 'Ford'.c16 bank_account: '12515616131/008'.c16 purchase:  b16.c16 date_of_purchase: '4-OCT-2020' asDate.c17 := Client new.c17 firstname: 'Eugine'.c17 surname: 'Porter'.c17 bank_account: '1251521562/008'.c17 purchase:  b17.c17 date_of_purchase: '19-AUG-2020' asDate.c18 := Client new.c18 firstname: 'Spencer'.c18 surname: 'Monro'.c18 bank_account: '23626326/008'.c18 purchase:  b18.c18 date_of_purchase: '25-OCT-2020' asDate.c19 := Client new.c19 firstname: 'Deanna'.c19 surname: 'Monro'.c19 bank_account: '347437347347/008'.c19 purchase:  b20.c19 date_of_purchase: '19-APR-2018' asDate.c20 := Client new.c20 firstname: 'Jessie'.c20 surname: 'Anderson'.c20 bank_account: '3473474373/008'.c20 purchase:  b19.c20 date_of_purchase: '9-NOV-2018' asDate.c21 := Client new.c21 firstname: 'Bob'.c21 surname: 'Stookey'.c21 bank_account: '34734737347/008'.c21 purchase:  b22.c21 date_of_purchase: '30-MAR-2021' asDate.c22 := Client new.c22 firstname: 'Tyreese'.c22 surname: 'Williams'.c22 bank_account: '34763734383/008'.c22 purchase:  b21.c22 date_of_purchase: '25-JAN-2020' asDate.c23 := Client new.c23 firstname: 'Tara'.c23 surname: 'Chambler'.c23 bank_account:'3473456346/008'.c23 purchase:  b23.c23 date_of_purchase: '3-JUL-2020' asDate.c24 := Client new.c24 firstname: 'Chester'.c24 surname: 'Jones'.c24 bank_account: '378658574/008'.c24 purchase:  b24.c24 date_of_purchase: '15-MAY-2020' asDate.c25 := Client new.c25 firstname: 'Morgan'.c25 surname: 'Jones'.c25 bank_account: '533456346737/008'.c25 purchase:  b25.c25 date_of_purchase: '14-NOV-2020' asDate.c26 := Client new.c26 firstname: 'Austin'.c26 surname: 'Amelio'.c26 bank_account: '5458467456456/008'.c26 purchase:  b26.c26 date_of_purchase: '27-JUN-2020' asDate.c27 := Client new.c27 firstname: 'Tom'.c27 surname: 'Payne'.c27 bank_account: '444564745458/008'.c27 purchase: b27.c27 date_of_purchase: '6-SEP-2020' asDate.c28 := Client new.c28 firstname: 'Khary'.c28 surname: 'Payton'.c28 bank_account: '64363484581/008'.c28 purchase:  b29.c28 date_of_purchase: '2-MAR-2021' asDate.c29  := Client new.c29 firstname: 'Steven'.c29 surname: 'Ogg'.c29 bank_account: '334545345/008'.c29 purchase:  b30.c29 date_of_purchase: '11-FEB-2020' asDate.c30 := Client new.c30 firstname: 'Katelyn'.c30 surname: 'Nacon'.c30 bank_account: '24124125215/008'.c30 purchase:  b28.c30 date_of_purchase: '7-June-2019' asDate.Clients add: c1; add: c2; add: c3; add: c4; add: c5; add: c6; add: c7; add: c8; add: c9; add: c10; add: c11; add: c12; add: c13; add: c14; add: c15; add: c16; add: c17; add: c18; add: c19; add: c20; add: c21; add: c22; add: c23; add: c24; add: c25; add: c26; add: c27; add: c28; add: c29;  add: c30.</do-it><class><name>Employee</name><environment>Smalltalk</environment><super>Library</super><private>false</private><indexed-type>none</indexed-type><inst-vars>surname firstname </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstname -&gt; Core.String); add: (#surname -&gt; Core.String); yourself)</body></methods><remove-selector><class-id>Employee</class-id> <selector>id</selector></remove-selector><remove-selector><class-id>Employee</class-id> <selector>id:</selector></remove-selector><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     surname := nil.     firstname := nil.</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>Library</super><private>false</private><indexed-type>none</indexed-type><inst-vars>surname firstname id </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstname -&gt; Core.String); add: (#surname -&gt; Core.String); add: (#id -&gt; Core.Number); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     surname := nil.     firstname := nil.     id := nil.</body></methods><do-it>Employees := Set new.Books := Set new.Clients := Set new. "______________________Employees______________________"e1 := Employee new.e1 name: 'CZU Library'.e1 location: 'Kamycka'.e1 firstname: 'Steven'.e1 surname: 'Drake'.e1 id: 001.e2 := Employee new.e2 name: 'CZU Library'.e2 location: 'Kamycka'.e2 firstname: 'Alice'.e2 surname: 'Grow'.e2 id: 002.e3 := Employee new.e3 name: 'CZU Library'.e3 location: 'Kamycka'.e3 firstname: 'Morgan'.e3 surname: 'Freeman'.e3 id: 003.Employees add: e1; add: e2; add: e3."__________Books____________"b1 := Book new.b1 name: 'It'.b1 author: 'Steven King'.b1 publication_date: '15-SEP-1986' asDate.b1 price: 20 .b1 sold_by: e1.b2 := Book new.b2 name: 'Steve Jobs'.b2 author: 'Walter Isaacson'.b2 publication_date: '24-OCT-2011' asDate.b2 price: 30 .b2 sold_by: e1.b3 := Book new.b3 name: 'JavaScript &amp; jQuery'.b3 author: 'David Mcfarland'.b3 publication_date: '17-JUL-2008' asDate.b3 price: 37 .b3 sold_by: e1.b4 := Book new.b4 name: 'Complete code'.b4 author: 'Stive McKonnel'.b4 publication_date: '13-FEB-1993' asDate.b4 price: 70 .b4 sold_by: e1.b5 := Book new.b5 name: 'The Shining'.b5 author: 'Steven King'.b5 publication_date: '28-JUN-1977' asDate.b5 price: 15 .b5 sold_by: e3.b6 := Book new.b6 name: 'The Lord of The Rings The Fellowship of the Ring'.b6 author: 'J. R. R. Tolkien'.b6 publication_date: '29-JUL-1954' asDate.b6 price: 30 .b6 sold_by: e1.b7 := Book new.b7 name: 'Shantaram'.b7 author: 'David Roberts'.b7 publication_date: '7-AUG-2003' asDate.b7 price: 37.b7 sold_by: e1.b8 := Book new.b8 name: 'Norwagian Wood'.b8 author: 'Haruki Murakami'.b8 publication_date: '4-SEP-1987' asDate.b8 price: 10.b8 sold_by: e1.b9 := Book new.b9 name: '1Q84: Book 1'.b9 author: 'Haruki Murakami'.b9 publication_date: '29-MAY-2009' asDate.b9 price: 15.b9 sold_by: e1.b10 := Book new.b10 name: '1Q84: Book 2'.b10 author: 'Haruki Murakami'.b10 publication_date: '29-MAY-2009' asDate.b10 price: 15.b10 sold_by: e3.b11 := Book new.b11 name: '1Q84: Book 3'.b11 author: 'Haruki Murakami'.b11 publication_date: '16-APR-2010' asDate.b11 price: 15.b11 sold_by: e3.b12 := Book new.b12 name: 'The Rising'.b12 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b12 publication_date: '31-MAR-2005' asDate.b12 price: 15.b12 sold_by: e1.b13 := Book new.b13 name: 'The Regime'.b13 author: 'Tim LaHaye&amp;Jerry B Jenkins'.b13 publication_date: '15-NOV-2005' asDate.b13 price: 15.b13 sold_by: e1.b14 := Book new.b14 name: 'The Rapture'.b14 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b14 publication_date: '6-JUN-2006' asDate.b14 price: 15.b14 sold_by: e2.b15 := Book new.b15 name: 'Left Behind'.b15 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b15 publication_date: '31-DEC-1995' asDate.b15 price: 17.b15 sold_by: e1.b16 := Book new.b16 name: 'Tribulation Force'.b16 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b16 publication_date: '29-OCT-1996' asDate.b16 price: 15.b16 sold_by: e1.b17 := Book new.b17 name: 'Nicolae'.b17 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b17 publication_date: '1-OCT-1997' asDate.b17 price: 15.b17 sold_by: e3.b18 := Book new.b18 name: 'Soul Harvest'.b18 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b18 publication_date: '1-FEB-1998' asDate.b18 price: 15.b18 sold_by: e3.b19 := Book new.b19 name: 'Apollyon'.b19 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b19 publication_date: '1-FEB-1999' asDate.b19 price: 15.b19 sold_by: e2.b20 := Book new.b20 name: 'Assassins'.b20 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b20 publication_date: '15-AUG-1999' asDate.b20 price: 15.b20 sold_by: e2.b21 := Book new.b21 name: 'The Indwelling'.b21 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b21 publication_date: '4-MAY-2000' asDate.b21 price: 15.b21 sold_by: e2.b22  := Book new.b22 name: 'The Mark'.b22 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b22 publication_date: '9-NOV-2000' asDate.b22 price: 15.b22 sold_by: e3.b23 := Book new.b23 name: 'Desecration'.b23 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b23 publication_date: '30-OCT-2001' asDate.b23 price: 15.b23 sold_by: e2.b24 := Book new.b24 name: 'Desecration'.b24 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b24 publication_date: '30-OCT-2001' asDate.b24 price: 15.b24 sold_by: e2.b25  := Book new.b25 name: 'The Remnant'.b25 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b25 publication_date: '3-JUL-2002' asDate.b25 price: 15.b25 sold_by: e2.b26 := Book new.b26 name: 'Armageddon	'.b26 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b26 publication_date: '14-APR-2003' asDate.b26 price: 15.b26 sold_by: e2.b27 := Book new.b27 name: 'Glorious Appearing'.b27 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b27 publication_date: '30-MAR-2004' asDate.b27 price: 15.b27 sold_by: e2.b28 := Book new.b28 name: 'Kingdom Come	'.b28 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b28 publication_date: '7-APR-2007' asDate.b28 price: 15.b28 sold_by: e1.b29 := Book new.b29 name: 'Programming language C# 7 and NET palforms and NET CORE'.b29 author: 'Philip Japikse&amp;Andrew Troelsen'.b29 publication_date: '30-NOV-2019' asDate.b29 price: 30.b29 sold_by: e1.b30 := Book new.b30 name: 'Grokking Algorithms'.b30 author: 'Aditya Bhargava'.b30 publication_date: '30-MAY-2016' asDate.b30 price: 47.b30 sold_by: e2.Books add: b1; add: b2; add: b3; add: b4; add: b5; add: b6; add: b7; add: b8; add: b9; add: b10; add: b11; add: b12; add: b13; add: b14; add: b15; add: b16; add: b17; add: b18; add: b19; add: b20; add: b21; add: b22; add: b23; add: b24; add: b25; add: b26; add: b27; add: b28; add: b29; add: b30."______________________Clients______________________"c1 := Client new.c1 firstname: 'Carl'.c1 surname: 'Grimes'.c1 bank_account: '56777652/0008'.c1 purchase:  b1.c1 date_of_purchase: ' 4-AUG-2019' asDate.c2 := Client new.c2 firstname: 'Rick'.c2 surname: 'Grimes'.c2 bank_account: '012328498/008'.c2 purchase:  b2.c2 date_of_purchase: '5-MAR-2020' asDate.c3 := Client new.c3 firstname: 'Lori'.c3 surname: 'Grimes'.c3 bank_account: '5943509/008'.c3 purchase:  b3.c3 date_of_purchase: '16-AUG-2020' asDate.c4 := Client new.c4 firstname: 'Judith'.c4 surname: 'Grimes'.c4 bank_account:  '42352345325/008'.c4 purchase:  b6.c4 date_of_purchase: '21-MAR-2020' asDate.c5 := Client new.c5 firstname: 'Glenn'.c5 surname: 'Rhee'.c5 bank_account: '49850934798/008'.c5 purchase:  b5.c5 date_of_purchase: '20-JUN-2020' asDate.c6 := Client new.c6 firstname: 'Magy'.c6 surname: 'Rhee'.c6 bank_account: '12524565361/008'.c6 purchase:  b4.c6 date_of_purchase: '5-APR-2020' asDate.c7 := Client new.c7 firstname: 'Shane'.c7 surname: 'Walsh'.c7 bank_account: '23626341241/008'.c7 purchase:  b7.c7 date_of_purchase: '21-APR-2020' asDate.c8 := Client new.c8 firstname: 'Merle'.c8 surname: 'Dikson'.c8 bank_account: '2362623623/008'.c8 purchase:  b8.c8 date_of_purchase: '19-SEP-2019' asDate.c9  := Client new.c9 firstname: 'Daryl'.c9 surname: 'Dikson'.c9 bank_account: '23626236/008'.c9 purchase:  b9.c9 date_of_purchase: '4-MAY-2020' asDate.c10 := Client new.c10 firstname: 'Carol'.c10 surname: 'Peletier'.c10 bank_account: '326262523532/008'.c10 purchase:  b10.c10 date_of_purchase: '31-OCT-2019' asDate.c11 := Client new.c11 firstname: 'Hershel'.c11 surname: 'Greene'.c11 bank_account: '133161613/008'.c11 purchase:  b13.c11 date_of_purchase: '1-NOV-2020' asDate.c12 := Client new.c12 firstname: 'Beth'.c12 surname: 'Greene'.c12 bank_account: '165136161/008'.c12 purchase:  b12.c12 date_of_purchase: '28-JUN-2020' asDate.c13  := Client new.c13 firstname: 'Rosita'.c13 surname: 'Espinosa'.c13 bank_account: '32235235/008'.c13 purchase:  b11.c13 date_of_purchase: '30-AUG-2020' asDate.c14 := Client new.c14 firstname: 'Teodor'.c14 surname: 'Douglas'.c14 bank_account: '1252151512 /008'.c14 purchase:  b14.c14 date_of_purchase: '30-MAR-2020' asDate.c15 := Client new.c15 firstname: 'Sasha'.c15 surname: 'Williams'.c15 bank_account: '215215151/008'.c15 purchase:  b15.c15 date_of_purchase: '18-NOV-2019' asDate.c16 := Client new.c16 firstname: 'Abrakham'.c16 surname: 'Ford'.c16 bank_account: '12515616131/008'.c16 purchase:  b16.c16 date_of_purchase: '4-OCT-2020' asDate.c17 := Client new.c17 firstname: 'Eugine'.c17 surname: 'Porter'.c17 bank_account: '1251521562/008'.c17 purchase:  b17.c17 date_of_purchase: '19-AUG-2020' asDate.c18 := Client new.c18 firstname: 'Spencer'.c18 surname: 'Monro'.c18 bank_account: '23626326/008'.c18 purchase:  b18.c18 date_of_purchase: '25-OCT-2020' asDate.c19 := Client new.c19 firstname: 'Deanna'.c19 surname: 'Monro'.c19 bank_account: '347437347347/008'.c19 purchase:  b20.c19 date_of_purchase: '19-APR-2018' asDate.c20 := Client new.c20 firstname: 'Jessie'.c20 surname: 'Anderson'.c20 bank_account: '3473474373/008'.c20 purchase:  b19.c20 date_of_purchase: '9-NOV-2018' asDate.c21 := Client new.c21 firstname: 'Bob'.c21 surname: 'Stookey'.c21 bank_account: '34734737347/008'.c21 purchase:  b22.c21 date_of_purchase: '30-MAR-2021' asDate.c22 := Client new.c22 firstname: 'Tyreese'.c22 surname: 'Williams'.c22 bank_account: '34763734383/008'.c22 purchase:  b21.c22 date_of_purchase: '25-JAN-2020' asDate.c23 := Client new.c23 firstname: 'Tara'.c23 surname: 'Chambler'.c23 bank_account:'3473456346/008'.c23 purchase:  b23.c23 date_of_purchase: '3-JUL-2020' asDate.c24 := Client new.c24 firstname: 'Chester'.c24 surname: 'Jones'.c24 bank_account: '378658574/008'.c24 purchase:  b24.c24 date_of_purchase: '15-MAY-2020' asDate.c25 := Client new.c25 firstname: 'Morgan'.c25 surname: 'Jones'.c25 bank_account: '533456346737/008'.c25 purchase:  b25.c25 date_of_purchase: '14-NOV-2020' asDate.c26 := Client new.c26 firstname: 'Austin'.c26 surname: 'Amelio'.c26 bank_account: '5458467456456/008'.c26 purchase:  b26.c26 date_of_purchase: '27-JUN-2020' asDate.c27 := Client new.c27 firstname: 'Tom'.c27 surname: 'Payne'.c27 bank_account: '444564745458/008'.c27 purchase: b27.c27 date_of_purchase: '6-SEP-2020' asDate.c28 := Client new.c28 firstname: 'Khary'.c28 surname: 'Payton'.c28 bank_account: '64363484581/008'.c28 purchase:  b29.c28 date_of_purchase: '2-MAR-2021' asDate.c29  := Client new.c29 firstname: 'Steven'.c29 surname: 'Ogg'.c29 bank_account: '334545345/008'.c29 purchase:  b30.c29 date_of_purchase: '11-FEB-2020' asDate.c30 := Client new.c30 firstname: 'Katelyn'.c30 surname: 'Nacon'.c30 bank_account: '24124125215/008'.c30 purchase:  b28.c30 date_of_purchase: '7-June-2019' asDate.Clients add: c1; add: c2; add: c3; add: c4; add: c5; add: c6; add: c7; add: c8; add: c9; add: c10; add: c11; add: c12; add: c13; add: c14; add: c15; add: c16; add: c17; add: c18; add: c19; add: c20; add: c21; add: c22; add: c23; add: c24; add: c25; add: c26; add: c27; add: c28; add: c29;  add: c30.</do-it><class><name>Book</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name author publication_date price sold_by </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Book class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#publication_date -&gt; Core.Date); add: (#price -&gt; Core.Number); add: (#sold_by -&gt; Core.Object); add: (#author -&gt; Core.String); yourself)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sold_by:">sold_by: anObject"generated by Daskalos"     sold_by := (self checkValue: anObject forVariable: #sold_by)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sold_by">sold_by"generated by Daskalos"     ^sold_by</body></methods><methods><class-id>Book</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     author := nil.     publication_date := nil.     price := nil.     sold_by := nil.</body></methods><class><name>Library</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Employees</name><environment>Smalltalk</environment><super>Library</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><do-it>Employees renameTo: #Employee</do-it><class><name>Book</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Customer</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Library</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Library class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Library</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Library</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Library</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Library</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name location </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Library class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#location -&gt; Core.String); yourself)</body></methods><methods><class-id>Library</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="location:">location: anObject"generated by Daskalos"     location := (self checkValue: anObject forVariable: #location)</body></methods><methods><class-id>Library</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="location">location"generated by Daskalos"     ^location</body></methods><methods><class-id>Library</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     location := nil.</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>Library</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstname -&gt; Core.String); add: (#location -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname:">firstname: anObject"generated by Daskalos"     firstname := (self checkValue: anObject forVariable: #firstname)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname">firstname"generated by Daskalos"     ^firstname</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>Library</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname lastname </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstname -&gt; Core.String); add: (#location -&gt; Core.String); add: (#lastname -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastname:">lastname: anObject"generated by Daskalos"     lastname := (self checkValue: anObject forVariable: #lastname)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastname">lastname"generated by Daskalos"     ^lastname</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     lastname := nil.</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>Library</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname lastname id </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstname -&gt; Core.String); add: (#lastname -&gt; Core.String); add: (#location -&gt; Core.String); add: (#id -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     lastname := nil.     id := nil.</body></methods><class><name>Book</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Book class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Book</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Book</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name author </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Book class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#author -&gt; Core.String); yourself)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="author:">author: anObject"generated by Daskalos"     author := (self checkValue: anObject forVariable: #author)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="author">author"generated by Daskalos"     ^author</body></methods><methods><class-id>Book</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     author := nil.</body></methods><class><name>Book</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name author publication_date </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Book class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#publication_date -&gt; Core.Date); add: (#author -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="publication_date:">publication_date: anObject"generated by Daskalos"     publication_date := (self checkValue: anObject forVariable: #publication_date)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="publication_date">publication_date"generated by Daskalos"     ^publication_date</body></methods><methods><class-id>Book</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     author := nil.     publication_date := nil.</body></methods><class><name>Book</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name author publication_date price </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Book class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#publication_date -&gt; Core.Date); add: (#author -&gt; Core.String); add: (#price -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price:">price: anObject"generated by Daskalos"     price := (self checkValue: anObject forVariable: #price)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price">price"generated by Daskalos"     ^price</body></methods><methods><class-id>Book</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     author := nil.     publication_date := nil.     price := nil.</body></methods><class><name>Book</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name author publication_date price sold_by </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Book class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#author -&gt; Core.String); add: (#name -&gt; Core.String); add: (#sold_by -&gt; Core.Object); add: (#price -&gt; Core.Number); add: (#publication_date -&gt; Core.Date); yourself)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sold_by:">sold_by: anObject"generated by Daskalos"     sold_by := (self checkValue: anObject forVariable: #sold_by)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sold_by">sold_by"generated by Daskalos"     ^sold_by</body></methods><methods><class-id>Book</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     author := nil.     publication_date := nil.     price := nil.     sold_by := nil.</body></methods><class><name>Customer</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Customer class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstname -&gt; Core.String); yourself)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname:">firstname: anObject"generated by Daskalos"     firstname := (self checkValue: anObject forVariable: #firstname)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname">firstname"generated by Daskalos"     ^firstname</body></methods><methods><class-id>Customer</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.</body></methods><class><name>Customer</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname lastname </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Customer class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstname -&gt; Core.String); add: (#lastname -&gt; Core.String); yourself)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastname:">lastname: anObject"generated by Daskalos"     lastname := (self checkValue: anObject forVariable: #lastname)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastname">lastname"generated by Daskalos"     ^lastname</body></methods><methods><class-id>Customer</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     lastname := nil.</body></methods><class><name>Customer</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname lastname date_of_purchase </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Customer class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstname -&gt; Core.String); add: (#lastname -&gt; Core.String); add: (#date_of_purchase -&gt; Core.Date); yourself)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="date_of_purchase:">date_of_purchase: anObject"generated by Daskalos"     date_of_purchase := (self checkValue: anObject forVariable: #date_of_purchase)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="date_of_purchase">date_of_purchase"generated by Daskalos"     ^date_of_purchase</body></methods><methods><class-id>Customer</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     lastname := nil.     date_of_purchase := nil.</body></methods><class><name>Customer</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname lastname date_of_purchase payment_type </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Customer class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstname -&gt; Core.String); add: (#lastname -&gt; Core.String); add: (#date_of_purchase -&gt; Core.Date); add: (#payment_type -&gt; Core.String); yourself)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="payment_type:">payment_type: anObject"generated by Daskalos"     payment_type := (self checkValue: anObject forVariable: #payment_type)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="payment_type">payment_type"generated by Daskalos"     ^payment_type</body></methods><methods><class-id>Customer</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     lastname := nil.     date_of_purchase := nil.     payment_type := nil.</body></methods><class><name>Customer</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname lastname date_of_purchase payment_type purchase </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Customer class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstname -&gt; Core.String); add: (#lastname -&gt; Core.String); add: (#date_of_purchase -&gt; Core.Date); add: (#payment_type -&gt; Core.String); add: (#purchase -&gt; Core.Object); yourself)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purchase:">purchase: anObject"generated by Daskalos"     purchase := (self checkValue: anObject forVariable: #purchase)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purchase">purchase"generated by Daskalos"     ^purchase</body></methods><methods><class-id>Customer</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     lastname := nil.     date_of_purchase := nil.     payment_type := nil.     purchase := nil.</body></methods><class><name>Customer</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname date_of_purchase payment_type purchase </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Customer class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstname -&gt; Core.String); add: (#payment_type -&gt; Core.String); add: (#date_of_purchase -&gt; Core.Date); add: (#purchase -&gt; Core.Object); yourself)</body></methods><remove-selector><class-id>Customer</class-id> <selector>lastname</selector></remove-selector><remove-selector><class-id>Customer</class-id> <selector>lastname:</selector></remove-selector><methods><class-id>Customer</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     date_of_purchase := nil.     payment_type := nil.     purchase := nil.</body></methods><class><name>Customer</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname date_of_purchase payment_type purchase surname </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Customer class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstname -&gt; Core.String); add: (#payment_type -&gt; Core.String); add: (#date_of_purchase -&gt; Core.Date); add: (#purchase -&gt; Core.Object); add: (#surname -&gt; Core.String); yourself)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surname:">surname: anObject"generated by Daskalos"     surname := (self checkValue: anObject forVariable: #surname)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surname">surname"generated by Daskalos"     ^surname</body></methods><methods><class-id>Customer</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     date_of_purchase := nil.     payment_type := nil.     purchase := nil.     surname := nil.</body></methods><class><name>Customer</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname date_of_purchase payment_type purchase </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Customer class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstname -&gt; Core.String); add: (#payment_type -&gt; Core.String); add: (#date_of_purchase -&gt; Core.Date); add: (#purchase -&gt; Core.Object); yourself)</body></methods><remove-selector><class-id>Customer</class-id> <selector>surname</selector></remove-selector><remove-selector><class-id>Customer</class-id> <selector>surname:</selector></remove-selector><methods><class-id>Customer</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     date_of_purchase := nil.     payment_type := nil.     purchase := nil.</body></methods><class><name>Customer</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname date_of_purchase payment_type purchase lastname </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Customer class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstname -&gt; Core.String); add: (#payment_type -&gt; Core.String); add: (#date_of_purchase -&gt; Core.Date); add: (#purchase -&gt; Core.Object); add: (#lastname -&gt; Core.String); yourself)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastname:">lastname: anObject"generated by Daskalos"     lastname := (self checkValue: anObject forVariable: #lastname)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastname">lastname"generated by Daskalos"     ^lastname</body></methods><methods><class-id>Customer</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     date_of_purchase := nil.     payment_type := nil.     purchase := nil.     lastname := nil.</body></methods><class><name>Customer</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname date_of_purchase payment_type purchase </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Customer class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstname -&gt; Core.String); add: (#payment_type -&gt; Core.String); add: (#date_of_purchase -&gt; Core.Date); add: (#purchase -&gt; Core.Object); yourself)</body></methods><remove-selector><class-id>Customer</class-id> <selector>lastname</selector></remove-selector><remove-selector><class-id>Customer</class-id> <selector>lastname:</selector></remove-selector><methods><class-id>Customer</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     date_of_purchase := nil.     payment_type := nil.     purchase := nil.</body></methods><class><name>Customer</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname date_of_purchase payment_type purchase surname </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Customer class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstname -&gt; Core.String); add: (#payment_type -&gt; Core.String); add: (#date_of_purchase -&gt; Core.Date); add: (#purchase -&gt; Core.Object); add: (#surname -&gt; Core.String); yourself)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surname:">surname: anObject"generated by Daskalos"     surname := (self checkValue: anObject forVariable: #surname)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surname">surname"generated by Daskalos"     ^surname</body></methods><methods><class-id>Customer</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     date_of_purchase := nil.     payment_type := nil.     purchase := nil.     surname := nil.</body></methods><do-it>Employees := Set new.Books := Set new.Customers := Set new. "______________________Employees______________________"e1 := Employee new.e1 name: 'CZU Library'.e1 location: 'Kamycka'.e1 firstname: 'Steven'.e1 lastname: 'Drake'.e1 id: 001.e2 := Employee new.e2 name: 'CZU Library'.e2 location: 'Kamycka'.e2 firstname: 'Alice'.e2 lastname: 'Grow'.e2 id: 002.e3 := Employee new.e3 name: 'CZU Library'.e3 location: 'Kamycka'.e3 firstname: 'Morgan'.e3 lastname: 'Freeman'.e3 id: 003.Employees add: e1; add: e2; add: e3."__________Books____________"b1 := Book new.b1 name: 'It'.b1 author: 'Steven King'.b1 publication_date: '15-SEP-1986' asDate.b1 price: 20 .b1 sold_by: e1.b2 := Book new.b2 name: 'Steve Jobs'.b2 author: 'Walter Isaacson'.b2 publication_date: '24-OCT-2011' asDate.b2 price: 30 .b2 sold_by: e1.b3 := Book new.b3 name: 'JavaScript &amp; jQuery'.b3 author: 'David Mcfarland'.b3 publication_date: '17-JUL-2008' asDate.b3 price: 37 .b3 sold_by: e1.b4 := Book new.b4 name: 'Complete code'.b4 author: 'Stive McKonnel'.b4 publication_date: '13-FEB-1993' asDate.b4 price: 70 .b4 sold_by: e1.b5 := Book new.b5 name: 'The Shining'.b5 author: 'Steven King'.b5 publication_date: '28-JUN-1977' asDate.b5 price: 15 .b5 sold_by: e3.b6 := Book new.b6 name: 'The Lord of The Rings The Fellowship of the Ring'.b6 author: 'J. R. R. Tolkien'.b6 publication_date: '29-JUL-1954' asDate.b6 price: 30 .b6 sold_by: e1.b7 := Book new.b7 name: 'Shantaram'.b7 author: 'David Roberts'.b7 publication_date: '7-AUG-2003' asDate.b7 price: 37.b7 sold_by: e1.b8 := Book new.b8 name: 'Norwagian Wood'.b8 author: 'Haruki Murakami'.b8 publication_date: '4-SEP-1987' asDate.b8 price: 10.b8 sold_by: e1.b9 := Book new.b9 name: '1Q84: Book 1'.b9 author: 'Haruki Murakami'.b9 publication_date: '29-MAY-2009' asDate.b9 price: 15.b9 sold_by: e1.b10 := Book new.b10 name: '1Q84: Book 2'.b10 author: 'Haruki Murakami'.b10 publication_date: '29-MAY-2009' asDate.b10 price: 15.b10 sold_by: e3.b11 := Book new.b11 name: '1Q84: Book 3'.b11 author: 'Haruki Murakami'.b11 publication_date: '16-APR-2010' asDate.b11 price: 15.b11 sold_by: e3.b12 := Book new.b12 name: 'The Rising'.b12 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b12 publication_date: '31-MAR-2005' asDate.b12 price: 15.b12 sold_by: e1.b13 := Book new.b13 name: 'The Regime'.b13 author: 'Tim LaHaye&amp;Jerry B Jenkins'.b13 publication_date: '15-NOV-2005' asDate.b13 price: 15.b13 sold_by: e1.b14 := Book new.b14 name: 'The Rapture'.b14 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b14 publication_date: '6-JUN-2006' asDate.b14 price: 15.b14 sold_by: e2.b15 := Book new.b15 name: 'Left Behind'.b15 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b15 publication_date: '31-DEC-1995' asDate.b15 price: 17.b15 sold_by: e1.b16 := Book new.b16 name: 'Tribulation Force'.b16 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b16 publication_date: '29-OCT-1996' asDate.b16 price: 15.b16 sold_by: e1.b17 := Book new.b17 name: 'Nicolae'.b17 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b17 publication_date: '1-OCT-1997' asDate.b17 price: 15.b17 sold_by: e3.b18 := Book new.b18 name: 'Soul Harvest'.b18 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b18 publication_date: '1-FEB-1998' asDate.b18 price: 15.b18 sold_by: e3.b19 := Book new.b19 name: 'Apollyon'.b19 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b19 publication_date: '1-FEB-1999' asDate.b19 price: 15.b19 sold_by: e2.b20 := Book new.b20 name: 'Assassins'.b20 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b20 publication_date: '15-AUG-1999' asDate.b20 price: 15.b20 sold_by: e2.b21 := Book new.b21 name: 'The Indwelling'.b21 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b21 publication_date: '4-MAY-2000' asDate.b21 price: 15.b21 sold_by: e2.b22  := Book new.b22 name: 'The Mark'.b22 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b22 publication_date: '9-NOV-2000' asDate.b22 price: 15.b22 sold_by: e3.b23 := Book new.b23 name: 'Desecration'.b23 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b23 publication_date: '30-OCT-2001' asDate.b23 price: 15.b23 sold_by: e2.b24 := Book new.b24 name: 'Desecration'.b24 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b24 publication_date: '30-OCT-2001' asDate.b24 price: 15.b24 sold_by: e2.b25  := Book new.b25 name: 'The Remnant'.b25 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b25 publication_date: '3-JUL-2002' asDate.b25 price: 15.b25 sold_by: e2.b26 := Book new.b26 name: 'Armageddon	'.b26 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b26 publication_date: '14-APR-2003' asDate.b26 price: 15.b26 sold_by: e2.b27 := Book new.b27 name: 'Glorious Appearing'.b27 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b27 publication_date: '30-MAR-2004' asDate.b27 price: 15.b27 sold_by: e2.b28 := Book new.b28 name: 'Kingdom Come	'.b28 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b28 publication_date: '7-APR-2007' asDate.b28 price: 15.b28 sold_by: e1.b29 := Book new.b29 name: 'Programming language C# 7 and NET palforms and NET CORE'.b29 author: 'Philip Japikse&amp;Andrew Troelsen'.b29 publication_date: '30-NOV-2019' asDate.b29 price: 30.b29 sold_by: e1.b30 := Book new.b30 name: 'Grokking Algorithms'.b30 author: 'Aditya Bhargava'.b30 publication_date: '30-MAY-2016' asDate.b30 price: 47.b30 sold_by: e2.Books add: b1; add: b2; add: b3; add: b4; add: b5; add: b6; add: b7; add: b8; add: b9; add: b10; add: b11; add: b12; add: b13; add: b14; add: b15; add: b16; add: b17; add: b18; add: b19; add: b20; add: b21; add: b22; add: b23; add: b24; add: b25; add: b26; add: b27; add: b28; add: b29; add: b30."______________________Customers______________________"c1 := Customer new.c1 firstname: 'Carl'.c1 surname: 'Grimes'.c1 payment_type: 'Cash'.c1 purchase:  b1.c1 date_of_purchase: ' 4-AUG-2019' asDate.c2 := Customer new.c2 firstname: 'Rick'.c2 surname: 'Grimes'.c2 payment_type: 'Card'.c2 purchase:  b2.c2 date_of_purchase: '5-MAR-2020' asDate.c3 := Customer new.c3 firstname: 'Lori'.c3 surname: 'Grimes'.c3 payment_type: 'Bank Transfer'.c3 purchase:  b3.c3 date_of_purchase: '16-AUG-2020' asDate.c4 := Customer new.c4 firstname: 'Judith'.c4 surname: 'Grimes'.c4 payment_type:  'Card'.c4 purchase:  b6.c4 date_of_purchase: '21-MAR-2020' asDate.c5 := Customer new.c5 firstname: 'Glenn'.c5 surname: 'Rhee'.c5 payment_type: 'Cash'.c5 purchase:  b5.c5 date_of_purchase: '20-JUN-2020' asDate.c6 := Customer new.c6 firstname: 'Magy'.c6 surname: 'Rhee'.c6 payment_type: 'Bank Transfer'.c6 purchase:  b4.c6 date_of_purchase: '5-APR-2020' asDate.c7 := Customer new.c7 firstname: 'Shane'.c7 surname: 'Walsh'.c7 payment_type: 'Bank Transfer'.c7 purchase:  b7.c7 date_of_purchase: '21-APR-2020' asDate.c8 := Customer new.c8 firstname: 'Merle'.c8 surname: 'Dikson'.c8 payment_type: 'Cash'.c8 purchase:  b8.c8 date_of_purchase: '19-SEP-2019' asDate.c9  := Customer new.c9 firstname: 'Daryl'.c9 surname: 'Dikson'.c9 payment_type: 'Card'.c9 purchase:  b9.c9 date_of_purchase: '4-MAY-2020' asDate.c10 := Customer new.c10 firstname: 'Carol'.c10 surname: 'Peletier'.c10 payment_type: 'Cash'.c10 purchase:  b10.c10 date_of_purchase: '31-OCT-2019' asDate.c11 := Customer new.c11 firstname: 'Hershel'.c11 surname: 'Greene'.c11 payment_type: 'Bank Transfer'.c11 purchase:  b13.c11 date_of_purchase: '1-NOV-2020' asDate.c12 := Customer new.c12 firstname: 'Beth'.c12 surname: 'Greene'.c12 payment_type: 'Card'.c12 purchase:  b12.c12 date_of_purchase: '28-JUN-2020' asDate.c13  := Customer new.c13 firstname: 'Rosita'.c13 surname: 'Espinosa'.c13 payment_type: 'Bank Transfer'.c13 purchase:  b11.c13 date_of_purchase: '30-AUG-2020' asDate.c14 := Customer new.c14 firstname: 'Teodor'.c14 surname: 'Douglas'.c14 payment_type: 'Card'.c14 purchase:  b14.c14 date_of_purchase: '30-MAR-2020' asDate.c15 := Customer new.c15 firstname: 'Sasha'.c15 surname: 'Williams'.c15 payment_type: 'Cash'.c15 purchase:  b15.c15 date_of_purchase: '18-NOV-2019' asDate.c16 := Customer new.c16 firstname: 'Abrakham'.c16 surname: 'Ford'.c16 payment_type: 'Bank Transfer'.c16 purchase:  b16.c16 date_of_purchase: '4-OCT-2020' asDate.c17 := Customer new.c17 firstname: 'Eugine'.c17 surname: 'Porter'.c17 payment_type: 'Cash'.c17 purchase:  b17.c17 date_of_purchase: '19-AUG-2020' asDate.c18 := Customer new.c18 firstname: 'Spencer'.c18 surname: 'Monro'.c18 payment_type: 'Bank Transfer'.c18 purchase:  b18.c18 date_of_purchase: '25-OCT-2020' asDate.c19 := Customer new.c19 firstname: 'Deanna'.c19 surname: 'Monro'.c19 payment_type: 'Card'.c19 purchase:  b20.c19 date_of_purchase: '19-APR-2018' asDate.c20 := Customer new.c20 firstname: 'Jessie'.c20 surname: 'Anderson'.c20 payment_type: 'Bank Transfer'.c20 purchase:  b19.c20 date_of_purchase: '9-NOV-2018' asDate.c21 := Customer new.c21 firstname: 'Bob'.c21 surname: 'Stookey'.c21 payment_type: 'Cash'.c21 purchase:  b22.c21 date_of_purchase: '30-MAR-2021' asDate.c22 := Customer new.c22 firstname: 'Tyreese'.c22 surname: 'Williams'.c22 payment_type: 'Bank Transfer'.c22 purchase:  b21.c22 date_of_purchase: '25-JAN-2020' asDate.c23 := Customer new.c23 firstname: 'Tara'.c23 surname: 'Chambler'.c23 payment_type:'Card'.c23 purchase:  b23.c23 date_of_purchase: '3-JUL-2020' asDate.c24 := Customer new.c24 firstname: 'Chester'.c24 surname: 'Jones'.c24 payment_type: 'Bank Transfer'.c24 purchase:  b24.c24 date_of_purchase: '15-MAY-2020' asDate.c25 := Customer new.c25 firstname: 'Morgan'.c25 surname: 'Jones'.c25 payment_type: 'Cash'.c25 purchase:  b25.c25 date_of_purchase: '14-NOV-2020' asDate.c26 := Customer new.c26 firstname: 'Austin'.c26 surname: 'Amelio'.c26 payment_type: 'Card'.c26 purchase:  b26.c26 date_of_purchase: '27-JUN-2020' asDate.c27 := Customer new.c27 firstname: 'Tom'.c27 surname: 'Payne'.c27 payment_type: 'Cash'.c27 purchase: b27.c27 date_of_purchase: '6-SEP-2020' asDate.c28 := Customer new.c28 firstname: 'Khary'.c28 surname: 'Payton'.c28 payment_type: 'Bank Transfer'.c28 purchase:  b29.c28 date_of_purchase: '2-MAR-2021' asDate.c29  := Customer new.c29 firstname: 'Steven'.c29 surname: 'Ogg'.c29 payment_type: 'Cash'.c29 purchase:  b30.c29 date_of_purchase: '11-FEB-2020' asDate.c30 := Customer new.c30 firstname: 'Katelyn'.c30 surname: 'Nacon'.c30 payment_type: 'Card'.c30 purchase:  b28.c30 date_of_purchase: '7-June-2019' asDate.Customers add: c1; add: c2; add: c3; add: c4; add: c5; add: c6; add: c7; add: c8; add: c9; add: c10; add: c11; add: c12; add: c13; add: c14; add: c15; add: c16; add: c17; add: c18; add: c19; add: c20; add: c21; add: c22; add: c23; add: c24; add: c25; add: c26; add: c27; add: c28; add: c29;  add: c30.</do-it><class><name>Employee</name><environment>Smalltalk</environment><super>Library</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname lastname id works_in </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#lastname -&gt; Core.String); add: (#location -&gt; Core.String); add: (#id -&gt; Core.Number); add: (#works_in -&gt; Core.Object); add: (#firstname -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="works_in:">works_in: anObject"generated by Daskalos"     works_in := (self checkValue: anObject forVariable: #works_in)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="works_in">works_in"generated by Daskalos"     ^works_in</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     lastname := nil.     id := nil.     works_in := nil.</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>Library</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname lastname id </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#lastname -&gt; Core.String); add: (#location -&gt; Core.String); add: (#id -&gt; Core.Number); add: (#firstname -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><remove-selector><class-id>Employee</class-id> <selector>works_in</selector></remove-selector><remove-selector><class-id>Employee</class-id> <selector>works_in:</selector></remove-selector><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     lastname := nil.     id := nil.</body></methods><do-it>Book removeFromSystem</do-it><do-it>Employee removeFromSystem</do-it><do-it>Library removeFromSystem</do-it><do-it>Client removeFromSystem</do-it><class><name>Employee</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name sername id </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#sername -&gt; Core.String); add: (#id -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sername">sername"generated by Daskalos"     ^sername</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sername:">sername: anObject"generated by Daskalos"     sername := (self checkValue: anObject forVariable: #sername)</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     sername := nil.     id := nil.</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="amount_of_sailed_books">amount_of_sailed_books	^self sailed_Books size</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Common_proceed">Common_proceed	^(self sailed_Books collect: [:x | x price]) sum</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="employees_percent">employees_percent	^(self sailed_Books collect: [:x | x price * 10 / 100]) sum asFloat</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="sailed_Books">sailed_Books	^Book allInstances select: [:x | x sailed_by = self]</body></methods><class><name>Book</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name author publication_date price sailed_by </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Book class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#sailed_by -&gt; Core.Object); add: (#publication_date -&gt; Core.Date); add: (#price -&gt; Core.Number); add: (#author -&gt; Core.String); yourself)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="author">author"generated by Daskalos"     ^author</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="author:">author: anObject"generated by Daskalos"     author := (self checkValue: anObject forVariable: #author)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price">price"generated by Daskalos"     ^price</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price:">price: anObject"generated by Daskalos"     price := (self checkValue: anObject forVariable: #price)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="publication_date">publication_date"generated by Daskalos"     ^publication_date</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="publication_date:">publication_date: anObject"generated by Daskalos"     publication_date := (self checkValue: anObject forVariable: #publication_date)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sailed_by">sailed_by"generated by Daskalos"     ^sailed_by</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sailed_by:">sailed_by: anObject"generated by Daskalos"     sailed_by := (self checkValue: anObject forVariable: #sailed_by)</body></methods><methods><class-id>Book</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     author := nil.     publication_date := nil.     price := nil.     sailed_by := nil.</body></methods><methods><class-id>Book</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="purchasers">purchasers	^(Client allInstances select: [:x | x purchase = self]) 		collect: [:x | x name]		with: [:x | x bank_account]		with: [:x | x sername]</body></methods><class><name>Client</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name sername bank_account purchase date_of_purchase </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Client class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#bank_account -&gt; Core.String); add: (#sername -&gt; Core.String); add: (#purchase -&gt; Core.Object); add: (#date_of_purchase -&gt; Core.Date); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="bank_account">bank_account"generated by Daskalos"     ^bank_account</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="bank_account:">bank_account: anObject"generated by Daskalos"     bank_account := (self checkValue: anObject forVariable: #bank_account)</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="date_of_purchase">date_of_purchase"generated by Daskalos"     ^date_of_purchase</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="date_of_purchase:">date_of_purchase: anObject"generated by Daskalos"     date_of_purchase := (self checkValue: anObject forVariable: #date_of_purchase)</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purchase">purchase"generated by Daskalos"     ^purchase</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purchase:">purchase: anObject"generated by Daskalos"     purchase := (self checkValue: anObject forVariable: #purchase)</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sername">sername"generated by Daskalos"     ^sername</body></methods><methods><class-id>Client</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sername:">sername: anObject"generated by Daskalos"     sername := (self checkValue: anObject forVariable: #sername)</body></methods><methods><class-id>Client</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     sername := nil.     bank_account := nil.     purchase := nil.     date_of_purchase := nil.</body></methods><remove-selector><class-id>Customer</class-id> <selector>initialize</selector></remove-selector><methods><class-id>Book</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="purchases">purchases	^(Customer allInstances select: [:x | x purchase = self]) 		collect: [:x | x firstname]		with: [:x | x surname]		with: [:x | x payment_type]</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Sold_Books">Sold_Books	^Book allInstances select: [:x | x sold_by = self]</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="amount_of_sold_books">amount_of_sold_books	^self Sold_Books size</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Common_proceed">Common_proceed	^(self Sold_Books collect: [:x | x price]) sum</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Amount_of_sold_books">Amount_of_sold_books	^self Sold_Books size</body></methods><remove-selector><class-id>Employee</class-id> <selector>amount_of_sold_books</selector></remove-selector><do-it>Books select: [: y | y author = 'Tim LaHaye&amp;Jerry B. Jenkins']</do-it><do-it>Employees select: [: y | y id = 001]</do-it><do-it>Customers select: [: y | y date_of_purchase &lt; '1-DEC-2019' asDate]</do-it><do-it>Books select: [: y | y price &gt; 20]</do-it><do-it>Customers select: [: y | y date_of_purchase &gt; '1-JAN-2010' asDate]</do-it><do-it>Employees := Set new.Books := Set new.Customers := Set new. "______________________Employees______________________"e1 := Employee new.e1 name: 'CZU Library'.e1 location: 'Kamycka'.e1 firstname: 'Steven'.e1 lastname: 'Drake'.e1 id: 001.e2 := Employee new.e2 name: 'CZU Library'.e2 location: 'Kamycka'.e2 firstname: 'Alice'.e2 lastname: 'Grow'.e2 id: 002.e3 := Employee new.e3 name: 'CZU Library'.e3 location: 'Kamycka'.e3 firstname: 'Morgan'.e3 lastname: 'Freeman'.e3 id: 003.Employees add: e1; add: e2; add: e3."__________Books____________"b1 := Book new.b1 name: 'It'.b1 author: 'Steven King'.b1 publication_date: '15-SEP-2023' asDate.b1 price: 20 .b1 sold_by: e1.b2 := Book new.b2 name: 'Steve Jobs'.b2 author: 'Walter Isaacson'.b2 publication_date: '24-OCT-2011' asDate.b2 price: 30 .b2 sold_by: e1.b3 := Book new.b3 name: 'JavaScript &amp; jQuery'.b3 author: 'David Mcfarland'.b3 publication_date: '17-JUL-2022' asDate.b3 price: 37 .b3 sold_by: e1.b4 := Book new.b4 name: 'Complete code'.b4 author: 'Stive McKonnel'.b4 publication_date: '13-FEB-2015' asDate.b4 price: 70 .b4 sold_by: e1.b5 := Book new.b5 name: 'The Shining'.b5 author: 'Steven King'.b5 publication_date: '28-JUN-2023' asDate.b5 price: 15 .b5 sold_by: e3.b6 := Book new.b6 name: 'The Lord of The Rings The Fellowship of the Ring'.b6 author: 'J. R. R. Tolkien'.b6 publication_date: '29-JUL-1954' asDate.b6 price: 30 .b6 sold_by: e1.b7 := Book new.b7 name: 'Shantaram'.b7 author: 'David Roberts'.b7 publication_date: '7-AUG-2006' asDate.b7 price: 37.b7 sold_by: e1.b8 := Book new.b8 name: 'Norwagian Wood'.b8 author: 'Haruki Murakami'.b8 publication_date: '4-SEP-2016' asDate.b8 price: 10.b8 sold_by: e1.b9 := Book new.b9 name: '1Q84: Book 1'.b9 author: 'Haruki Murakami'.b9 publication_date: '29-MAY-2009' asDate.b9 price: 15.b9 sold_by: e1.b10 := Book new.b10 name: '1Q84: Book 2'.b10 author: 'Haruki Murakami'.b10 publication_date: '29-MAY-2009' asDate.b10 price: 15.b10 sold_by: e3.b11 := Book new.b11 name: '1Q84: Book 3'.b11 author: 'Haruki Murakami'.b11 publication_date: '16-APR-2010' asDate.b11 price: 15.b11 sold_by: e3.b12 := Book new.b12 name: 'The Rising'.b12 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b12 publication_date: '31-MAR-2005' asDate.b12 price: 15.b12 sold_by: e1.b13 := Book new.b13 name: 'The Regime'.b13 author: 'Tim LaHaye&amp;Jerry B Jenkins'.b13 publication_date: '15-NOV-2005' asDate.b13 price: 15.b13 sold_by: e1.b14 := Book new.b14 name: 'The Rapture'.b14 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b14 publication_date: '6-JUN-2006' asDate.b14 price: 15.b14 sold_by: e2.b15 := Book new.b15 name: 'Left Behind'.b15 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b15 publication_date: '31-DEC-1995' asDate.b15 price: 17.b15 sold_by: e1.b16 := Book new.b16 name: 'Tribulation Force'.b16 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b16 publication_date: '29-OCT-2012' asDate.b16 price: 15.b16 sold_by: e1.b17 := Book new.b17 name: 'Nicolae'.b17 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b17 publication_date: '1-OCT-1997' asDate.b17 price: 15.b17 sold_by: e3.b18 := Book new.b18 name: 'Soul Harvest'.b18 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b18 publication_date: '1-FEB-1998' asDate.b18 price: 15.b18 sold_by: e3.b19 := Book new.b19 name: 'Apollyon'.b19 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b19 publication_date: '1-FEB-1999' asDate.b19 price: 15.b19 sold_by: e2.b20 := Book new.b20 name: 'Assassins'.b20 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b20 publication_date: '15-AUG-1999' asDate.b20 price: 15.b20 sold_by: e2.b21 := Book new.b21 name: 'The Indwelling'.b21 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b21 publication_date: '4-MAY-2000' asDate.b21 price: 15.b21 sold_by: e2.b22  := Book new.b22 name: 'The Mark'.b22 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b22 publication_date: '9-NOV-2000' asDate.b22 price: 15.b22 sold_by: e3.b23 := Book new.b23 name: 'Desecration'.b23 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b23 publication_date: '30-OCT-2001' asDate.b23 price: 15.b23 sold_by: e2.b24 := Book new.b24 name: 'Desecration'.b24 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b24 publication_date: '30-OCT-2001' asDate.b24 price: 15.b24 sold_by: e2.b25  := Book new.b25 name: 'The Remnant'.b25 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b25 publication_date: '3-JUL-2002' asDate.b25 price: 15.b25 sold_by: e2.b26 := Book new.b26 name: 'Armageddon	'.b26 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b26 publication_date: '14-APR-2017' asDate.b26 price: 15.b26 sold_by: e2.b27 := Book new.b27 name: 'Glorious Appearing'.b27 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b27 publication_date: '30-MAR-2004' asDate.b27 price: 15.b27 sold_by: e2.b28 := Book new.b28 name: 'Kingdom Come	'.b28 author: 'Tim LaHaye&amp;Jerry B. Jenkins'.b28 publication_date: '7-APR-2007' asDate.b28 price: 15.b28 sold_by: e1.b29 := Book new.b29 name: 'Programming language C# 7 and NET palforms and NET CORE'.b29 author: 'Philip Japikse&amp;Andrew Troelsen'.b29 publication_date: '30-NOV-2019' asDate.b29 price: 30.b29 sold_by: e1.b30 := Book new.b30 name: 'Grokking Algorithms'.b30 author: 'Aditya Bhargava'.b30 publication_date: '30-MAY-2016' asDate.b30 price: 47.b30 sold_by: e2.Books add: b1; add: b2; add: b3; add: b4; add: b5; add: b6; add: b7; add: b8; add: b9; add: b10; add: b11; add: b12; add: b13; add: b14; add: b15; add: b16; add: b17; add: b18; add: b19; add: b20; add: b21; add: b22; add: b23; add: b24; add: b25; add: b26; add: b27; add: b28; add: b29; add: b30."______________________Customers______________________"c1 := Customer new.c1 firstname: 'Carl'.c1 surname: 'Grimes'.c1 payment_type: 'Cash'.c1 purchase:  b1.c1 date_of_purchase: ' 4-AUG-2019' asDate.c2 := Customer new.c2 firstname: 'Rick'.c2 surname: 'Grimes'.c2 payment_type: 'Card'.c2 purchase:  b2.c2 date_of_purchase: '5-MAR-2020' asDate.c3 := Customer new.c3 firstname: 'Lori'.c3 surname: 'Grimes'.c3 payment_type: 'Bank Transfer'.c3 purchase:  b3.c3 date_of_purchase: '16-AUG-2020' asDate.c4 := Customer new.c4 firstname: 'Judith'.c4 surname: 'Grimes'.c4 payment_type:  'Card'.c4 purchase:  b6.c4 date_of_purchase: '21-MAR-2020' asDate.c5 := Customer new.c5 firstname: 'Glenn'.c5 surname: 'Rhee'.c5 payment_type: 'Cash'.c5 purchase:  b5.c5 date_of_purchase: '20-JUN-2020' asDate.c6 := Customer new.c6 firstname: 'Magy'.c6 surname: 'Rhee'.c6 payment_type: 'Bank Transfer'.c6 purchase:  b4.c6 date_of_purchase: '5-APR-2020' asDate.c7 := Customer new.c7 firstname: 'Shane'.c7 surname: 'Walsh'.c7 payment_type: 'Bank Transfer'.c7 purchase:  b7.c7 date_of_purchase: '21-APR-2020' asDate.c8 := Customer new.c8 firstname: 'Merle'.c8 surname: 'Dikson'.c8 payment_type: 'Cash'.c8 purchase:  b8.c8 date_of_purchase: '19-SEP-2019' asDate.c9  := Customer new.c9 firstname: 'Daryl'.c9 surname: 'Dikson'.c9 payment_type: 'Card'.c9 purchase:  b9.c9 date_of_purchase: '4-MAY-2020' asDate.c10 := Customer new.c10 firstname: 'Carol'.c10 surname: 'Peletier'.c10 payment_type: 'Cash'.c10 purchase:  b10.c10 date_of_purchase: '31-OCT-2019' asDate.c11 := Customer new.c11 firstname: 'Hershel'.c11 surname: 'Greene'.c11 payment_type: 'Bank Transfer'.c11 purchase:  b13.c11 date_of_purchase: '1-NOV-2020' asDate.c12 := Customer new.c12 firstname: 'Beth'.c12 surname: 'Greene'.c12 payment_type: 'Card'.c12 purchase:  b12.c12 date_of_purchase: '28-JUN-2020' asDate.c13  := Customer new.c13 firstname: 'Rosita'.c13 surname: 'Espinosa'.c13 payment_type: 'Bank Transfer'.c13 purchase:  b11.c13 date_of_purchase: '30-AUG-2020' asDate.c14 := Customer new.c14 firstname: 'Teodor'.c14 surname: 'Douglas'.c14 payment_type: 'Card'.c14 purchase:  b14.c14 date_of_purchase: '30-MAR-2020' asDate.c15 := Customer new.c15 firstname: 'Sasha'.c15 surname: 'Williams'.c15 payment_type: 'Cash'.c15 purchase:  b15.c15 date_of_purchase: '18-NOV-2019' asDate.c16 := Customer new.c16 firstname: 'Abrakham'.c16 surname: 'Ford'.c16 payment_type: 'Bank Transfer'.c16 purchase:  b16.c16 date_of_purchase: '4-OCT-2020' asDate.c17 := Customer new.c17 firstname: 'Eugine'.c17 surname: 'Porter'.c17 payment_type: 'Cash'.c17 purchase:  b17.c17 date_of_purchase: '19-AUG-2020' asDate.c18 := Customer new.c18 firstname: 'Spencer'.c18 surname: 'Monro'.c18 payment_type: 'Bank Transfer'.c18 purchase:  b18.c18 date_of_purchase: '25-OCT-2020' asDate.c19 := Customer new.c19 firstname: 'Deanna'.c19 surname: 'Monro'.c19 payment_type: 'Card'.c19 purchase:  b20.c19 date_of_purchase: '19-APR-2018' asDate.c20 := Customer new.c20 firstname: 'Jessie'.c20 surname: 'Anderson'.c20 payment_type: 'Bank Transfer'.c20 purchase:  b19.c20 date_of_purchase: '9-NOV-2018' asDate.c21 := Customer new.c21 firstname: 'Bob'.c21 surname: 'Stookey'.c21 payment_type: 'Cash'.c21 purchase:  b22.c21 date_of_purchase: '30-MAR-2021' asDate.c22 := Customer new.c22 firstname: 'Tyreese'.c22 surname: 'Williams'.c22 payment_type: 'Bank Transfer'.c22 purchase:  b21.c22 date_of_purchase: '25-JAN-2020' asDate.c23 := Customer new.c23 firstname: 'Tara'.c23 surname: 'Chambler'.c23 payment_type:'Card'.c23 purchase:  b23.c23 date_of_purchase: '3-JUL-2020' asDate.c24 := Customer new.c24 firstname: 'Chester'.c24 surname: 'Jones'.c24 payment_type: 'Bank Transfer'.c24 purchase:  b24.c24 date_of_purchase: '15-MAY-2020' asDate.c25 := Customer new.c25 firstname: 'Morgan'.c25 surname: 'Jones'.c25 payment_type: 'Cash'.c25 purchase:  b25.c25 date_of_purchase: '14-NOV-2020' asDate.c26 := Customer new.c26 firstname: 'Austin'.c26 surname: 'Amelio'.c26 payment_type: 'Card'.c26 purchase:  b26.c26 date_of_purchase: '27-JUN-2020' asDate.c27 := Customer new.c27 firstname: 'Tom'.c27 surname: 'Payne'.c27 payment_type: 'Cash'.c27 purchase: b27.c27 date_of_purchase: '6-SEP-2020' asDate.c28 := Customer new.c28 firstname: 'Khary'.c28 surname: 'Payton'.c28 payment_type: 'Bank Transfer'.c28 purchase:  b29.c28 date_of_purchase: '2-MAR-2021' asDate.c29  := Customer new.c29 firstname: 'Steven'.c29 surname: 'Ogg'.c29 payment_type: 'Cash'.c29 purchase:  b30.c29 date_of_purchase: '11-FEB-2020' asDate.c30 := Customer new.c30 firstname: 'Katelyn'.c30 surname: 'Nacon'.c30 payment_type: 'Card'.c30 purchase:  b28.c30 date_of_purchase: '7-June-2019' asDate.Customers add: c1; add: c2; add: c3; add: c4; add: c5; add: c6; add: c7; add: c8; add: c9; add: c10; add: c11; add: c12; add: c13; add: c14; add: c15; add: c16; add: c17; add: c18; add: c19; add: c20; add: c21; add: c22; add: c23; add: c24; add: c25; add: c26; add: c27; add: c28; add: c29;  add: c30.</do-it><do-it>Customers select: [: y | y date_of_purchase &gt; '1-JAN-2000' asDate]</do-it><class><name>Library</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name location </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Library class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#location -&gt; Core.String); yourself)</body></methods><methods><class-id>Library</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="location">location"generated by Daskalos"     ^location</body></methods><methods><class-id>Library</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="location:">location: anObject"generated by Daskalos"     location := (self checkValue: anObject forVariable: #location)</body></methods><methods><class-id>Library</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Library</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Library</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     location := nil.</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>Library</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname lastname id </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#lastname -&gt; Core.String); add: (#location -&gt; Core.String); add: (#id -&gt; Core.Number); add: (#firstname -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname">firstname"generated by Daskalos"     ^firstname</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname:">firstname: anObject"generated by Daskalos"     firstname := (self checkValue: anObject forVariable: #firstname)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastname">lastname"generated by Daskalos"     ^lastname</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastname:">lastname: anObject"generated by Daskalos"     lastname := (self checkValue: anObject forVariable: #lastname)</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     lastname := nil.     id := nil.</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Amount_of_sold_books">Amount_of_sold_books	^self Sold_Books size</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Common_proceed">Common_proceed	^(self Sold_Books collect: [:x | x price]) sum</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Sold_Books">Sold_Books	^Book allInstances select: [:x | x sold_by = self]</body></methods><class><name>Book</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name author publication_date price sold_by </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Book class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#author -&gt; Core.String); add: (#name -&gt; Core.String); add: (#sold_by -&gt; Core.Object); add: (#price -&gt; Core.Number); add: (#publication_date -&gt; Core.Date); yourself)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="author">author"generated by Daskalos"     ^author</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="author:">author: anObject"generated by Daskalos"     author := (self checkValue: anObject forVariable: #author)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price">price"generated by Daskalos"     ^price</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price:">price: anObject"generated by Daskalos"     price := (self checkValue: anObject forVariable: #price)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="publication_date">publication_date"generated by Daskalos"     ^publication_date</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="publication_date:">publication_date: anObject"generated by Daskalos"     publication_date := (self checkValue: anObject forVariable: #publication_date)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sold_by">sold_by"generated by Daskalos"     ^sold_by</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sold_by:">sold_by: anObject"generated by Daskalos"     sold_by := (self checkValue: anObject forVariable: #sold_by)</body></methods><methods><class-id>Book</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     author := nil.     publication_date := nil.     price := nil.     sold_by := nil.</body></methods><methods><class-id>Book</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="purchases">purchases	^(Customer allInstances select: [:x | x purchase = self]) 		collect: [:x | x firstname]		with: [:x | x surname]		with: [:x | x payment_type]</body></methods><class><name>Customer</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname date_of_purchase payment_type purchase surname </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Customer class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstname -&gt; Core.String); add: (#payment_type -&gt; Core.String); add: (#date_of_purchase -&gt; Core.Date); add: (#purchase -&gt; Core.Object); add: (#surname -&gt; Core.String); yourself)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="date_of_purchase">date_of_purchase"generated by Daskalos"     ^date_of_purchase</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="date_of_purchase:">date_of_purchase: anObject"generated by Daskalos"     date_of_purchase := (self checkValue: anObject forVariable: #date_of_purchase)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname">firstname"generated by Daskalos"     ^firstname</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname:">firstname: anObject"generated by Daskalos"     firstname := (self checkValue: anObject forVariable: #firstname)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="payment_type">payment_type"generated by Daskalos"     ^payment_type</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="payment_type:">payment_type: anObject"generated by Daskalos"     payment_type := (self checkValue: anObject forVariable: #payment_type)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purchase">purchase"generated by Daskalos"     ^purchase</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purchase:">purchase: anObject"generated by Daskalos"     purchase := (self checkValue: anObject forVariable: #purchase)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surname">surname"generated by Daskalos"     ^surname</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surname:">surname: anObject"generated by Daskalos"     surname := (self checkValue: anObject forVariable: #surname)</body></methods><class><name>Library</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name location </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Library class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#location -&gt; Core.String); yourself)</body></methods><methods><class-id>Library</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="location">location"generated by Daskalos"     ^location</body></methods><methods><class-id>Library</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="location:">location: anObject"generated by Daskalos"     location := (self checkValue: anObject forVariable: #location)</body></methods><methods><class-id>Library</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Library</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Library</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     location := nil.</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>Library</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname lastname id </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#lastname -&gt; Core.String); add: (#location -&gt; Core.String); add: (#id -&gt; Core.Number); add: (#firstname -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname">firstname"generated by Daskalos"     ^firstname</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname:">firstname: anObject"generated by Daskalos"     firstname := (self checkValue: anObject forVariable: #firstname)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastname">lastname"generated by Daskalos"     ^lastname</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastname:">lastname: anObject"generated by Daskalos"     lastname := (self checkValue: anObject forVariable: #lastname)</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     lastname := nil.     id := nil.</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Amount_of_sold_books">Amount_of_sold_books	^self Sold_Books size</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Common_proceed">Common_proceed	^(self Sold_Books collect: [:x | x price]) sum</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Sold_Books">Sold_Books	^Book allInstances select: [:x | x sold_by = self]</body></methods><class><name>Book</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name author publication_date price sold_by </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Book class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#author -&gt; Core.String); add: (#name -&gt; Core.String); add: (#sold_by -&gt; Core.Object); add: (#price -&gt; Core.Number); add: (#publication_date -&gt; Core.Date); yourself)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="author">author"generated by Daskalos"     ^author</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="author:">author: anObject"generated by Daskalos"     author := (self checkValue: anObject forVariable: #author)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price">price"generated by Daskalos"     ^price</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="price:">price: anObject"generated by Daskalos"     price := (self checkValue: anObject forVariable: #price)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="publication_date">publication_date"generated by Daskalos"     ^publication_date</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="publication_date:">publication_date: anObject"generated by Daskalos"     publication_date := (self checkValue: anObject forVariable: #publication_date)</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sold_by">sold_by"generated by Daskalos"     ^sold_by</body></methods><methods><class-id>Book</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="sold_by:">sold_by: anObject"generated by Daskalos"     sold_by := (self checkValue: anObject forVariable: #sold_by)</body></methods><methods><class-id>Book</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     author := nil.     publication_date := nil.     price := nil.     sold_by := nil.</body></methods><methods><class-id>Book</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="purchases">purchases	^(Customer allInstances select: [:x | x purchase = self]) 		collect: [:x | x firstname]		with: [:x | x surname]		with: [:x | x payment_type]</body></methods><class><name>Customer</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname date_of_purchase payment_type purchase surname </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Customer class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstname -&gt; Core.String); add: (#payment_type -&gt; Core.String); add: (#date_of_purchase -&gt; Core.Date); add: (#purchase -&gt; Core.Object); add: (#surname -&gt; Core.String); yourself)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="date_of_purchase">date_of_purchase"generated by Daskalos"     ^date_of_purchase</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="date_of_purchase:">date_of_purchase: anObject"generated by Daskalos"     date_of_purchase := (self checkValue: anObject forVariable: #date_of_purchase)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname">firstname"generated by Daskalos"     ^firstname</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname:">firstname: anObject"generated by Daskalos"     firstname := (self checkValue: anObject forVariable: #firstname)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="payment_type">payment_type"generated by Daskalos"     ^payment_type</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="payment_type:">payment_type: anObject"generated by Daskalos"     payment_type := (self checkValue: anObject forVariable: #payment_type)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purchase">purchase"generated by Daskalos"     ^purchase</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purchase:">purchase: anObject"generated by Daskalos"     purchase := (self checkValue: anObject forVariable: #purchase)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surname">surname"generated by Daskalos"     ^surname</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surname:">surname: anObject"generated by Daskalos"     surname := (self checkValue: anObject forVariable: #surname)</body></methods><class><name>Airline</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name contact headquarters </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Airline class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#contact -&gt; Core.Number); add: (#headquarters -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><comment><class-id>Airline</class-id><body>This Airline Class has instances such as name,address and headquarters</body></comment><methods><class-id>Airline</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Airline</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Airline</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="headquarters">headquarters"generated by Daskalos"     ^headquarters</body></methods><methods><class-id>Airline</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="headquarters:">headquarters: anObject"generated by Daskalos"     headquarters := (self checkValue: anObject forVariable: #headquarters)</body></methods><methods><class-id>Airline</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Airline</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Airline</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     contact := nil.     headquarters := nil.</body></methods><class><name>Ticket</name><environment>Smalltalk</environment><super>Airline</super><private>false</private><indexed-type>none</indexed-type><inst-vars>arrival dateOfTravel departure ticketId </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Ticket class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#dateOfTravel -&gt; Core.Date); add: (#departure -&gt; Core.String); add: (#headquarters -&gt; Core.String); add: (#contact -&gt; Core.Number); add: (#arrival -&gt; Core.String); add: (#ticketId -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><comment><class-id>Ticket</class-id><body>This Ticket class has instances such as arrival, depature, date of travel and the ticket id.</body></comment><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="arrival">arrival"generated by Daskalos"     ^arrival</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="arrival:">arrival: anObject"generated by Daskalos"     arrival := (self checkValue: anObject forVariable: #arrival)</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dateOfTravel">dateOfTravel"generated by Daskalos"     ^dateOfTravel</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dateOfTravel:">dateOfTravel: anObject"generated by Daskalos"     dateOfTravel := (self checkValue: anObject forVariable: #dateOfTravel)</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="departure">departure"generated by Daskalos"     ^departure</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="departure:">departure: anObject"generated by Daskalos"     departure := (self checkValue: anObject forVariable: #departure)</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="ticketId">ticketId"generated by Daskalos"     ^ticketId</body></methods><methods><class-id>Ticket</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="ticketId:">ticketId: anObject"generated by Daskalos"     ticketId := (self checkValue: anObject forVariable: #ticketId)</body></methods><methods><class-id>Ticket</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     arrival := nil.     dateOfTravel := nil.     departure := nil.     ticketId := nil.</body></methods><class><name>Passenger</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName idType purposeOfTravel buy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Passenger class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#purposeOfTravel -&gt; Core.String); add: (#buy -&gt; Core.Object); add: (#idType -&gt; Core.String); add: (#firstName -&gt; Core.String); add: (#lastName -&gt; Core.String); yourself)</body></methods><comment><class-id>Passenger</class-id><body>This Passenger Class has instances such first name,last name, id type and purpose of travel</body></comment><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="buy">buy"generated by Daskalos"     ^buy</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="buy:">buy: anObject"generated by Daskalos"     buy := (self checkValue: anObject forVariable: #buy)</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="idType">idType"generated by Daskalos"     ^idType</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="idType:">idType: anObject"generated by Daskalos"     idType := (self checkValue: anObject forVariable: #idType)</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purposeOfTravel">purposeOfTravel"generated by Daskalos"     ^purposeOfTravel</body></methods><methods><class-id>Passenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="purposeOfTravel:">purposeOfTravel: anObject"generated by Daskalos"     purposeOfTravel := (self checkValue: anObject forVariable: #purposeOfTravel)</body></methods><methods><class-id>Passenger</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     idType := nil.     purposeOfTravel := nil.     buy := nil.</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName lastName id jobPosition salary workIn worksFor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#lastName -&gt; Core.String); add: (#worksFor -&gt; Core.Object); add: (#id -&gt; Core.Number); add: (#workIn -&gt; Core.Object); add: (#firstName -&gt; Core.String); add: (#salary -&gt; Core.Number); add: (#jobPosition -&gt; Core.String); yourself)</body></methods><comment><class-id>Employee</class-id><body>This Employee Class has instances such as first name,last name, id, job position  and salary</body></comment><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jobPosition">jobPosition"generated by Daskalos"     ^jobPosition</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jobPosition:">jobPosition: anObject"generated by Daskalos"     jobPosition := (self checkValue: anObject forVariable: #jobPosition)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName">lastName"generated by Daskalos"     ^lastName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="lastName:">lastName: anObject"generated by Daskalos"     lastName := (self checkValue: anObject forVariable: #lastName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary">salary"generated by Daskalos"     ^salary</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary:">salary: anObject"generated by Daskalos"     salary := (self checkValue: anObject forVariable: #salary)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="workIn">workIn"generated by Daskalos"     ^workIn</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="workIn:">workIn: anObject"generated by Daskalos"     workIn := (self checkValue: anObject forVariable: #workIn)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="worksFor">worksFor"generated by Daskalos"     ^worksFor</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="worksFor:">worksFor: anObject"generated by Daskalos"     worksFor := (self checkValue: anObject forVariable: #worksFor)</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     lastName := nil.     id := nil.     jobPosition := nil.     salary := nil.     workIn := nil.     worksFor := nil.</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="salaryRange">salaryRange	| sm1 sm2 |	sm1 := 'Good'.	sm2 := 'Average'.	salary &gt; 50000 ifTrue: [^sm1] ifFalse: [^sm2]</body></methods><do-it>Ticket removeFromSystem</do-it><do-it>Airline removeFromSystem</do-it><do-it>Passenger removeFromSystem</do-it><do-it>Employee removeFromSystem</do-it><class><name>PhoneStore</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name contact address </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>PhoneStore class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#contact -&gt; Core.Number); add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>PhoneStore</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>PhoneStore</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>PhoneStore</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>PhoneStore</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>PhoneStore</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>PhoneStore</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>PhoneStore</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     contact := nil.     address := nil.</body></methods><class><name>ModelPhone</name><environment>Smalltalk</environment><super>PhoneStore</super><private>false</private><indexed-type>none</indexed-type><inst-vars>brandName brandCamera brandBattery soledBy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>ModelPhone class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#address -&gt; Core.String); add: (#contact -&gt; Core.Number); add: (#brandBattery -&gt; Core.String); add: (#brandCamera -&gt; Core.String); add: (#soledBy -&gt; Core.Object); add: (#brandName -&gt; Core.String); yourself)</body></methods><methods><class-id>ModelPhone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="brandBattery">brandBattery"generated by Daskalos"     ^brandBattery</body></methods><methods><class-id>ModelPhone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="brandBattery:">brandBattery: anObject"generated by Daskalos"     brandBattery := (self checkValue: anObject forVariable: #brandBattery)</body></methods><methods><class-id>ModelPhone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="brandCamera">brandCamera"generated by Daskalos"     ^brandCamera</body></methods><methods><class-id>ModelPhone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="brandCamera:">brandCamera: anObject"generated by Daskalos"     brandCamera := (self checkValue: anObject forVariable: #brandCamera)</body></methods><methods><class-id>ModelPhone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="brandName">brandName"generated by Daskalos"     ^brandName</body></methods><methods><class-id>ModelPhone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="brandName:">brandName: anObject"generated by Daskalos"     brandName := (self checkValue: anObject forVariable: #brandName)</body></methods><methods><class-id>ModelPhone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="soledBy">soledBy"generated by Daskalos"     ^soledBy</body></methods><methods><class-id>ModelPhone</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="soledBy:">soledBy: anObject"generated by Daskalos"     soledBy := (self checkValue: anObject forVariable: #soledBy)</body></methods><methods><class-id>ModelPhone</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     brandName := nil.     brandCamera := nil.     brandBattery := nil.     soledBy := nil.</body></methods><class><name>Customer</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName surName age bought </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Customer class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstName -&gt; Core.String); add: (#age -&gt; Core.Number); add: (#surName -&gt; Core.String); add: (#bought -&gt; Core.Object); yourself)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age">age"generated by Daskalos"     ^age</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age:">age: anObject"generated by Daskalos"     age := (self checkValue: anObject forVariable: #age)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="bought">bought"generated by Daskalos"     ^bought</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="bought:">bought: anObject"generated by Daskalos"     bought := (self checkValue: anObject forVariable: #bought)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surName">surName"generated by Daskalos"     ^surName</body></methods><methods><class-id>Customer</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surName:">surName: anObject"generated by Daskalos"     surName := (self checkValue: anObject forVariable: #surName)</body></methods><methods><class-id>Customer</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     surName := nil.     age := nil.     bought := nil.</body></methods><methods><class-id>Customer</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="getage">getage	| am1 am2 |	am1 := 'Old'.	am2 := 'Young'.	age &gt; 40 ifTrue: [^am1] ifFalse: [^am2]</body></methods><class><name>Employee</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName surName id salary soledTo </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Employee class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#firstName -&gt; Core.String); add: (#id -&gt; Core.Number); add: (#surName -&gt; Core.String); add: (#salary -&gt; Core.Number); add: (#soledTo -&gt; Core.Object); yourself)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary">salary"generated by Daskalos"     ^salary</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary:">salary: anObject"generated by Daskalos"     salary := (self checkValue: anObject forVariable: #salary)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="soledTo">soledTo"generated by Daskalos"     ^soledTo</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="soledTo:">soledTo: anObject"generated by Daskalos"     soledTo := (self checkValue: anObject forVariable: #soledTo)</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surName">surName"generated by Daskalos"     ^surName</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surName:">surName: anObject"generated by Daskalos"     surName := (self checkValue: anObject forVariable: #surName)</body></methods><methods><class-id>Employee</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     surName := nil.     id := nil.     salary := nil.     soledTo := nil.</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="salaryRange">salaryRange	| sm1 sm2 |	sm1 := 'Good'.	sm2 := 'Average'.	salary &gt; 20000 ifTrue: [^sm1] ifFalse: [^sm2]</body></methods><methods><class-id>Employee</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="soledProducts">soledProducts	^ModelPhone allInstances select: [:x | x soledBy = self]</body></methods><do-it>ModelPhone removeFromSystem</do-it><do-it>PhoneStore removeFromSystem</do-it><do-it>Customer removeFromSystem</do-it><do-it>Employee removeFromSystem</do-it><class><name>University</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>universityName address email contact </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>University class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#contact -&gt; Core.Number); add: (#universityName -&gt; Core.String); add: (#email -&gt; Core.String); yourself)</body></methods><comment><class-id>University</class-id><body>This class implements instances, which stores data about University which as a subclass Course</body></comment><methods><class-id>University</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>University</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>University</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>University</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>University</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="email">email"generated by Daskalos"     ^email</body></methods><methods><class-id>University</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="email:">email: anObject"generated by Daskalos"     email := (self checkValue: anObject forVariable: #email)</body></methods><methods><class-id>University</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="universityName">universityName"generated by Daskalos"     ^universityName</body></methods><methods><class-id>University</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="universityName:">universityName: anObject"generated by Daskalos"     universityName := (self checkValue: anObject forVariable: #universityName)</body></methods><methods><class-id>University</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     universityName := nil.     address := nil.     email := nil.     contact := nil.</body></methods><class><name>Course</name><environment>Smalltalk</environment><super>University</super><private>false</private><indexed-type>none</indexed-type><inst-vars>type name length fee </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Course class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#fee -&gt; Core.Number); add: (#type -&gt; Core.String); add: (#universityName -&gt; Core.String); add: (#contact -&gt; Core.Number); add: (#length -&gt; Core.Number); add: (#address -&gt; Core.String); add: (#email -&gt; Core.String); yourself)</body></methods><comment><class-id>Course</class-id><body>This class implements instances, which stores data about Course offered in University</body></comment><methods><class-id>Course</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="fee">fee"generated by Daskalos"     ^fee</body></methods><methods><class-id>Course</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="fee:">fee: anObject"generated by Daskalos"     fee := (self checkValue: anObject forVariable: #fee)</body></methods><methods><class-id>Course</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="length">length"generated by Daskalos"     ^length</body></methods><methods><class-id>Course</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="length:">length: anObject"generated by Daskalos"     length := (self checkValue: anObject forVariable: #length)</body></methods><methods><class-id>Course</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Course</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Course</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Course</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Course</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     type := nil.     name := nil.     length := nil.     fee := nil.</body></methods><methods><class-id>Course</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="getfees">getfees	| fm1 fm2 |	fm1 := 'Expensive'.	fm2 := 'Cheap'.	fee &gt; 21000 ifTrue: [^fm1] ifFalse: [^fm2]</body></methods><class><name>Teacher</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName surName id experience salary teach </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Teacher class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#surName -&gt; Core.String); add: (#firstName -&gt; Core.String); add: (#id -&gt; Core.Number); add: (#salary -&gt; Core.Number); add: (#experience -&gt; Core.Number); add: (#teach -&gt; Core.Object); yourself)</body></methods><comment><class-id>Teacher</class-id><body>This class implements instances, which stores data about Teachers</body></comment><methods><class-id>Teacher</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="experience">experience"generated by Daskalos"     ^experience</body></methods><methods><class-id>Teacher</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="experience:">experience: anObject"generated by Daskalos"     experience := (self checkValue: anObject forVariable: #experience)</body></methods><methods><class-id>Teacher</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Teacher</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Teacher</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Teacher</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Teacher</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary">salary"generated by Daskalos"     ^salary</body></methods><methods><class-id>Teacher</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="salary:">salary: anObject"generated by Daskalos"     salary := (self checkValue: anObject forVariable: #salary)</body></methods><methods><class-id>Teacher</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surName">surName"generated by Daskalos"     ^surName</body></methods><methods><class-id>Teacher</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surName:">surName: anObject"generated by Daskalos"     surName := (self checkValue: anObject forVariable: #surName)</body></methods><methods><class-id>Teacher</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="teach">teach"generated by Daskalos"     ^teach</body></methods><methods><class-id>Teacher</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="teach:">teach: anObject"generated by Daskalos"     teach := (self checkValue: anObject forVariable: #teach)</body></methods><methods><class-id>Teacher</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     surName := nil.     id := nil.     experience := nil.     salary := nil.     teach := nil.</body></methods><methods><class-id>Teacher</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="salaryRange">salaryRange	| sm1 sm2 |	sm1 := 'Good'.	sm2 := 'Average'.	salary &gt; 20000 ifTrue: [^sm1] ifFalse: [^sm2]</body></methods><methods><class-id>Teacher</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="training">training	| tm1 tm2 |	tm1 := 'No Training Needed'.	tm2 := 'Training Needed'.	experience &gt; 2 ifTrue: [^tm1] ifFalse: [^tm2]</body></methods><class><name>Student</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName surName id bankDetails learn schoolScores </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Student class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#schoolScores -&gt; Core.Number); add: (#surName -&gt; Core.String); add: (#firstName -&gt; Core.String); add: (#id -&gt; Core.Number); add: (#learn -&gt; Core.Object); add: (#bankDetails -&gt; Core.String); yourself)</body></methods><comment><class-id>Student</class-id><body>This class implements instances, which stores data about Students</body></comment><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="bankDetails">bankDetails"generated by Daskalos"     ^bankDetails</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="bankDetails:">bankDetails: anObject"generated by Daskalos"     bankDetails := (self checkValue: anObject forVariable: #bankDetails)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName">firstName"generated by Daskalos"     ^firstName</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstName:">firstName: anObject"generated by Daskalos"     firstName := (self checkValue: anObject forVariable: #firstName)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id">id"generated by Daskalos"     ^id</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="id:">id: anObject"generated by Daskalos"     id := (self checkValue: anObject forVariable: #id)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="learn">learn"generated by Daskalos"     ^learn</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="learn:">learn: anObject"generated by Daskalos"     learn := (self checkValue: anObject forVariable: #learn)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="schoolScores">schoolScores"generated by Daskalos"     ^schoolScores</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="schoolScores:">schoolScores: anObject"generated by Daskalos"     schoolScores := (self checkValue: anObject forVariable: #schoolScores)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surName">surName"generated by Daskalos"     ^surName</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surName:">surName: anObject"generated by Daskalos"     surName := (self checkValue: anObject forVariable: #surName)</body></methods><methods><class-id>Student</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstName := nil.     surName := nil.     id := nil.     bankDetails := nil.     learn := nil.     schoolScores := nil.</body></methods><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="previousScores">previousScores	| pm1 pm2 |	pm1 := 'Good'.	pm2 := 'Average'.	schoolScores &gt; 50 ifTrue: [^pm1] ifFalse: [^pm2]</body></methods>