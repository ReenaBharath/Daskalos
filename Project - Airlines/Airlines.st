<?xml version="1.0"?>

<st-source>
<time-stamp>From VisualWorksÂ® NonCommercial, 7.4.1 of May 30, 2006 on April 25, 2024 at 4:21:45 pm</time-stamp>


<class>
<name>Airline</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>name contact headquarters </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Airline class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#contact -&gt; Core.Number); add: (#headquarters -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<comment>
<class-id>Airline</class-id>
<body>This Airline Class has instances such as name,address and headquarters</body>
</comment>

<methods>
<class-id>Airline</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="contact">contact
"generated by Daskalos"

     ^contact</body>

<body package="DaskalosUserClasses" selector="contact:">contact: anObject
"generated by Daskalos"

     contact := (self checkValue: anObject forVariable: #contact)</body>

<body package="DaskalosUserClasses" selector="headquarters">headquarters
"generated by Daskalos"

     ^headquarters</body>

<body package="DaskalosUserClasses" selector="headquarters:">headquarters: anObject
"generated by Daskalos"

     headquarters := (self checkValue: anObject forVariable: #headquarters)</body>

<body package="DaskalosUserClasses" selector="name">name
"generated by Daskalos"

     ^name</body>

<body package="DaskalosUserClasses" selector="name:">name: anObject
"generated by Daskalos"

     name := (self checkValue: anObject forVariable: #name)</body>
</methods>

<methods>
<class-id>Airline</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     name := nil.
     contact := nil.
     headquarters := nil.
</body>
</methods>


<class>
<name>Ticket</name>
<environment>Smalltalk</environment>
<super>Airline</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>arrival dateOfTravel departure ticketId </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Ticket class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#dateOfTravel -&gt; Core.Date); add: (#departure -&gt; Core.String); add: (#headquarters -&gt; Core.String); add: (#contact -&gt; Core.Number); add: (#arrival -&gt; Core.String); add: (#ticketId -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<comment>
<class-id>Ticket</class-id>
<body>This Ticket class has instances such as arrival, depature, date of travel and the ticket id.</body>
</comment>

<methods>
<class-id>Ticket</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="arrival">arrival
"generated by Daskalos"

     ^arrival</body>

<body package="DaskalosUserClasses" selector="arrival:">arrival: anObject
"generated by Daskalos"

     arrival := (self checkValue: anObject forVariable: #arrival)</body>

<body package="DaskalosUserClasses" selector="dateOfTravel">dateOfTravel
"generated by Daskalos"

     ^dateOfTravel</body>

<body package="DaskalosUserClasses" selector="dateOfTravel:">dateOfTravel: anObject
"generated by Daskalos"

     dateOfTravel := (self checkValue: anObject forVariable: #dateOfTravel)</body>

<body package="DaskalosUserClasses" selector="departure">departure
"generated by Daskalos"

     ^departure</body>

<body package="DaskalosUserClasses" selector="departure:">departure: anObject
"generated by Daskalos"

     departure := (self checkValue: anObject forVariable: #departure)</body>

<body package="DaskalosUserClasses" selector="ticketId">ticketId
"generated by Daskalos"

     ^ticketId</body>

<body package="DaskalosUserClasses" selector="ticketId:">ticketId: anObject
"generated by Daskalos"

     ticketId := (self checkValue: anObject forVariable: #ticketId)</body>
</methods>

<methods>
<class-id>Ticket</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     arrival := nil.
     dateOfTravel := nil.
     departure := nil.
     ticketId := nil.
</body>
</methods>


<class>
<name>Passenger</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>firstName lastName idType purposeOfTravel buy </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Passenger class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#purposeOfTravel -&gt; Core.String); add: (#buy -&gt; Core.Object); add: (#idType -&gt; Core.String); add: (#firstName -&gt; Core.String); add: (#lastName -&gt; Core.String); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<comment>
<class-id>Passenger</class-id>
<body>This Passenger Class has instances such first name,last name, id type and purpose of travel</body>
</comment>

<methods>
<class-id>Passenger</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="buy">buy
"generated by Daskalos"

     ^buy</body>

<body package="DaskalosUserClasses" selector="buy:">buy: anObject
"generated by Daskalos"

     buy := (self checkValue: anObject forVariable: #buy)</body>

<body package="DaskalosUserClasses" selector="firstName">firstName
"generated by Daskalos"

     ^firstName</body>

<body package="DaskalosUserClasses" selector="firstName:">firstName: anObject
"generated by Daskalos"

     firstName := (self checkValue: anObject forVariable: #firstName)</body>

<body package="DaskalosUserClasses" selector="idType">idType
"generated by Daskalos"

     ^idType</body>

<body package="DaskalosUserClasses" selector="idType:">idType: anObject
"generated by Daskalos"

     idType := (self checkValue: anObject forVariable: #idType)</body>

<body package="DaskalosUserClasses" selector="lastName">lastName
"generated by Daskalos"

     ^lastName</body>

<body package="DaskalosUserClasses" selector="lastName:">lastName: anObject
"generated by Daskalos"

     lastName := (self checkValue: anObject forVariable: #lastName)</body>

<body package="DaskalosUserClasses" selector="purposeOfTravel">purposeOfTravel
"generated by Daskalos"

     ^purposeOfTravel</body>

<body package="DaskalosUserClasses" selector="purposeOfTravel:">purposeOfTravel: anObject
"generated by Daskalos"

     purposeOfTravel := (self checkValue: anObject forVariable: #purposeOfTravel)</body>
</methods>

<methods>
<class-id>Passenger</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     firstName := nil.
     lastName := nil.
     idType := nil.
     purposeOfTravel := nil.
     buy := nil.
</body>
</methods>


<class>
<name>Employee</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>firstName lastName id jobPosition salary workIn worksFor </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Employee class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#lastName -&gt; Core.String); add: (#worksFor -&gt; Core.Object); add: (#id -&gt; Core.Number); add: (#workIn -&gt; Core.Object); add: (#firstName -&gt; Core.String); add: (#salary -&gt; Core.Number); add: (#jobPosition -&gt; Core.String); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<comment>
<class-id>Employee</class-id>
<body>This Employee Class has instances such as first name,last name, id, job position  and salary</body>
</comment>

<methods>
<class-id>Employee</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="firstName">firstName
"generated by Daskalos"

     ^firstName</body>

<body package="DaskalosUserClasses" selector="firstName:">firstName: anObject
"generated by Daskalos"

     firstName := (self checkValue: anObject forVariable: #firstName)</body>

<body package="DaskalosUserClasses" selector="id">id
"generated by Daskalos"

     ^id</body>

<body package="DaskalosUserClasses" selector="id:">id: anObject
"generated by Daskalos"

     id := (self checkValue: anObject forVariable: #id)</body>

<body package="DaskalosUserClasses" selector="jobPosition">jobPosition
"generated by Daskalos"

     ^jobPosition</body>

<body package="DaskalosUserClasses" selector="jobPosition:">jobPosition: anObject
"generated by Daskalos"

     jobPosition := (self checkValue: anObject forVariable: #jobPosition)</body>

<body package="DaskalosUserClasses" selector="lastName">lastName
"generated by Daskalos"

     ^lastName</body>

<body package="DaskalosUserClasses" selector="lastName:">lastName: anObject
"generated by Daskalos"

     lastName := (self checkValue: anObject forVariable: #lastName)</body>

<body package="DaskalosUserClasses" selector="salary">salary
"generated by Daskalos"

     ^salary</body>

<body package="DaskalosUserClasses" selector="salary:">salary: anObject
"generated by Daskalos"

     salary := (self checkValue: anObject forVariable: #salary)</body>

<body package="DaskalosUserClasses" selector="workIn">workIn
"generated by Daskalos"

     ^workIn</body>

<body package="DaskalosUserClasses" selector="workIn:">workIn: anObject
"generated by Daskalos"

     workIn := (self checkValue: anObject forVariable: #workIn)</body>

<body package="DaskalosUserClasses" selector="worksFor">worksFor
"generated by Daskalos"

     ^worksFor</body>

<body package="DaskalosUserClasses" selector="worksFor:">worksFor: anObject
"generated by Daskalos"

     worksFor := (self checkValue: anObject forVariable: #worksFor)</body>
</methods>

<methods>
<class-id>Employee</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     firstName := nil.
     lastName := nil.
     id := nil.
     jobPosition := nil.
     salary := nil.
     workIn := nil.
     worksFor := nil.
</body>
</methods>

<methods>
<class-id>Employee</class-id> <category>other methods</category>

<body package="DaskalosUserClasses" selector="salaryRange">salaryRange
	| sm1 sm2 |
	sm1 := 'Good'.
	sm2 := 'Average'.
	salary &gt; 50000 ifTrue: [^sm1] ifFalse: [^sm2]</body>
</methods>


</st-source>
